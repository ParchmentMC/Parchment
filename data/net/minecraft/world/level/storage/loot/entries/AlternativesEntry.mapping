CLASS net/minecraft/world/level/storage/loot/entries/AlternativesEntry
	METHOD <init> ([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;[Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition;)V
	METHOD alternatives ([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)Lnet/minecraft/world/level/storage/loot/entries/AlternativesEntry$Builder;
	METHOD compose ([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;)Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;
		ARG 1 entries
	METHOD getType ()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryType;
	METHOD lambda$compose$0 ([Lnet/minecraft/world/level/storage/loot/entries/ComposableEntryContainer;Lnet/minecraft/world/level/storage/loot/LootContext;Ljava/util/function/Consumer;)Z
	METHOD validate (Lnet/minecraft/world/level/storage/loot/ValidationContext;)V
	CLASS Builder
		FIELD entries Ljava/util/List;
		METHOD <init> ([Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)V
		METHOD build ()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer;
		METHOD getThis ()Lnet/minecraft/world/level/storage/loot/entries/AlternativesEntry$Builder;
		METHOD getThis ()Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;
		METHOD otherwise (Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;)Lnet/minecraft/world/level/storage/loot/entries/AlternativesEntry$Builder;
