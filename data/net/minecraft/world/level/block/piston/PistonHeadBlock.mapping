CLASS net/minecraft/world/level/block/piston/PistonHeadBlock
	FIELD AABB_OFFSET F
	FIELD DOWN_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD DOWN_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD EAST_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD EAST_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD EDGE_MAX F
	FIELD EDGE_MIN F
	FIELD NORTH_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD NORTH_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD PLATFORM F
	FIELD SHAPES_LONG [Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHAPES_SHORT [Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT Lnet/minecraft/world/level/block/state/properties/BooleanProperty;
	FIELD SHORT_DOWN_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT_EAST_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT_NORTH_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT_SOUTH_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT_UP_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SHORT_WEST_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SOUTH_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD SOUTH_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD TYPE Lnet/minecraft/world/level/block/state/properties/EnumProperty;
	FIELD UP_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD UP_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD WEST_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	FIELD WEST_ARM_AABB Lnet/minecraft/world/phys/shapes/VoxelShape;
	METHOD <clinit> ()V
	METHOD <init> (Lnet/minecraft/world/level/block/state/BlockBehaviour$Properties;)V
	METHOD calculateShape (Lnet/minecraft/core/Direction;Z)Lnet/minecraft/world/phys/shapes/VoxelShape;
		ARG 0 direction
		ARG 1 shortArm
	METHOD canSurvive (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z
		ARG 1 state
		ARG 2 level
		ARG 3 pos
	METHOD createBlockStateDefinition (Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V
		ARG 1 builder
	METHOD getCloneItemStack (Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;
		ARG 1 level
		ARG 2 pos
		ARG 3 state
	METHOD getShape (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;
		ARG 1 state
		ARG 2 level
		ARG 3 pos
		ARG 4 context
	METHOD isFittingBase (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z
		ARG 1 baseState
		ARG 2 extendedState
	METHOD isPathfindable (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z
		ARG 1 state
		ARG 2 level
		ARG 3 pos
		ARG 4 type
	METHOD lambda$makeShapes$0 (ZLnet/minecraft/core/Direction;)Lnet/minecraft/world/phys/shapes/VoxelShape;
	METHOD lambda$makeShapes$1 (I)[Lnet/minecraft/world/phys/shapes/VoxelShape;
	METHOD makeShapes (Z)[Lnet/minecraft/world/phys/shapes/VoxelShape;
		ARG 0 extended
	METHOD mirror (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;
		COMMENT Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.
		COMMENT @deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine.
		ARG 1 state
		ARG 2 mirror
	METHOD neighborChanged (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V
		ARG 1 state
		ARG 2 level
		ARG 3 pos
		ARG 4 block
		ARG 5 fromPos
		ARG 6 isMoving
	METHOD onRemove (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V
		ARG 1 state
		ARG 2 level
		ARG 3 pos
		ARG 4 newState
		ARG 5 isMoving
	METHOD playerWillDestroy (Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V
		COMMENT Called before the Block is set to air in the world. Called regardless of if the player's tool can actually collect this block
		ARG 1 level
		ARG 2 pos
		ARG 3 state
		ARG 4 player
	METHOD rotate (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;
		COMMENT Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.
		COMMENT @deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine.
		ARG 1 state
		ARG 2 rot
	METHOD updateShape (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;
		COMMENT Update the provided state given the provided neighbor facing and neighbor state, returning a new state.
		COMMENT For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.
		COMMENT Note that this method should ideally consider only the specific face passed in.
		ARG 1 state
		ARG 2 facing
		ARG 3 facingState
		ARG 4 level
		ARG 5 currentPos
		ARG 6 facingPos
	METHOD useShapeForLightOcclusion (Lnet/minecraft/world/level/block/state/BlockState;)Z
		ARG 1 state
	CLASS 1
		FIELD $SwitchMap$net$minecraft$core$Direction [I
		METHOD <clinit> ()V
