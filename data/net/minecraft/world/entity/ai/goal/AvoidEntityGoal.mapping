CLASS net/minecraft/world/entity/ai/goal/AvoidEntityGoal
	FIELD avoidClass Ljava/lang/Class;
		COMMENT Class of entity this behavior seeks to avoid
	FIELD avoidEntityTargeting Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;
	FIELD avoidPredicate Ljava/util/function/Predicate;
	FIELD maxDist F
	FIELD mob Lnet/minecraft/world/entity/PathfinderMob;
	FIELD path Lnet/minecraft/world/level/pathfinder/Path;
	FIELD pathNav Lnet/minecraft/world/entity/ai/navigation/PathNavigation;
	FIELD predicateOnAvoidEntity Ljava/util/function/Predicate;
	FIELD sprintSpeedModifier D
	FIELD toAvoid Lnet/minecraft/world/entity/LivingEntity;
	FIELD walkSpeedModifier D
	METHOD <init> (Lnet/minecraft/world/entity/PathfinderMob;Ljava/lang/Class;FDD)V
	METHOD <init> (Lnet/minecraft/world/entity/PathfinderMob;Ljava/lang/Class;FDDLjava/util/function/Predicate;)V
	METHOD <init> (Lnet/minecraft/world/entity/PathfinderMob;Ljava/lang/Class;Ljava/util/function/Predicate;FDDLjava/util/function/Predicate;)V
	METHOD canContinueToUse ()Z
		COMMENT Returns whether an in-progress EntityAIBase should continue executing
	METHOD canUse ()Z
		COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
	METHOD lambda$canUse$2 (Lnet/minecraft/world/entity/LivingEntity;)Z
	METHOD lambda$new$0 (Lnet/minecraft/world/entity/LivingEntity;)Z
	METHOD lambda$new$1 (Lnet/minecraft/world/entity/LivingEntity;)Z
	METHOD start ()V
		COMMENT Execute a one shot task or start executing a continuous task
	METHOD stop ()V
		COMMENT Reset the task's internal state. Called when this task is interrupted by another one
	METHOD tick ()V
		COMMENT Keep ticking a continuous task that has already been started
