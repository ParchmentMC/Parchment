CLASS net/minecraft/world/entity/monster/Evoker
	FIELD wololoTarget Lnet/minecraft/world/entity/animal/Sheep;
	METHOD <init> (Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/Level;)V
	METHOD access$000 (Lnet/minecraft/world/entity/monster/Evoker;)Ljava/util/Random;
	METHOD access$100 (Lnet/minecraft/world/entity/monster/Evoker;)Ljava/util/Random;
	METHOD access$200 (Lnet/minecraft/world/entity/monster/Evoker;)Ljava/util/Random;
	METHOD access$300 (Lnet/minecraft/world/entity/monster/Evoker;)Ljava/util/Random;
	METHOD access$400 (Lnet/minecraft/world/entity/monster/Evoker;)Ljava/util/Random;
	METHOD addAdditionalSaveData (Lnet/minecraft/nbt/CompoundTag;)V
		ARG 1 compound
	METHOD applyRaidBuffs (IZ)V
		ARG 1 wave
	METHOD createAttributes ()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;
	METHOD customServerAiStep ()V
	METHOD defineSynchedData ()V
	METHOD getAmbientSound ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getCastingSoundEvent ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getCelebrateSound ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getDeathSound ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getHurtSound (Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;
		ARG 1 damageSource
	METHOD getWololoTarget ()Lnet/minecraft/world/entity/animal/Sheep;
	METHOD isAlliedTo (Lnet/minecraft/world/entity/Entity;)Z
		COMMENT Returns whether this Entity is on the same team as the given Entity.
		ARG 1 entity
	METHOD readAdditionalSaveData (Lnet/minecraft/nbt/CompoundTag;)V
		COMMENT (abstract) Protected helper method to read subclass entity data from NBT.
		ARG 1 compound
	METHOD registerGoals ()V
	METHOD setWololoTarget (Lnet/minecraft/world/entity/animal/Sheep;)V
		ARG 1 wololoTarget
	CLASS EvokerAttackSpellGoal
		FIELD this$0 Lnet/minecraft/world/entity/monster/Evoker;
		METHOD <init> (Lnet/minecraft/world/entity/monster/Evoker;)V
		METHOD createSpellEntity (DDDDFI)V
		METHOD getCastingInterval ()I
		METHOD getCastingTime ()I
		METHOD getSpell ()Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;
		METHOD getSpellPrepareSound ()Lnet/minecraft/sounds/SoundEvent;
		METHOD performSpellCasting ()V
	CLASS EvokerCastingSpellGoal
		FIELD this$0 Lnet/minecraft/world/entity/monster/Evoker;
		METHOD <init> (Lnet/minecraft/world/entity/monster/Evoker;)V
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
	CLASS EvokerSummonSpellGoal
		FIELD this$0 Lnet/minecraft/world/entity/monster/Evoker;
		FIELD vexCountTargeting Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;
		METHOD <init> (Lnet/minecraft/world/entity/monster/Evoker;)V
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD getCastingInterval ()I
		METHOD getCastingTime ()I
		METHOD getSpell ()Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;
		METHOD getSpellPrepareSound ()Lnet/minecraft/sounds/SoundEvent;
		METHOD performSpellCasting ()V
	CLASS EvokerWololoSpellGoal
		FIELD this$0 Lnet/minecraft/world/entity/monster/Evoker;
		FIELD wololoTargeting Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;
		METHOD <init> (Lnet/minecraft/world/entity/monster/Evoker;)V
		METHOD canContinueToUse ()Z
			COMMENT Returns whether an in-progress EntityAIBase should continue executing
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD getCastWarmupTime ()I
		METHOD getCastingInterval ()I
		METHOD getCastingTime ()I
		METHOD getSpell ()Lnet/minecraft/world/entity/monster/SpellcasterIllager$IllagerSpell;
		METHOD getSpellPrepareSound ()Lnet/minecraft/sounds/SoundEvent;
		METHOD lambda$new$0 (Lnet/minecraft/world/entity/LivingEntity;)Z
		METHOD performSpellCasting ()V
		METHOD start ()V
			COMMENT Execute a one shot task or start executing a continuous task
		METHOD stop ()V
			COMMENT Reset the task's internal state. Called when this task is interrupted by another one
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
