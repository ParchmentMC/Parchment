CLASS net/minecraft/world/entity/monster/EnderMan
	FIELD DATA_CARRY_STATE Lnet/minecraft/network/syncher/EntityDataAccessor;
	FIELD DATA_CREEPY Lnet/minecraft/network/syncher/EntityDataAccessor;
	FIELD DATA_STARED_AT Lnet/minecraft/network/syncher/EntityDataAccessor;
	FIELD DELAY_BETWEEN_CREEPY_STARE_SOUND I
	FIELD MIN_DEAGGRESSION_TIME I
	FIELD PERSISTENT_ANGER_TIME Lnet/minecraft/util/valueproviders/UniformInt;
	FIELD SPEED_MODIFIER_ATTACKING Lnet/minecraft/world/entity/ai/attributes/AttributeModifier;
	FIELD SPEED_MODIFIER_ATTACKING_UUID Ljava/util/UUID;
	FIELD lastStareSound I
	FIELD persistentAngerTarget Ljava/util/UUID;
	FIELD remainingPersistentAngerTime I
	FIELD targetChangeTime I
	METHOD <clinit> ()V
	METHOD <init> (Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/Level;)V
	METHOD addAdditionalSaveData (Lnet/minecraft/nbt/CompoundTag;)V
		ARG 1 compound
	METHOD aiStep ()V
		COMMENT Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use this to react to sunlight and start to burn.
	METHOD createAttributes ()Lnet/minecraft/world/entity/ai/attributes/AttributeSupplier$Builder;
	METHOD customServerAiStep ()V
	METHOD defineSynchedData ()V
	METHOD dropCustomDeathLoot (Lnet/minecraft/world/damagesource/DamageSource;IZ)V
		ARG 1 source
		ARG 2 looting
		ARG 3 recentlyHit
	METHOD getAmbientSound ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getCarriedBlock ()Lnet/minecraft/world/level/block/state/BlockState;
	METHOD getDeathSound ()Lnet/minecraft/sounds/SoundEvent;
	METHOD getHurtSound (Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;
		ARG 1 damageSource
	METHOD getPersistentAngerTarget ()Ljava/util/UUID;
	METHOD getRemainingPersistentAngerTime ()I
	METHOD getStandingEyeHeight (Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F
		ARG 1 pose
		ARG 2 size
	METHOD hasBeenStaredAt ()Z
	METHOD hurt (Lnet/minecraft/world/damagesource/DamageSource;F)Z
		COMMENT Called when the entity is attacked.
		ARG 1 source
		ARG 2 amount
	METHOD isCreepy ()Z
	METHOD isLookingAtMe (Lnet/minecraft/world/entity/player/Player;)Z
		COMMENT Checks to see if this enderman should be attacking this player
		ARG 1 player
	METHOD isSensitiveToWater ()Z
	METHOD onSyncedDataUpdated (Lnet/minecraft/network/syncher/EntityDataAccessor;)V
		ARG 1 key
	METHOD playStareSound ()V
	METHOD readAdditionalSaveData (Lnet/minecraft/nbt/CompoundTag;)V
		COMMENT (abstract) Protected helper method to read subclass entity data from NBT.
		ARG 1 compound
	METHOD registerGoals ()V
	METHOD requiresCustomPersistence ()Z
	METHOD setBeingStaredAt ()V
	METHOD setCarriedBlock (Lnet/minecraft/world/level/block/state/BlockState;)V
		ARG 1 state
	METHOD setPersistentAngerTarget (Ljava/util/UUID;)V
		ARG 1 target
	METHOD setRemainingPersistentAngerTime (I)V
		ARG 1 time
	METHOD setTarget (Lnet/minecraft/world/entity/LivingEntity;)V
		COMMENT Sets the active target the Task system uses for tracking
		ARG 1 livingEntity
	METHOD startPersistentAngerTimer ()V
	METHOD teleport ()Z
		COMMENT Teleport the enderman to a random nearby position
	METHOD teleport (DDD)Z
		COMMENT Teleport the enderman
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD teleportTowards (Lnet/minecraft/world/entity/Entity;)Z
		COMMENT Teleport the enderman to another entity
	CLASS EndermanFreezeWhenLookedAt
		FIELD enderman Lnet/minecraft/world/entity/monster/EnderMan;
		FIELD target Lnet/minecraft/world/entity/LivingEntity;
		METHOD <init> (Lnet/minecraft/world/entity/monster/EnderMan;)V
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD start ()V
			COMMENT Execute a one shot task or start executing a continuous task
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
	CLASS EndermanLeaveBlockGoal
		FIELD enderman Lnet/minecraft/world/entity/monster/EnderMan;
		METHOD <init> (Lnet/minecraft/world/entity/monster/EnderMan;)V
		METHOD canPlaceBlock (Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)Z
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
	CLASS EndermanLookForPlayerGoal
		FIELD aggroTime I
		FIELD continueAggroTargetConditions Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;
		FIELD enderman Lnet/minecraft/world/entity/monster/EnderMan;
		FIELD pendingTarget Lnet/minecraft/world/entity/player/Player;
			COMMENT The player
		FIELD startAggroTargetConditions Lnet/minecraft/world/entity/ai/targeting/TargetingConditions;
		FIELD teleportTime I
		METHOD <init> (Lnet/minecraft/world/entity/monster/EnderMan;Ljava/util/function/Predicate;)V
		METHOD canContinueToUse ()Z
			COMMENT Returns whether an in-progress EntityAIBase should continue executing
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD lambda$new$0 (Lnet/minecraft/world/entity/monster/EnderMan;Lnet/minecraft/world/entity/LivingEntity;)Z
		METHOD start ()V
			COMMENT Execute a one shot task or start executing a continuous task
		METHOD stop ()V
			COMMENT Reset the task's internal state. Called when this task is interrupted by another one
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
	CLASS EndermanTakeBlockGoal
		FIELD enderman Lnet/minecraft/world/entity/monster/EnderMan;
		METHOD <init> (Lnet/minecraft/world/entity/monster/EnderMan;)V
		METHOD canUse ()Z
			COMMENT Returns whether execution should begin. You can also read and cache any state necessary for execution in this method as well.
		METHOD tick ()V
			COMMENT Keep ticking a continuous task that has already been started
