CLASS net/minecraft/world/phys/AABB
	METHOD <init> (DDDDDD)V
		ARG 1 minX
		ARG 3 minY
		ARG 5 minZ
		ARG 7 maxX
		ARG 9 maxY
		ARG 11 maxZ
	METHOD <init> (Lnet/minecraft/core/BlockPos;)V
		ARG 1 pos
	METHOD <init> (Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)V
		ARG 1 startPos
		ARG 2 endPos
	METHOD <init> (Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)V
		ARG 1 startVector
		ARG 2 endVector
	METHOD clip (Ljava/lang/Iterable;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;
		ARG 0 boxes
		ARG 1 start
		ARG 2 end
		ARG 3 pos
	METHOD clip (Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Ljava/util/Optional;
		ARG 1 from
		ARG 2 to
	METHOD clipPoint ([DLnet/minecraft/core/Direction;DDDDDDDDLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;
		ARG 0 minDistance
		ARG 1 prevDirection
		ARG 2 distanceSide
		ARG 4 distanceOtherA
		ARG 6 distanceOtherB
		ARG 8 minSide
		ARG 10 minOtherA
		ARG 12 maxOtherA
		ARG 14 minOtherB
		ARG 16 maxOtherB
		ARG 18 hitSide
		ARG 19 startSide
		ARG 21 startOtherA
		ARG 23 startOtherB
	METHOD contains (DDD)Z
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD contains (Lnet/minecraft/world/phys/Vec3;)Z
		COMMENT Returns if the supplied Vec3D is completely inside the bounding box
		ARG 1 vec
	METHOD contract (DDD)Lnet/minecraft/world/phys/AABB;
		COMMENT Creates a new {@link AxisAlignedBB} that has been contracted by the given amount, with positive changes decreasing max values and negative changes increasing min values.
		COMMENT <br/>
		COMMENT If the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see last sample).
		COMMENT
		COMMENT <h3>Samples:</h3>
		COMMENT <table>
		COMMENT <tr><th>Input</th><th>Result</th></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 4, 4, 4).contract(2, 2, 2)</code></pre></td><td><pre><samp>box[0.0, 0.0, 0.0 -> 2.0, 2.0, 2.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 4, 4, 4).contract(-2, -2, -2)</code></pre></td><td><pre><samp>box[2.0, 2.0, 2.0 -> 4.0, 4.0, 4.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).contract(0, 1, -1)</code></pre></td><td><pre><samp>box[5.0, 5.0, 6.0 -> 7.0, 6.0, 7.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(-2, -2, -2, 2, 2, 2).contract(4, -4, 0)</code></pre></td><td><pre><samp>box[-8.0, 2.0, -2.0 -> -2.0, 8.0, 2.0]</samp></pre></td></tr>
		COMMENT </table>
		COMMENT
		COMMENT <h3>See Also:</h3>
		COMMENT <ul>
		COMMENT <li>{@link #expand(double, double, double)} - like this, except for expanding.</li>
		COMMENT <li>{@link #grow(double, double, double)} and {@link #grow(double)} - expands in all directions.</li>
		COMMENT <li>{@link #shrink(double)} - contracts in all directions (like {@link #grow(double)})</li>
		COMMENT </ul>
		COMMENT
		COMMENT @return A new modified bounding box.
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD deflate (D)Lnet/minecraft/world/phys/AABB;
		COMMENT Creates a new {@link AxisAlignedBB} that is expanded by the given value in all directions. Equivalent to {@link #grow(double)} with value set to the negative of the value provided here. Passing a negative value to this method values will grow the AABB.
		COMMENT <br/>
		COMMENT Side lengths will be decreased by 2 times the value of the parameter, since both min and max are changed.
		COMMENT <br/>
		COMMENT If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see samples on {@link #grow(double, double, double)}).
		COMMENT
		COMMENT @return A modified AABB.
		ARG 1 value
	METHOD deflate (DDD)Lnet/minecraft/world/phys/AABB;
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD expandTowards (DDD)Lnet/minecraft/world/phys/AABB;
		COMMENT Creates a new {@link AxisAlignedBB} that has been expanded by the given amount, with positive changes increasing max values and negative changes decreasing min values.
		COMMENT
		COMMENT <h3>Samples:</h3>
		COMMENT <table>
		COMMENT <tr><th>Input</th><th>Result</th></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).expand(2, 2, 2)</code></pre></td><td><pre><samp>box[0, 0, 0 -> 3, 3, 3]</samp></pre></td><td>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).expand(-2, -2, -2)</code></pre></td><td><pre><samp>box[-2, -2, -2 -> 1, 1, 1]</samp></pre></td><td>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).expand(0, 1, -1)</code></pre></td><td><pre><samp>box[5, 5, 4, 7, 8, 7]</samp></pre></td><td>
		COMMENT </table>
		COMMENT
		COMMENT <h3>See Also:</h3>
		COMMENT <ul>
		COMMENT <li>{@link #contract(double, double, double)} - like this, except for shrinking.</li>
		COMMENT <li>{@link #grow(double, double, double)} and {@link #grow(double)} - expands in all directions.</li>
		COMMENT <li>{@link #shrink(double)} - contracts in all directions (like {@link #grow(double)})</li>
		COMMENT </ul>
		COMMENT
		COMMENT @return A modified bounding box that will always be equal or greater in volume to this bounding box.
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD expandTowards (Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;
		ARG 1 vector
	METHOD getDirection (Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/phys/Vec3;[DLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;
		ARG 0 aabb
		ARG 1 start
		ARG 2 minDistance
		ARG 3 facing
		ARG 4 deltaX
		ARG 6 deltaY
		ARG 8 deltaZ
	METHOD getSize ()D
		COMMENT Returns the average length of the edges of the bounding box.
	METHOD inflate (D)Lnet/minecraft/world/phys/AABB;
		COMMENT Creates a new {@link AxisAlignedBB} that is expanded by the given value in all directions. Equivalent to {@link #grow(double, double, double)} with the given value for all 3 params. Negative values will shrink the AABB.
		COMMENT <br/>
		COMMENT Side lengths will be increased by 2 times the value of the parameter, since both min and max are changed.
		COMMENT <br/>
		COMMENT If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see samples on {@link #grow(double, double, double)}).
		COMMENT
		COMMENT @return A modified AABB.
		ARG 1 value
	METHOD inflate (DDD)Lnet/minecraft/world/phys/AABB;
		COMMENT Creates a new {@link AxisAlignedBB} that has been contracted by the given amount in both directions. Negative values will shrink the AABB instead of expanding it.
		COMMENT <br/>
		COMMENT Side lengths will be increased by 2 times the value of the parameters, since both min and max are changed.
		COMMENT <br/>
		COMMENT If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see last ample).
		COMMENT
		COMMENT <h3>Samples:</h3>
		COMMENT <table>
		COMMENT <tr><th>Input</th><th>Result</th></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).grow(2, 2, 2)</code></pre></td><td><pre><samp>box[-2.0, -2.0, -2.0 -> 3.0, 3.0, 3.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 6, 6, 6).grow(-2, -2, -2)</code></pre></td><td><pre><samp>box[2.0, 2.0, 2.0 -> 4.0, 4.0, 4.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).grow(0, 1, -1)</code></pre></td><td><pre><samp>box[5.0, 4.0, 6.0 -> 7.0, 8.0, 6.0]</samp></pre></td></tr>
		COMMENT <tr><td><pre><code>new AxisAlignedBB(1, 1, 1, 3, 3, 3).grow(-4, -2, -3)</code></pre></td><td><pre><samp>box[-1.0, 1.0, 0.0 -> 5.0, 3.0, 4.0]</samp></pre></td></tr>
		COMMENT </table>
		COMMENT
		COMMENT <h3>See Also:</h3>
		COMMENT <ul>
		COMMENT <li>{@link #expand(double, double, double)} - expands in only one direction.</li>
		COMMENT <li>{@link #contract(double, double, double)} - contracts in only one direction.</li>
		COMMENT <lu>{@link #grow(double)} - version of this that expands in all directions from one parameter.</li>
		COMMENT <li>{@link #shrink(double)} - contracts in all directions</li>
		COMMENT </ul>
		COMMENT
		COMMENT @return A modified bounding box.
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD intersect (Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;
		ARG 1 other
	METHOD intersects (DDDDDD)Z
		ARG 1 x1
		ARG 3 y1
		ARG 5 z1
		ARG 7 x2
		ARG 9 y2
		ARG 11 z2
	METHOD intersects (Lnet/minecraft/world/phys/AABB;)Z
		COMMENT Checks if the bounding box intersects with another.
		ARG 1 other
	METHOD intersects (Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z
		ARG 1 min
		ARG 2 max
	METHOD max (Lnet/minecraft/core/Direction$Axis;)D
		ARG 1 axis
	METHOD min (Lnet/minecraft/core/Direction$Axis;)D
		ARG 1 axis
	METHOD minmax (Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;
		ARG 1 other
	METHOD move (DDD)Lnet/minecraft/world/phys/AABB;
		COMMENT Offsets the current bounding box by the specified amount.
		ARG 1 x
		ARG 3 y
		ARG 5 z
	METHOD move (Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/AABB;
		ARG 1 pos
	METHOD move (Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;
		ARG 1 vec
	METHOD of (Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/phys/AABB;
		ARG 0 mutableBox
	METHOD ofSize (Lnet/minecraft/world/phys/Vec3;DDD)Lnet/minecraft/world/phys/AABB;
		ARG 0 center
		ARG 1 xSize
		ARG 3 ySize
		ARG 5 zSize
	METHOD setMaxX (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 maxX
	METHOD setMaxY (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 maxY
	METHOD setMaxZ (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 maxZ
	METHOD setMinX (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 minX
	METHOD setMinY (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 minY
	METHOD setMinZ (D)Lnet/minecraft/world/phys/AABB;
		ARG 1 minZ
	METHOD unitCubeFromLowerCorner (Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;
		ARG 0 vector
