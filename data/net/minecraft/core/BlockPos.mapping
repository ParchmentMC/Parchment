CLASS net/minecraft/core/BlockPos
	FIELD CODEC Lcom/mojang/serialization/Codec;
	FIELD LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD PACKED_X_LENGTH I
	FIELD PACKED_X_MASK J
	FIELD PACKED_Y_LENGTH I
	FIELD PACKED_Y_MASK J
	FIELD PACKED_Z_LENGTH I
	FIELD PACKED_Z_MASK J
	FIELD X_OFFSET I
	FIELD Y_OFFSET I
	FIELD ZERO Lnet/minecraft/core/BlockPos;
		COMMENT An immutable block pos with zero as all coordinates.
	FIELD Z_OFFSET I
	METHOD <clinit> ()V
	METHOD <init> (DDD)V
	METHOD <init> (III)V
		COMMENT Constructs a {@code BlockPos} using the provided X, Y, and Z coordinates.
		ARG 1 x
			COMMENT The X coordinate
		ARG 2 y
			COMMENT The Y coordinate
		ARG 3 z
			COMMENT The Z coordinate
	METHOD <init> (Lnet/minecraft/core/Position;)V
	METHOD <init> (Lnet/minecraft/core/Vec3i;)V
	METHOD <init> (Lnet/minecraft/world/phys/Vec3;)V
	METHOD above ()Lnet/minecraft/core/BlockPos;
		COMMENT Offset this BlockPos 1 block up
	METHOD above ()Lnet/minecraft/core/Vec3i;
	METHOD above (I)Lnet/minecraft/core/BlockPos;
		COMMENT Offset this BlockPos n blocks up
		ARG 1 n
	METHOD above (I)Lnet/minecraft/core/Vec3i;
	METHOD asLong ()J
	METHOD asLong (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD atY (I)Lnet/minecraft/core/BlockPos;
	METHOD below ()Lnet/minecraft/core/BlockPos;
		COMMENT Offset this BlockPos 1 block down
	METHOD below ()Lnet/minecraft/core/Vec3i;
	METHOD below (I)Lnet/minecraft/core/BlockPos;
		COMMENT Offset this BlockPos n blocks down
		ARG 1 n
	METHOD below (I)Lnet/minecraft/core/Vec3i;
	METHOD betweenClosed (IIIIII)Ljava/lang/Iterable;
		COMMENT Creates an Iterable that returns all positions in the box specified by the given corners. <strong>Coordinates must be in order</strong>" e.g. x1 <= x2.
		COMMENT
		COMMENT This method uses {@link BlockPos.MutableBlockPos MutableBlockPos} instead of regular BlockPos, which grants better performance. However, the resulting BlockPos instances can only be used inside the iteration loop (as otherwise the value will change), unless {@link #toImmutable()} is called. This method is ideal for searching large areas and only storing a few locations.
		COMMENT
		COMMENT @see #getAllInBox(BlockPos, BlockPos)
		COMMENT @see #getAllInBox(int, int, int, int, int, int)
		COMMENT @see #getAllInBoxMutable(BlockPos, BlockPos)
		ARG 0 x1
		ARG 1 y1
		ARG 2 z1
		ARG 3 x2
		ARG 4 y2
		ARG 5 z2
	METHOD betweenClosed (Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/lang/Iterable;
		ARG 0 firstPos
		ARG 1 secondPos
	METHOD betweenClosedStream (IIIIII)Ljava/util/stream/Stream;
		ARG 0 minX
		ARG 1 minY
		ARG 2 minZ
		ARG 3 maxX
		ARG 4 maxY
		ARG 5 maxZ
	METHOD betweenClosedStream (Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;
		ARG 0 firstPos
		ARG 1 secondPos
	METHOD betweenClosedStream (Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Ljava/util/stream/Stream;
		ARG 0 box
	METHOD betweenClosedStream (Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;
		ARG 0 aabb
	METHOD cross (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;
		COMMENT Calculate the cross product of this and the given Vector
		ARG 1 vec
	METHOD cross (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
	METHOD east ()Lnet/minecraft/core/BlockPos;
	METHOD east ()Lnet/minecraft/core/Vec3i;
	METHOD east (I)Lnet/minecraft/core/BlockPos;
	METHOD east (I)Lnet/minecraft/core/Vec3i;
	METHOD findClosestMatch (Lnet/minecraft/core/BlockPos;IILjava/util/function/Predicate;)Ljava/util/Optional;
		ARG 0 pos
		ARG 1 width
		ARG 2 height
		ARG 3 posFilter
	METHOD getFlatIndex (J)J
		ARG 0 packedPos
	METHOD getX (J)I
		ARG 0 packedPos
	METHOD getY (J)I
		ARG 0 packedPos
	METHOD getZ (J)I
		ARG 0 packedPos
	METHOD immutable ()Lnet/minecraft/core/BlockPos;
		COMMENT Returns a version of this BlockPos that is guaranteed to be immutable.
		COMMENT
		COMMENT <p>When storing a BlockPos given to you for an extended period of time, make sure you
		COMMENT use this in case the value is changed internally.</p>
	METHOD lambda$betweenClosed$5 (IIIIII)Ljava/util/Iterator;
	METHOD lambda$randomBetweenClosed$3 (IILjava/util/Random;IIIII)Ljava/util/Iterator;
	METHOD lambda$spiralAround$6 (Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;I)Ljava/util/Iterator;
	METHOD lambda$static$0 ([I)Lnet/minecraft/core/BlockPos;
	METHOD lambda$static$1 (Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;
	METHOD lambda$static$2 (Lnet/minecraft/core/BlockPos;)Ljava/util/stream/IntStream;
	METHOD lambda$withinManhattan$4 (IIIIIII)Ljava/util/Iterator;
	METHOD multiply (I)Lnet/minecraft/core/BlockPos;
	METHOD multiply (I)Lnet/minecraft/core/Vec3i;
	METHOD mutable ()Lnet/minecraft/core/BlockPos$MutableBlockPos;
	METHOD north ()Lnet/minecraft/core/BlockPos;
	METHOD north ()Lnet/minecraft/core/Vec3i;
	METHOD north (I)Lnet/minecraft/core/BlockPos;
	METHOD north (I)Lnet/minecraft/core/Vec3i;
	METHOD of (J)Lnet/minecraft/core/BlockPos;
		ARG 0 packedPos
	METHOD offset (DDD)Lnet/minecraft/core/BlockPos;
	METHOD offset (DDD)Lnet/minecraft/core/Vec3i;
	METHOD offset (III)Lnet/minecraft/core/BlockPos;
	METHOD offset (III)Lnet/minecraft/core/Vec3i;
	METHOD offset (JIII)J
		ARG 0 pos
		ARG 2 dx
		ARG 3 dy
		ARG 4 dz
	METHOD offset (JLnet/minecraft/core/Direction;)J
		ARG 0 pos
		ARG 2 direction
	METHOD offset (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;
	METHOD offset (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
	METHOD randomBetweenClosed (Ljava/util/Random;IIIIIII)Ljava/lang/Iterable;
		ARG 0 rand
		ARG 1 amount
		ARG 2 minX
		ARG 3 minY
		ARG 4 minZ
		ARG 5 maxX
		ARG 6 maxY
		ARG 7 maxZ
	METHOD randomInCube (Ljava/util/Random;ILnet/minecraft/core/BlockPos;I)Ljava/lang/Iterable;
	METHOD relative (Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/BlockPos;
	METHOD relative (Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/Vec3i;
	METHOD relative (Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos;
	METHOD relative (Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Vec3i;
	METHOD relative (Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos;
		COMMENT Offsets this BlockPos n blocks in the given direction
		ARG 1 facing
		ARG 2 n
	METHOD relative (Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/Vec3i;
	METHOD rotate (Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;
		ARG 1 rotation
	METHOD south ()Lnet/minecraft/core/BlockPos;
	METHOD south ()Lnet/minecraft/core/Vec3i;
	METHOD south (I)Lnet/minecraft/core/BlockPos;
	METHOD south (I)Lnet/minecraft/core/Vec3i;
	METHOD spiralAround (Lnet/minecraft/core/BlockPos;ILnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;)Ljava/lang/Iterable;
	METHOD subtract (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;
	METHOD subtract (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
	METHOD west ()Lnet/minecraft/core/BlockPos;
	METHOD west ()Lnet/minecraft/core/Vec3i;
	METHOD west (I)Lnet/minecraft/core/BlockPos;
	METHOD west (I)Lnet/minecraft/core/Vec3i;
	METHOD withinManhattan (Lnet/minecraft/core/BlockPos;III)Ljava/lang/Iterable;
		COMMENT Returns BlockPos#getProximitySortedBoxPositions as an Iterator.
		ARG 0 pos
		ARG 1 xWidth
		ARG 2 yHeight
		ARG 3 zWidth
	METHOD withinManhattanStream (Lnet/minecraft/core/BlockPos;III)Ljava/util/stream/Stream;
		COMMENT Returns a stream of positions in a box shape, ordered by closest to furthest. Returns by definition the given position as first element in the stream.
		ARG 0 pos
		ARG 1 xWidth
		ARG 2 yHeight
		ARG 3 zWidth
	CLASS 1
		FIELD counter I
		FIELD nextPos Lnet/minecraft/core/BlockPos$MutableBlockPos;
		FIELD val$depth I
		FIELD val$height I
		FIELD val$limit I
		FIELD val$minX I
		FIELD val$minY I
		FIELD val$minZ I
		FIELD val$random Ljava/util/Random;
		FIELD val$width I
		METHOD <init> (IILjava/util/Random;IIIII)V
		METHOD computeNext ()Ljava/lang/Object;
		METHOD computeNext ()Lnet/minecraft/core/BlockPos;
	CLASS 2
		FIELD currentDepth I
		FIELD cursor Lnet/minecraft/core/BlockPos$MutableBlockPos;
		FIELD maxX I
		FIELD maxY I
		FIELD val$maxDepth I
		FIELD val$originX I
		FIELD val$originY I
		FIELD val$originZ I
		FIELD val$reachX I
		FIELD val$reachY I
		FIELD val$reachZ I
		FIELD x I
		FIELD y I
		FIELD zMirror Z
		METHOD <init> (IIIIIII)V
		METHOD computeNext ()Ljava/lang/Object;
		METHOD computeNext ()Lnet/minecraft/core/BlockPos;
	CLASS 3
		FIELD cursor Lnet/minecraft/core/BlockPos$MutableBlockPos;
		FIELD index I
		FIELD val$end I
		FIELD val$height I
		FIELD val$minX I
		FIELD val$minY I
		FIELD val$minZ I
		FIELD val$width I
		METHOD <init> (IIIIII)V
		METHOD computeNext ()Ljava/lang/Object;
		METHOD computeNext ()Lnet/minecraft/core/BlockPos;
	CLASS 4
		FIELD cursor Lnet/minecraft/core/BlockPos$MutableBlockPos;
		FIELD directions [Lnet/minecraft/core/Direction;
		FIELD lastX I
		FIELD lastY I
		FIELD lastZ I
		FIELD leg I
		FIELD legIndex I
		FIELD legSize I
		FIELD legs I
		FIELD val$center Lnet/minecraft/core/BlockPos;
		FIELD val$firstDirection Lnet/minecraft/core/Direction;
		FIELD val$radius I
		FIELD val$secondDirection Lnet/minecraft/core/Direction;
		METHOD <init> (Lnet/minecraft/core/Direction;Lnet/minecraft/core/Direction;Lnet/minecraft/core/BlockPos;I)V
		METHOD computeNext ()Ljava/lang/Object;
		METHOD computeNext ()Lnet/minecraft/core/BlockPos$MutableBlockPos;
	CLASS 5
		FIELD $SwitchMap$net$minecraft$core$Direction$Axis [I
		FIELD $SwitchMap$net$minecraft$world$level$block$Rotation [I
		METHOD <clinit> ()V
	CLASS MutableBlockPos
		METHOD <init> ()V
		METHOD <init> (DDD)V
		METHOD <init> (III)V
		METHOD above ()Lnet/minecraft/core/Vec3i;
			COMMENT Offset this BlockPos 1 block up
		METHOD above (I)Lnet/minecraft/core/Vec3i;
			COMMENT Offset this BlockPos n blocks up
			ARG 1 n
		METHOD below ()Lnet/minecraft/core/Vec3i;
			COMMENT Offset this BlockPos 1 block down
		METHOD below (I)Lnet/minecraft/core/Vec3i;
			COMMENT Offset this BlockPos n blocks down
			ARG 1 n
		METHOD clamp (Lnet/minecraft/core/Direction$Axis;II)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 axis
			ARG 2 min
			ARG 3 max
		METHOD cross (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
			COMMENT Calculate the cross product of this and the given Vector
			ARG 1 vec
		METHOD east ()Lnet/minecraft/core/Vec3i;
		METHOD east (I)Lnet/minecraft/core/Vec3i;
		METHOD immutable ()Lnet/minecraft/core/BlockPos;
			COMMENT Returns a version of this BlockPos that is guaranteed to be immutable.
			COMMENT
			COMMENT <p>When storing a BlockPos given to you for an extended period of time, make sure you
			COMMENT use this in case the value is changed internally.</p>
		METHOD move (III)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 x
			ARG 2 y
			ARG 3 z
		METHOD move (Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 facing
		METHOD move (Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 facing
			ARG 2 n
		METHOD move (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;
		METHOD multiply (I)Lnet/minecraft/core/BlockPos;
		METHOD multiply (I)Lnet/minecraft/core/Vec3i;
		METHOD north ()Lnet/minecraft/core/Vec3i;
		METHOD north (I)Lnet/minecraft/core/Vec3i;
		METHOD offset (DDD)Lnet/minecraft/core/BlockPos;
		METHOD offset (DDD)Lnet/minecraft/core/Vec3i;
		METHOD offset (III)Lnet/minecraft/core/BlockPos;
		METHOD offset (III)Lnet/minecraft/core/Vec3i;
		METHOD offset (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
		METHOD relative (Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/BlockPos;
		METHOD relative (Lnet/minecraft/core/Direction$Axis;I)Lnet/minecraft/core/Vec3i;
		METHOD relative (Lnet/minecraft/core/Direction;)Lnet/minecraft/core/Vec3i;
		METHOD relative (Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos;
			COMMENT Offsets this BlockPos n blocks in the given direction
			ARG 1 facing
			ARG 2 n
		METHOD relative (Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/Vec3i;
			COMMENT Offsets this BlockPos n blocks in the given direction
			ARG 1 facing
			ARG 2 n
		METHOD rotate (Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;
			ARG 1 rotation
		METHOD set (DDD)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 x
			ARG 3 y
			ARG 5 z
		METHOD set (III)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			COMMENT Sets position
			ARG 1 x
			ARG 2 y
			ARG 3 z
		METHOD set (J)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 packedPos
		METHOD set (Lnet/minecraft/core/AxisCycle;III)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 rotation
			ARG 2 x
			ARG 3 y
			ARG 4 z
		METHOD set (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 vec
		METHOD setWithOffset (Lnet/minecraft/core/Vec3i;III)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 pos
			ARG 2 offsetX
			ARG 3 offsetY
			ARG 4 offsetZ
		METHOD setWithOffset (Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Direction;)Lnet/minecraft/core/BlockPos$MutableBlockPos;
			ARG 1 pos
			ARG 2 direction
		METHOD setWithOffset (Lnet/minecraft/core/Vec3i;Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos$MutableBlockPos;
		METHOD setX (I)Lnet/minecraft/core/BlockPos$MutableBlockPos;
		METHOD setX (I)Lnet/minecraft/core/Vec3i;
		METHOD setY (I)Lnet/minecraft/core/BlockPos$MutableBlockPos;
		METHOD setY (I)Lnet/minecraft/core/Vec3i;
		METHOD setZ (I)Lnet/minecraft/core/BlockPos$MutableBlockPos;
		METHOD setZ (I)Lnet/minecraft/core/Vec3i;
		METHOD south ()Lnet/minecraft/core/Vec3i;
		METHOD south (I)Lnet/minecraft/core/Vec3i;
		METHOD subtract (Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/Vec3i;
		METHOD west ()Lnet/minecraft/core/Vec3i;
		METHOD west (I)Lnet/minecraft/core/Vec3i;
