CLASS net/minecraft/util/Mth
	FIELD MULTIPLY_DE_BRUIJN_BIT_POSITION [I
		COMMENT Though it looks like an array, this is really more like a mapping. Key (index of this array) is the upper 5 bits of the result of multiplying a 32-bit unsigned integer by the B(2, 5) De Bruijn sequence 0x077CB531. Value (value stored in the array) is the unique index (from the right) of the leftmo
	METHOD abs (F)F
		ARG 0 value
	METHOD abs (I)I
		COMMENT Returns the unsigned value of an int.
		ARG 0 value
	METHOD absFloor (D)I
		ARG 0 value
	METHOD absMax (DD)D
		COMMENT Maximum of the absolute value of two numbers.
		ARG 0 x
		ARG 2 y
	METHOD approach (FFF)F
		COMMENT Changes value by stepSize towards the limit and returns the result.
		COMMENT If value is smaller than limit, the result will never be bigger than limit.
		COMMENT If value is bigger than limit, the result will never be smaller than limit.
		ARG 0 value
		ARG 1 limit
		ARG 2 stepSize
	METHOD approachDegrees (FFF)F
		COMMENT Changes the angle by stepSize towards the limit in the direction where the distance is smaller.
		COMMENT {@see #approach(float, float, float)}
		ARG 0 angle
		ARG 1 limit
		ARG 2 stepSize
	METHOD atan2 (DD)D
		ARG 0 y
		ARG 2 x
	METHOD average ([J)D
		ARG 0 values
	METHOD binarySearch (IILjava/util/function/IntPredicate;)I
		ARG 0 min
		ARG 1 max
		ARG 2 isTargetBeforeOrAt
	METHOD ceil (D)I
		ARG 0 value
	METHOD ceil (F)I
		ARG 0 value
	METHOD ceillog2 (I)I
		COMMENT Uses a B(2, 5) De Bruijn sequence and a lookup table to efficiently calculate the log-base-two of the given value. Optimized for cases where the input value is a power-of-two. If the input value is not a power-of-two, then subtract 1 from the return value.
		ARG 0 value
	METHOD clamp (BBB)B
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 1 min
			COMMENT The lower bound for the clamp.
		ARG 2 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (DDD)D
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 2 min
			COMMENT The lower bound for the clamp.
		ARG 4 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (FFF)F
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 1 min
			COMMENT The lower bound for the clamp.
		ARG 2 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (III)I
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 1 min
			COMMENT The lower bound for the clamp.
		ARG 2 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (JJJ)J
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 2 min
			COMMENT The lower bound for the clamp.
		ARG 4 max
			COMMENT The upper bound for the clamp.
	METHOD clampedLerp (DDD)D
		COMMENT Method for linear interpolation of doubles.
		ARG 0 start
			COMMENT Start value for the lerp.
		ARG 2 end
			COMMENT End value for the lerp.
		ARG 4 delta
			COMMENT A value between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value) If the value is not between 0 and 1, it is clamped.
	METHOD clampedLerp (FFF)F
		COMMENT Method for linear interpolation of floats.
		ARG 0 start
			COMMENT Start value for the lerp.
		ARG 1 end
			COMMENT End value for the lerp.
		ARG 2 delta
			COMMENT A value between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value) If the value is not between 0 and 1, it is clamped.
	METHOD color (FFF)I
		COMMENT Makes an integer color from the given red, green, and blue float values
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD color (III)I
		COMMENT Makes a single int color with the given red, green, and blue values.
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD colorMultiply (IFFF)I
		COMMENT Multiplies an RGB color with a color given as three floats
		COMMENT @return The result as an RGB color code.
		ARG 0 color
		ARG 1 red
			COMMENT The red component of the color in range [0;1].
		ARG 2 green
			COMMENT The green component of the color in range [0;1].
		ARG 3 blue
			COMMENT The blue component of the color in range [0;1].
	METHOD colorMultiply (II)I
		COMMENT Multiplies two RGB colors by multiplying red, green and blue values separately.
		ARG 0 firstColor
		ARG 1 secondColor
	METHOD cos (F)F
		COMMENT cos looked up in the sin table with the appropriate offset
		ARG 0 value
	METHOD createInsecureUUID ()Ljava/util/UUID;
		COMMENT Generates a random UUID using the shared random
	METHOD createInsecureUUID (Lnet/minecraft/util/RandomSource;)Ljava/util/UUID;
		ARG 0 random
	METHOD cumulativeSum ([D)[D
		ARG 0 values
	METHOD degreesDifference (FF)F
		COMMENT Gets the difference between two angles in degrees.
		ARG 0 start
		ARG 1 end
	METHOD degreesDifferenceAbs (FF)F
		COMMENT Gets the absolute of the difference between two angles in degrees.
		ARG 0 start
		ARG 1 end
	METHOD equal (DD)Z
		ARG 0 x
		ARG 2 y
	METHOD equal (FF)Z
		ARG 0 x
		ARG 1 y
	METHOD fastFloor (D)I
		COMMENT Returns value cast as an int, and no greater than {@code Integer.MAX_VALUE - 1024}
		ARG 0 value
	METHOD fastInvCubeRoot (F)F
		ARG 0 number
	METHOD fastInvSqrt (D)D
		COMMENT Computes 1/sqrt(n) using <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">the fast inverse square root</a> with a constant of 0x5FE6EB50C7B537AA.
		ARG 0 number
	METHOD fastInvSqrt (F)F
		ARG 0 number
	METHOD floor (D)I
		COMMENT Returns the greatest integer less than or equal to the double argument
		ARG 0 value
	METHOD floor (F)I
		COMMENT Returns the greatest integer less than or equal to the float argument
		ARG 0 value
	METHOD frac (D)D
		COMMENT Gets the decimal portion of the given double. For instance, {@code frac(5.5)} returns {@code .5}.
		ARG 0 number
	METHOD frac (F)F
		ARG 0 number
	METHOD getDouble (Ljava/lang/String;D)D
		ARG 0 value
		ARG 1 defaultValue
	METHOD getDouble (Ljava/lang/String;DD)D
		ARG 0 value
		ARG 1 defaultValue
		ARG 3 max
	METHOD getInt (Ljava/lang/String;I)I
		COMMENT Parses the string as integer or returns the second parameter if it fails.
		ARG 0 value
		ARG 1 defaultValue
	METHOD getInt (Ljava/lang/String;II)I
		COMMENT Parses the string as integer or returns the second parameter if it fails. This value is capped to max.
		ARG 0 value
		ARG 1 defaultValue
		ARG 2 max
	METHOD getRandomForDistributionIntegral (Lnet/minecraft/util/RandomSource;[D)I
		ARG 0 random
	METHOD getSeed (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD getSeed (Lnet/minecraft/core/Vec3i;)J
		ARG 0 pos
	METHOD hsvToRgb (FFF)I
		ARG 0 hue
		ARG 1 saturation
		ARG 2 value
	METHOD intFloorDiv (II)I
		COMMENT Buckets an integer with specified bucket sizes.
		ARG 0 x
		ARG 1 y
	METHOD inverseLerp (DDD)D
		ARG 0 delta
		ARG 2 start
		ARG 4 end
	METHOD inverseLerp (FFF)F
		ARG 0 delta
		ARG 1 start
		ARG 2 end
	METHOD isPowerOfTwo (I)Z
		COMMENT Is the given value a power of two?  (1, 2, 4, 8, 16, ...)
		ARG 0 value
	METHOD length (DD)D
		ARG 0 xDistance
		ARG 2 yDistance
	METHOD length (DDD)D
		ARG 0 xDistance
		ARG 2 yDistance
		ARG 4 zDistance
	METHOD lengthSquared (DD)D
		ARG 0 xDistance
		ARG 2 yDistance
	METHOD lengthSquared (DDD)D
		ARG 0 xDistance
		ARG 2 yDistance
		ARG 4 zDistance
	METHOD lerp (DDD)D
		COMMENT Method for linear interpolation of doubles
		ARG 0 delta
			COMMENT A value usually between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value)
		ARG 2 start
			COMMENT Start value for the lerp
		ARG 4 end
			COMMENT End value for the lerp
	METHOD lerp (FFF)F
		COMMENT Method for linear interpolation of floats
		ARG 0 delta
			COMMENT A value usually between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value)
		ARG 1 start
			COMMENT Start value for the lerp
		ARG 2 end
			COMMENT End value for the lerp
	METHOD lfloor (D)J
		COMMENT Long version of floor()
		ARG 0 value
	METHOD log2 (I)I
		COMMENT Efficiently calculates the floor of the base-2 log of an integer value.  This is effectively the index of the highest bit that is set.  For example, if the number in binary is 0...100101, this will return 5.
		ARG 0 value
	METHOD nextDouble (Lnet/minecraft/util/RandomSource;DD)D
		ARG 0 random
		ARG 1 minimum
		ARG 3 maximum
	METHOD nextFloat (Lnet/minecraft/util/RandomSource;FF)F
		ARG 0 random
		ARG 1 minimum
		ARG 2 maximum
	METHOD nextInt (Lnet/minecraft/util/RandomSource;II)I
		ARG 0 random
		ARG 1 minimum
		ARG 2 maximum
	METHOD normal (Lnet/minecraft/util/RandomSource;FF)F
		COMMENT Generates a value from a normal distribution with the given mean and deviation.
		ARG 0 random
		ARG 1 mean
		ARG 2 deviation
	METHOD positiveCeilDiv (II)I
		COMMENT Returns the smallest (closest to negative infinity) int value that is greater than or equal to the algebraic quotient.
		COMMENT @see java.lang.Math#floorDiv(int, int)
		ARG 0 x
		ARG 1 y
	METHOD positiveModulo (DD)D
		ARG 0 numerator
		ARG 2 denominator
	METHOD positiveModulo (FF)F
		ARG 0 numerator
		ARG 1 denominator
	METHOD positiveModulo (II)I
		ARG 0 x
		ARG 1 y
	METHOD quantize (DI)I
		COMMENT Gets the value closest to zero that is not closer to zero than the given value and is a multiple of the factor.
		ARG 0 value
		ARG 2 factor
	METHOD randomBetween (Lnet/minecraft/util/RandomSource;FF)F
		ARG 0 random
		ARG 1 minInclusive
		ARG 2 maxExclusive
	METHOD randomBetweenInclusive (Lnet/minecraft/util/RandomSource;II)I
		ARG 0 random
		ARG 1 minInclusive
		ARG 2 maxInclusive
	METHOD rayIntersectsAABB (Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;)Z
		ARG 0 start
		ARG 1 end
		ARG 2 boundingBox
	METHOD rotLerp (FFF)F
		COMMENT Linearly interpolates an angle between the start between the start and end values given as degrees.
		ARG 0 delta
			COMMENT A value between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value)
		ARG 1 start
		ARG 2 end
	METHOD rotWrap (D)F
		ARG 0 value
	METHOD rotateIfNecessary (FFF)F
		COMMENT Takes a rotation and compares it to another rotation.
		COMMENT If the difference is greater than a given maximum, clamps the original rotation between to have at most the given difference to the actual rotation.
		COMMENT This is used to match the body rotation of entities to their head rotation.
		COMMENT @return The new value for the rotation that was adjusted
		ARG 0 rotationToAdjust
		ARG 1 actualRotation
		ARG 2 maxDifference
	METHOD rotlerp (FFF)F
		ARG 0 start
		ARG 1 end
		ARG 2 delta
	METHOD roundToward (II)I
		COMMENT Rounds the given value up to a multiple of factor.
		COMMENT @return The smallest integer multiple of factor that is greater than or equal to the value
		ARG 0 value
		ARG 1 factor
	METHOD sign (D)I
		ARG 0 x
	METHOD sin (F)F
		COMMENT sin looked up in a table
		ARG 0 value
	METHOD smallestEncompassingPowerOfTwo (I)I
		COMMENT Returns the input value rounded up to the next highest power of two.
		ARG 0 value
	METHOD sqrt (F)F
		ARG 0 value
	METHOD square (D)D
		ARG 0 value
	METHOD square (F)F
		ARG 0 value
	METHOD square (I)I
		ARG 0 value
	METHOD square (J)J
		ARG 0 value
	METHOD wrapDegrees (D)D
		COMMENT The angle is reduced to an angle between -180 and +180 by mod, and a 360 check.
		ARG 0 value
	METHOD wrapDegrees (F)F
		COMMENT The angle is reduced to an angle between -180 and +180 by mod, and a 360 check.
		ARG 0 value
	METHOD wrapDegrees (I)I
		COMMENT Adjust the angle so that his value is in range [-180;180[
		ARG 0 angle
