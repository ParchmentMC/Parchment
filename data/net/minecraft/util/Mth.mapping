CLASS net/minecraft/util/Mth
	FIELD MULTIPLY_DE_BRUIJN_BIT_POSITION [I
		COMMENT Though it looks like an array, this is really more like a mapping. Key (index of this array) is the upper 5 bits of the result of multiplying a 32-bit unsigned integer by the B(2, 5) De Bruijn sequence 0x077CB531. Value (value stored in the array) is the unique index (from the right) of the leftmo
	METHOD abs (F)F
		ARG 0 value
	METHOD abs (I)I
		COMMENT Returns the unsigned value of an int.
		ARG 0 value
	METHOD absMax (DD)D
		COMMENT Maximum of the absolute value of two numbers.
		ARG 0 x
		ARG 2 y
	METHOD average ([J)D
		ARG 0 values
	METHOD binarySearch (IILjava/util/function/IntPredicate;)I
		ARG 0 min
		ARG 1 max
		ARG 2 isTargetBeforeOrAt
	METHOD ceil (D)I
		ARG 0 value
	METHOD ceil (F)I
		ARG 0 value
	METHOD ceillog2 (I)I
		COMMENT Uses a B(2, 5) De Bruijn sequence and a lookup table to efficiently calculate the log-base-two of the given value. Optimized for cases where the input value is a power-of-two. If the input value is not a power-of-two, then subtract 1 from the return value.
		ARG 0 value
	METHOD clamp (DDD)D
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 2 min
			COMMENT The lower bound for the clamp.
		ARG 4 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (FFF)F
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 1 min
			COMMENT The lower bound for the clamp.
		ARG 2 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (III)I
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 1 min
			COMMENT The lower bound for the clamp.
		ARG 2 max
			COMMENT The upper bound for the clamp.
	METHOD clamp (JJJ)J
		COMMENT Returns the given value if between the lower and the upper bound. If the value is less than the lower bound, returns the lower bound. If the value is greater than the upper bound, returns the upper bound.
		ARG 0 value
			COMMENT The value that is clamped.
		ARG 2 min
			COMMENT The lower bound for the clamp.
		ARG 4 max
			COMMENT The upper bound for the clamp.
	METHOD clampedLerp (DDD)D
		COMMENT Method for linear interpolation of doubles.
		ARG 0 start
			COMMENT Start value for the lerp.
		ARG 2 end
			COMMENT End value for the lerp.
		ARG 4 delta
			COMMENT A value between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value) If the value is not between 0 and 1, it is clamped.
	METHOD color (FFF)I
		COMMENT Makes an integer color from the given red, green, and blue float values
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD color (III)I
		COMMENT Makes a single int color with the given red, green, and blue values.
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD cos (F)F
		COMMENT cos looked up in the sin table with the appropriate offset
		ARG 0 value
	METHOD createInsecureUUID ()Ljava/util/UUID;
		COMMENT Generates a random UUID using the shared random
	METHOD createInsecureUUID (Ljava/util/Random;)Ljava/util/UUID;
		ARG 0 rand
	METHOD equal (DD)Z
		ARG 0 x
		ARG 2 y
	METHOD equal (FF)Z
		ARG 0 x
		ARG 1 y
	METHOD fastFloor (D)I
		COMMENT returns par0 cast as an int, and no greater than Integer.MAX_VALUE-1024
		ARG 0 value
	METHOD fastInvCubeRoot (F)F
		ARG 0 number
	METHOD fastInvSqrt (D)D
		COMMENT Computes 1/sqrt(n) using <a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">the fast inverse square root</a> with a constant of 0x5FE6EB50C7B537AA.
		ARG 0 number
	METHOD fastInvSqrt (F)F
		ARG 0 number
	METHOD floor (D)I
		COMMENT Returns the greatest integer less than or equal to the double argument
		ARG 0 value
	METHOD floor (F)I
		COMMENT Returns the greatest integer less than or equal to the float argument
		ARG 0 value
	METHOD frac (D)D
		COMMENT Gets the decimal portion of the given double. For instance, {@code frac(5.5)} returns {@code .5}.
		ARG 0 number
	METHOD frac (F)F
		ARG 0 number
	METHOD getInt (Ljava/lang/String;I)I
		COMMENT parses the string as integer or returns the second parameter if it fails
		ARG 0 value
		ARG 1 defaultValue
	METHOD getSeed (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD getSeed (Lnet/minecraft/core/Vec3i;)J
		ARG 0 pos
	METHOD hsvToRgb (FFF)I
		ARG 0 hue
		ARG 1 saturation
		ARG 2 value
	METHOD intFloorDiv (II)I
		COMMENT Buckets an integer with specifed bucket sizes.
		ARG 0 x
		ARG 1 y
	METHOD isPowerOfTwo (I)Z
		COMMENT Is the given value a power of two?  (1, 2, 4, 8, 16, ...)
		ARG 0 value
	METHOD lerp (DDD)D
		COMMENT Method for linear interpolation of doubles
		ARG 0 delta
			COMMENT A value usually between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value)
		ARG 2 start
			COMMENT Start value for the lerp
		ARG 4 end
			COMMENT End value for the lerp
	METHOD lerp (FFF)F
		COMMENT Method for linear interpolation of floats
		ARG 0 delta
			COMMENT A value usually between 0 and 1 that indicates the percentage of the lerp. (0 will give the start value and 1 will give the end value)
		ARG 1 start
			COMMENT Start value for the lerp
		ARG 2 end
			COMMENT End value for the lerp
	METHOD lfloor (D)J
		COMMENT Long version of floor()
		ARG 0 value
	METHOD log2 (I)I
		COMMENT Efficiently calculates the floor of the base-2 log of an integer value.  This is effectively the index of the highest bit that is set.  For example, if the number in binary is 0...100101, this will return 5.
		ARG 0 value
	METHOD nextDouble (Ljava/util/Random;DD)D
		ARG 0 random
		ARG 1 minimum
		ARG 3 maximum
	METHOD nextFloat (Ljava/util/Random;FF)F
		ARG 0 random
		ARG 1 minimum
		ARG 2 maximum
	METHOD nextInt (Ljava/util/Random;II)I
		ARG 0 random
		ARG 1 minimum
		ARG 2 maximum
	METHOD positiveModulo (DD)D
		ARG 0 numerator
		ARG 2 denominator
	METHOD positiveModulo (FF)F
		ARG 0 numerator
		ARG 1 denominator
	METHOD positiveModulo (II)I
		ARG 0 x
		ARG 1 y
	METHOD sign (D)I
		ARG 0 x
	METHOD sin (F)F
		COMMENT sin looked up in a table
		ARG 0 value
	METHOD smallestEncompassingPowerOfTwo (I)I
		COMMENT Returns the input value rounded up to the next highest power of two.
		ARG 0 value
	METHOD sqrt (F)F
		ARG 0 value
	METHOD square (F)F
		ARG 0 value
	METHOD wrapDegrees (D)D
		COMMENT the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
		ARG 0 value
	METHOD wrapDegrees (F)F
		COMMENT the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
		ARG 0 value
	METHOD wrapDegrees (I)I
		COMMENT Adjust the angle so that his value is in range [-180180[
		ARG 0 angle
