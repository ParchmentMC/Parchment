CLASS net/minecraft/data/HashCache
	FIELD LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD cachePath Ljava/nio/file/Path;
	FIELD hits I
	FIELD keep Ljava/util/Set;
	FIELD newCache Ljava/util/Map;
	FIELD oldCache Ljava/util/Map;
	FIELD path Ljava/nio/file/Path;
	METHOD <clinit> ()V
	METHOD <init> (Ljava/nio/file/Path;Ljava/lang/String;)V
	METHOD getHash (Ljava/nio/file/Path;)Ljava/lang/String;
		COMMENT Gets the previous hash of a file, so that it doesn't need to be written to disk. Only meaningful before {@link recordHash} has been called.
		COMMENT
		COMMENT @return The hash that was recorded when {@link recordHash} was called on the previous run, or <code>null</code> if the file does not exist, or an empty string if the file exists but was not recorded. Note that the hash is <em>not</em> based on the current bytes on disk.
		ARG 1 file
	METHOD had (Ljava/nio/file/Path;)Z
		ARG 1 file
	METHOD keep (Ljava/nio/file/Path;)V
	METHOD lambda$new$0 (Ljava/nio/file/Path;)V
	METHOD lambda$new$1 (Ljava/nio/file/Path;Ljava/lang/String;)V
	METHOD lambda$purgeStaleAndWrite$2 (Ljava/util/Map$Entry;)Ljava/lang/String;
	METHOD lambda$removeStale$3 (Ljava/nio/file/Path;)V
	METHOD lambda$walkOutputFiles$4 (Ljava/nio/file/Path;)Z
	METHOD purgeStaleAndWrite ()V
		COMMENT Writes the cache file containing the hashes of newly created files to the disk, and deletes any stale files.
	METHOD putNew (Ljava/nio/file/Path;Ljava/lang/String;)V
		COMMENT Inform the cache that a file has been written to {@code fileIn} with contents hashing to {@code hash}.
		ARG 1 file
		ARG 2 hash
	METHOD removeStale ()V
	METHOD walkOutputFiles ()Ljava/util/stream/Stream;
		COMMENT Gets all files in the directory, other than the cache file itself.
