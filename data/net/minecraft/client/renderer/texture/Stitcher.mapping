CLASS net/minecraft/client/renderer/texture/Stitcher
	METHOD <init> (III)V
		ARG 1 maxWidth
		ARG 2 maxHeight
		ARG 3 mipLevel
	METHOD addToStorage (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Z
		COMMENT Attempts to find space for specified {@code holder}.
		COMMENT
		COMMENT @return {@code true} if there was space; {@code false} otherwise
		ARG 1 holder
	METHOD expand (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Z
		COMMENT Attempts to expand stitched texture in order to make space for specified {@code holder}.
		COMMENT
		COMMENT @return {@code true} if there was enough space to expand the texture; {@code false} otherwise
		ARG 1 holder
	METHOD gatherSprites (Lnet/minecraft/client/renderer/texture/Stitcher$SpriteLoader;)V
		ARG 1 loader
	METHOD lambda$static$0 (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Ljava/lang/Integer;
		ARG 0 holder
	METHOD lambda$static$1 (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Ljava/lang/Integer;
		ARG 0 holder
	METHOD lambda$static$2 (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Lnet/minecraft/resources/ResourceLocation;
		ARG 0 holder
	METHOD registerSprite (Lnet/minecraft/client/renderer/texture/Stitcher$Entry;)V
		ARG 1 entry
	METHOD smallestFittingMinTexel (II)I
		ARG 0 dimension
		ARG 1 mipLevel
	CLASS Holder
		METHOD <init> (Lnet/minecraft/client/renderer/texture/Stitcher$Entry;I)V
			ARG 1 entry
			ARG 2 mipLevel
	CLASS Region
		METHOD <init> (IIII)V
			ARG 1 originX
			ARG 2 originY
			ARG 3 width
			ARG 4 height
		METHOD add (Lnet/minecraft/client/renderer/texture/Stitcher$Holder;)Z
			ARG 1 holder
		METHOD walk (Lnet/minecraft/client/renderer/texture/Stitcher$SpriteLoader;)V
			ARG 1 spriteLoader
	CLASS SpriteLoader
		METHOD load (Lnet/minecraft/client/renderer/texture/Stitcher$Entry;II)V
			ARG 1 entry
			ARG 2 x
			ARG 3 y
