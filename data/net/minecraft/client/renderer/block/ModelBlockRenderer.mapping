CLASS net/minecraft/client/renderer/block/ModelBlockRenderer
	METHOD <init> (Lnet/minecraft/client/color/block/BlockColors;)V
		ARG 1 blockColors
	METHOD calculateShape (Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;[ILnet/minecraft/core/Direction;[FLjava/util/BitSet;)V
		COMMENT Calculates the shape and corresponding flags for the specified {@code direction} and {@code vertices}, storing the resulting shape in the specified {@code shape} array and the shape flags in {@code shapeFlags}.
		ARG 1 level
		ARG 2 state
		ARG 3 pos
		ARG 4 vertices
		ARG 5 direction
		ARG 6 shape
			COMMENT the array, of length 12, to store the shape bounds in, or {@code null} to only calculate shape flags
		ARG 7 shapeFlags
			COMMENT the bit set to store the shape flags in. The first bit will be {@code true} if the face should be offset, and the second if the face is less than a block in width and height.
	METHOD putQuadData (Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lcom/mojang/blaze3d/vertex/VertexConsumer;Lcom/mojang/blaze3d/vertex/PoseStack$Pose;Lnet/minecraft/client/renderer/block/model/BakedQuad;FFFFIIIII)V
		ARG 1 level
		ARG 2 state
		ARG 3 pos
		ARG 4 consumer
		ARG 5 pose
		ARG 6 quad
		ARG 7 brightness0
		ARG 8 brightness1
		ARG 9 brightness2
		ARG 10 brightness3
		ARG 11 lightmap0
		ARG 12 lightmap1
		ARG 13 lightmap2
		ARG 14 lightmap3
		ARG 15 packedOverlay
	METHOD renderModel (Lcom/mojang/blaze3d/vertex/PoseStack$Pose;Lcom/mojang/blaze3d/vertex/VertexConsumer;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/client/resources/model/BakedModel;FFFII)V
		ARG 1 pose
		ARG 2 consumer
		ARG 3 state
		ARG 4 model
		ARG 5 red
		ARG 6 green
		ARG 7 blue
		ARG 8 packedLight
		ARG 9 packedOverlay
	METHOD renderModelFaceAO (Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lcom/mojang/blaze3d/vertex/PoseStack;Lcom/mojang/blaze3d/vertex/VertexConsumer;Ljava/util/List;[FLjava/util/BitSet;Lnet/minecraft/client/renderer/block/ModelBlockRenderer$AmbientOcclusionFace;I)V
		ARG 1 level
		ARG 2 state
		ARG 3 pos
		ARG 4 poseStack
		ARG 5 consumer
		ARG 6 quads
		ARG 7 shape
			COMMENT the array, of length 12, to store the shape bounds in
		ARG 8 shapeFlags
			COMMENT the bit set to store the shape flags in. The first bit will be {@code true} if the face should be offset, and the second if the face is less than a block in width and height.
		ARG 9 aoFace
		ARG 10 packedOverlay
	METHOD renderModelFaceFlat (Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;IIZLcom/mojang/blaze3d/vertex/PoseStack;Lcom/mojang/blaze3d/vertex/VertexConsumer;Ljava/util/List;Ljava/util/BitSet;)V
		ARG 1 level
		ARG 2 state
		ARG 3 pos
		ARG 4 packedLight
		ARG 5 packedOverlay
		ARG 6 repackLight
			COMMENT {@code true} if packed light should be re-calculated
		ARG 7 poseStack
		ARG 8 consumer
		ARG 9 quads
		ARG 10 shapeFlags
			COMMENT the bit set to store the shape flags in. The first bit will be {@code true} if the face should be offset, and the second if the face is less than a block in width and height.
	METHOD renderQuadList (Lcom/mojang/blaze3d/vertex/PoseStack$Pose;Lcom/mojang/blaze3d/vertex/VertexConsumer;FFFLjava/util/List;II)V
		ARG 0 pose
		ARG 1 consumer
		ARG 2 red
		ARG 3 green
		ARG 4 blue
		ARG 5 quads
		ARG 6 packedLight
		ARG 7 packedOverlay
	CLASS Cache
		METHOD getLightColor (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/core/BlockPos;)I
			ARG 1 state
			ARG 2 level
			ARG 3 pos
		METHOD getShadeBrightness (Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/core/BlockPos;)F
			ARG 1 state
			ARG 2 level
			ARG 3 pos
		CLASS 1
			METHOD rehash (I)V
				ARG 1 newN
		CLASS 2
			METHOD rehash (I)V
				ARG 1 newN
	CLASS SizeInfo
		METHOD <init> (Ljava/lang/String;ILnet/minecraft/core/Direction;Z)V
			ARG 3 direction
			ARG 4 flip
	CLASS AdjacencyInfo
		METHOD <init> (Ljava/lang/String;I[Lnet/minecraft/core/Direction;FZ[Lnet/minecraft/client/renderer/block/ModelBlockRenderer$SizeInfo;[Lnet/minecraft/client/renderer/block/ModelBlockRenderer$SizeInfo;[Lnet/minecraft/client/renderer/block/ModelBlockRenderer$SizeInfo;[Lnet/minecraft/client/renderer/block/ModelBlockRenderer$SizeInfo;)V
			ARG 3 corners
			ARG 4 shadeBrightness
				COMMENT the shade brightness for this direction
			ARG 5 doNonCubicWeight
			ARG 6 vert0Weights
			ARG 7 vert1Weights
			ARG 8 vert2Weights
			ARG 9 vert3Weights
		METHOD fromFacing (Lnet/minecraft/core/Direction;)Lnet/minecraft/client/renderer/block/ModelBlockRenderer$AdjacencyInfo;
			ARG 0 facing
		METHOD lambda$static$0 ([Lnet/minecraft/client/renderer/block/ModelBlockRenderer$AdjacencyInfo;)V
			ARG 0 byFacing
	CLASS AmbientVertexRemap
		METHOD <init> (Ljava/lang/String;IIIII)V
			ARG 3 vert0
			ARG 4 vert1
			ARG 5 vert2
			ARG 6 vert3
		METHOD fromFacing (Lnet/minecraft/core/Direction;)Lnet/minecraft/client/renderer/block/ModelBlockRenderer$AmbientVertexRemap;
			ARG 0 facing
		METHOD lambda$static$0 ([Lnet/minecraft/client/renderer/block/ModelBlockRenderer$AmbientVertexRemap;)V
			ARG 0 byFacing
	CLASS AmbientOcclusionFace
		METHOD blend (IIII)I
			COMMENT @return the ambient occlusion light color
			ARG 1 lightColor0
			ARG 2 lightColor1
			ARG 3 lightColor2
			ARG 4 lightColor3
		METHOD blend (IIIIFFFF)I
			ARG 1 brightness0
			ARG 2 brightness1
			ARG 3 brightness2
			ARG 4 brightness3
			ARG 5 weight0
			ARG 6 weight1
			ARG 7 weight2
			ARG 8 weight3
		METHOD calculate (Lnet/minecraft/world/level/BlockAndTintGetter;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;[FLjava/util/BitSet;Z)V
			ARG 1 level
			ARG 2 state
			ARG 3 pos
			ARG 4 direction
			ARG 5 shape
				COMMENT the array, of length 12, containing the shape bounds
			ARG 6 shapeFlags
				COMMENT the bit set to store the shape flags in. The first bit will be {@code true} if the face should be offset, and the second if the face is less than a block in width and height.
			ARG 7 shade
