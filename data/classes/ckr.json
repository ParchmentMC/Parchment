{
  "name": "ckr",
  "fields": [
    {
      "name": "aF",
      "descriptor": "[Lgl;"
    },
    {
      "name": "aG",
      "descriptor": "Ldew;"
    },
    {
      "name": "aH",
      "descriptor": "Z"
    },
    {
      "name": "aI",
      "descriptor": "F"
    },
    {
      "name": "aJ",
      "descriptor": "Z",
      "javadoc": [
        "Flags whether or not this block is of a type that needs random ticking. Ref-counted by ExtendedBlockStorage in order to broadly cull a chunk from the random chunk update list for efficiency's sake."
      ]
    },
    {
      "name": "aK",
      "descriptor": "Lcge;"
    },
    {
      "name": "aL",
      "descriptor": "F",
      "javadoc": [
        "Determines how much velocity is maintained while moving on top of this block"
      ]
    },
    {
      "name": "aM",
      "descriptor": "F"
    },
    {
      "name": "aN",
      "descriptor": "F"
    },
    {
      "name": "aO",
      "descriptor": "Z"
    },
    {
      "name": "aP",
      "descriptor": "Lckr$c;"
    },
    {
      "name": "aQ",
      "descriptor": "Lww;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "S_",
      "descriptor": "()Lckr$b;",
      "javadoc": [
        "Get the OffsetType for this Block. Determines if the model is rendered slightly offset."
      ]
    },
    {
      "name": "U_",
      "descriptor": "()F"
    },
    {
      "name": "X_",
      "descriptor": "()F"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lcks;Ldmw;Lbkt;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Labr;Lgg;Lbqp;)V",
      "javadoc": [
        "Perform side-effects from block dropping, such as creating silverfish"
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbkd;Lbvt;Lgg;)F",
      "javadoc": [
        "Get the hardness of this Block relative to the ability of the given player",
        "@deprecated call via {@link IBlockState#getPlayerRelativeBlockHardness(EntityPlayer,World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbsp;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;)Ldnt;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldhb;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getWeakPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getComparatorInputOverride(World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;II)Z",
      "javadoc": [
        "Called on server when World#addBlockEvent is called. If server returns true, then also called on the client. On the Server, this may perform additional changes to the world, like pistons replacing the block with an extended base. On the client, the update may involve replacing tile entities or effects such as sounds or particles",
        "@deprecated call via {@link IBlockState#onBlockEventReceived(World,BlockPos,int,int)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Latf;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;Larz;Ldmw;)Lasa;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbzo;Lgg;Z)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwq;Lgg;II)V",
      "javadoc": [
        "performs updates on diagonal neighbors of the target position and passes in the flags. The flags can be referenced from the docs for {@link IWorldWriter#setBlockState(IBlockState, BlockPos, int)}."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbws;Lgg;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcks;Lgl;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lder;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Ldip$a;)Ljava/util/List;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgg;)J",
      "javadoc": [
        "Return a random long to be passed to {@link IBakedModel#getQuads}, used for random model rotations"
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgl;Lcks;Lbwq;Lgg;Lgg;)Lcks;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Lcks;Lbvt;Lgg;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V",
      "javadoc": [
        "Performs a random tick on a block."
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;)F"
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;"
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getStrongPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;)Lasd;"
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V"
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;)Lcfd;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;Lbvt;Lgg;)Ldnt;"
    },
    {
      "name": "c",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;"
    },
    {
      "name": "c_",
      "descriptor": "(Lcks;)Ldes;"
    },
    {
      "name": "d",
      "descriptor": "(Lcks;)Ldey;",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getMobilityFlag()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "d_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "@deprecated call via {@link IBlockState#hasComparatorInputOverride()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "f",
      "descriptor": "(Lcks;Lbvt;Lgg;)Ldnt;"
    },
    {
      "name": "f_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "Can this block provide power. Only wire currently seems to have this change based on its state.",
        "@deprecated call via {@link IBlockState#canProvidePower()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "g",
      "descriptor": "(Lcks;Lbvt;Lgg;)I"
    },
    {
      "name": "g_",
      "descriptor": "(Lcks;)Z"
    },
    {
      "name": "k",
      "descriptor": "()Lbql;"
    },
    {
      "name": "p",
      "descriptor": "()Lbzo;"
    },
    {
      "name": "r",
      "descriptor": "()Lww;"
    },
    {
      "name": "s",
      "descriptor": "()Ldex;"
    },
    {
      "name": "t",
      "descriptor": "()F"
    }
  ]
}