{
  "name": "bve",
  "fields": [
    {
      "name": "b",
      "descriptor": "Lcfb;"
    },
    {
      "name": "c",
      "descriptor": "Lcfe;"
    },
    {
      "name": "d",
      "descriptor": "Lcey;"
    },
    {
      "name": "e",
      "descriptor": "Lddh;"
    },
    {
      "name": "f",
      "descriptor": "Lddh;"
    },
    {
      "name": "g",
      "descriptor": "Lddh;"
    },
    {
      "name": "h",
      "descriptor": "Lddh;"
    },
    {
      "name": "i",
      "descriptor": "Lddh;"
    },
    {
      "name": "j",
      "descriptor": "Lbwc$b;"
    },
    {
      "name": "k",
      "descriptor": "Lbwc$b;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lceg$c;Ljava/util/function/Supplier;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbny;)Lceh;",
      "parameters": [
        {
          "index": 1,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbny;Lgc;)Lgc;",
      "javadoc": [
        "Returns facing pointing to a chest to form a double chest with, null otherwise"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pContext"
        },
        {
          "index": 2,
          "name": "pDirection"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrc;)Lccj;",
      "parameters": [
        {
          "index": 1,
          "name": "pWorldIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrc;Lfx;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pReader"
        },
        {
          "index": 1,
          "name": "pWorldIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrx;Lfx;Lceh;Laqm;Lbmb;)V",
      "javadoc": [
        "Called by ItemBlocks after a block is set in the world, to allow post-place logic"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pWorldIn"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pState"
        },
        {
          "index": 4,
          "name": "pPlacer"
        },
        {
          "index": 5,
          "name": "pStack"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbry;Lfx;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pWorld"
        },
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbve;Lceh;Lbrx;Lfx;Z)Laon;",
      "parameters": [
        {
          "index": 0,
          "name": "pChest"
        },
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorld"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pOverride"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcdc;)Lbwc$b;",
      "parameters": [
        {
          "index": 0,
          "name": "pLid"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;)Z",
      "javadoc": [
        "@deprecated call via {@link IBlockState#hasComparatorInputOverride()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrc;Lfx;Lcxe;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pType"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrx;Lfx;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getComparatorInputOverride(World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pBlockState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrx;Lfx;Lbfw;Laot;Ldcj;)Laou;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pPlayer"
        },
        {
          "index": 5,
          "name": "pHandIn"
        },
        {
          "index": 6,
          "name": "pHit"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrx;Lfx;Lceh;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pNewState"
        },
        {
          "index": 5,
          "name": "pIsMoving"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrx;Lfx;Z)Lbwc$c;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorld"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pOverride"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbyg;)Lceh;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pMirrorIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbzm;)Lceh;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pRot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lgc;Lceh;Lbry;Lfx;Lfx;)Lceh;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pStateIn"
        },
        {
          "index": 2,
          "name": "pFacing"
        },
        {
          "index": 3,
          "name": "pFacingState"
        },
        {
          "index": 4,
          "name": "pWorldIn"
        },
        {
          "index": 5,
          "name": "pCurrentPos"
        },
        {
          "index": 6,
          "name": "pFacingPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcei$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBuilder"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbry;Lfx;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pWorld"
        },
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;)Lbzh;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;Lbrc;Lfx;Ldcs;)Lddh;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;Lbrx;Lfx;)Laox;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pWorldIn"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "()Ladx;"
    },
    {
      "name": "c",
      "descriptor": "(Lbry;Lfx;)Z"
    },
    {
      "name": "d",
      "descriptor": "()Lcck;"
    },
    {
      "name": "d",
      "descriptor": "(Lceh;)Lcux;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(Lceh;)Lbwc$a;",
      "parameters": [
        {
          "index": 0,
          "name": "pState"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(Lceh;)Lgc;",
      "javadoc": [
        "Returns a facing pointing from the given state to its attached double chest"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pState"
        }
      ]
    }
  ]
}