{
  "name": "cfr",
  "fields": [
    {
      "name": "a",
      "descriptor": "Lclq;"
    },
    {
      "name": "b",
      "descriptor": "Lww;"
    },
    {
      "name": "c",
      "descriptor": "Lbpl;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lbpl;Lckr$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbpl;)Lbzo;"
    },
    {
      "name": "a",
      "descriptor": "(Lbqp;Lbvt;Ljava/util/List;Lbsc;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbsp;)Lcks;"
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lcks;)Lbqp;"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lcks;Lcir;)Lciq;"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;Latt;Lbqp;)V",
      "javadoc": [
        "Called by ItemBlocks after a block is set in the world, to allow post-place logic"
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;Lbkd;)V",
      "javadoc": [
        "Called before the Block is set to air in the world. Called regardless of if the player's tool can actually collect this block"
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbzo;)Lbpl;"
    },
    {
      "name": "a",
      "descriptor": "(Lcjo;Ldip;Ljava/util/function/Consumer;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getComparatorInputOverride(World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;Larz;Ldmw;)Lasa;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcjo;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Ldip$a;)Ljava/util/List;"
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;)Lcip;"
    },
    {
      "name": "b",
      "descriptor": "(Lbpl;)Lbqp;"
    },
    {
      "name": "b",
      "descriptor": "(Lbql;)Lbpl;"
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;)Lcfd;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "c",
      "descriptor": "()Lbpl;"
    },
    {
      "name": "d",
      "descriptor": "(Lcks;)Ldey;",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getMobilityFlag()} whenever possible. Implementing/overriding is fine."
      ]
    },
    {
      "name": "d_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "@deprecated call via {@link IBlockState#hasComparatorInputOverride()} whenever possible. Implementing/overriding is fine."
      ]
    }
  ]
}