{
  "name": "bfj",
  "fields": [
    {
      "name": "bA",
      "descriptor": "J"
    },
    {
      "name": "bB",
      "descriptor": "I"
    },
    {
      "name": "bC",
      "descriptor": "J"
    },
    {
      "name": "bD",
      "descriptor": "I"
    },
    {
      "name": "bE",
      "descriptor": "J"
    },
    {
      "name": "bF",
      "descriptor": "Z"
    },
    {
      "name": "bG",
      "descriptor": "Lcom/google/common/collect/ImmutableList;"
    },
    {
      "name": "bH",
      "descriptor": "Lcom/google/common/collect/ImmutableList;"
    },
    {
      "name": "bp",
      "descriptor": "Ljava/util/Map;",
      "javadoc": [
        "Mapping between valid food items and their respective efficiency values."
      ]
    },
    {
      "name": "bq",
      "descriptor": "Ljava/util/Map;"
    },
    {
      "name": "br",
      "descriptor": "Lus;"
    },
    {
      "name": "bs",
      "descriptor": "Ljava/util/Set;",
      "javadoc": [
        "Defaults items a villager regardless of its profession can pick up."
      ]
    },
    {
      "name": "bt",
      "descriptor": "I"
    },
    {
      "name": "bu",
      "descriptor": "Z"
    },
    {
      "name": "bv",
      "descriptor": "Lbfw;"
    },
    {
      "name": "bw",
      "descriptor": "Z"
    },
    {
      "name": "bx",
      "descriptor": "B"
    },
    {
      "name": "by",
      "descriptor": "Laxz;"
    },
    {
      "name": "bz",
      "descriptor": "J"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Laqe;Lbrx;)V"
    },
    {
      "name": "<init>",
      "descriptor": "(Laqe;Lbrx;Lbfo;)V"
    },
    {
      "name": "I",
      "descriptor": "()Ladp;"
    },
    {
      "name": "M",
      "descriptor": "()V"
    },
    {
      "name": "N",
      "descriptor": "()V"
    },
    {
      "name": "a",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pId"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(J)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pGameTime"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(JLbfj;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Laag;JI)V"
    },
    {
      "name": "a",
      "descriptor": "(Laag;Lapy;)Lapy;",
      "parameters": [
        {
          "index": 1
        },
        {
          "index": 2
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;Laqa;Laqm;)V"
    },
    {
      "name": "a",
      "descriptor": "(Laag;Laql;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pLightning"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;Lbfj;J)V"
    },
    {
      "name": "a",
      "descriptor": "(Lapa;Ljava/util/Map$Entry;)I"
    },
    {
      "name": "a",
      "descriptor": "(Lapk;)V",
      "javadoc": [
        "Called when the mob's health reaches 0."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCause"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pMurderer"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqm;)V",
      "javadoc": [
        "Hint to AI tasks that we were attacked by the passed EntityLivingBase and should retaliate. Is not guaranteed to change our actual active target (for example if we are currently busy attacking someone else)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pLivingBase"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Larf;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pVillagerBrain"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laya;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Layd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pModuleType"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lazl;Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pType"
        },
        {
          "index": 2,
          "name": "pTarget"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbfj;Lazr;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lbfk;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pData"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbsk;Laos;Laqp;Larc;Lmd;)Larc;",
      "parameters": [
        {
          "index": 1,
          "name": "pLevelIn"
        },
        {
          "index": 2,
          "name": "pDifficultyIn"
        },
        {
          "index": 3,
          "name": "pReason"
        },
        {
          "index": 4,
          "name": "pSpawnDataIn"
        },
        {
          "index": 5,
          "name": "pDataTag"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcom/mojang/serialization/Dynamic;)Larf;",
      "parameters": [
        {
          "index": 1,
          "name": "pDynamicIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lfx;DD)Lfx;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;Lmt;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lmt;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pGossip"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lnet/minecraft/server/MinecraftServer;Layd;Lgf;)V"
    },
    {
      "name": "b",
      "descriptor": "(J)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pGameTime"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laag;Lapy;)Lbfj;",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pMate"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbcv;)V",
      "javadoc": [
        "Tests if this entity should pickup a weapon or an armor. Entity drops current weapon or armor if the new one is better."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pItemEntity"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbfj;Lazr;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lbfw;Laot;)Laou;",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayerIn"
        },
        {
          "index": 2,
          "name": "pHand"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbqv;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pOffer"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbqw;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pOffersIn"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lfx;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lmd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "bJ",
      "descriptor": "()Lnr;"
    },
    {
      "name": "c",
      "descriptor": "(Laag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pServerLevelIn"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lbfj;Lazr;)Z"
    },
    {
      "name": "cJ",
      "descriptor": "()Larf;"
    },
    {
      "name": "cK",
      "descriptor": "()Larf$b;"
    },
    {
      "name": "d",
      "descriptor": "(Laag;)Lbai;"
    },
    {
      "name": "d",
      "descriptor": "(Lbfj;Lazr;)Z"
    },
    {
      "name": "dq",
      "descriptor": "()Ladp;"
    },
    {
      "name": "e",
      "descriptor": "()V"
    },
    {
      "name": "e",
      "descriptor": "(Lapk;)Ladp;",
      "parameters": [
        {
          "index": 1,
          "name": "pDamageSourceIn"
        }
      ]
    },
    {
      "name": "eL",
      "descriptor": "()I"
    },
    {
      "name": "eT",
      "descriptor": "()V"
    },
    {
      "name": "eW",
      "descriptor": "()V"
    },
    {
      "name": "eX",
      "descriptor": "()Lbfk;"
    },
    {
      "name": "eY",
      "descriptor": "()Lark$a;"
    },
    {
      "name": "eZ",
      "descriptor": "()Z"
    },
    {
      "name": "en",
      "descriptor": "()V"
    },
    {
      "name": "f",
      "descriptor": "()Z"
    },
    {
      "name": "f",
      "descriptor": "(Lbfw;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "fa",
      "descriptor": "()Z"
    },
    {
      "name": "fb",
      "descriptor": "()V"
    },
    {
      "name": "fc",
      "descriptor": "()Z"
    },
    {
      "name": "fd",
      "descriptor": "()V"
    },
    {
      "name": "fe",
      "descriptor": "()Z"
    },
    {
      "name": "ff",
      "descriptor": "()V"
    },
    {
      "name": "fg",
      "descriptor": "()Z",
      "javadoc": [
        "Used by {@link net.minecraft.entity.ai.EntityAIVillagerInteract EntityAIVillagerInteract} to check if the villager can give some items from an inventory to another villager."
      ]
    },
    {
      "name": "fh",
      "descriptor": "()Z"
    },
    {
      "name": "fi",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if villager has seeds, potatoes or carrots in inventory"
      ]
    },
    {
      "name": "fj",
      "descriptor": "()Laxz;"
    },
    {
      "name": "fk",
      "descriptor": "()V"
    },
    {
      "name": "fl",
      "descriptor": "()V"
    },
    {
      "name": "fm",
      "descriptor": "()Z"
    },
    {
      "name": "fn",
      "descriptor": "()Z"
    },
    {
      "name": "fo",
      "descriptor": "()V"
    },
    {
      "name": "fp",
      "descriptor": "()V"
    },
    {
      "name": "fq",
      "descriptor": "()V"
    },
    {
      "name": "fr",
      "descriptor": "()Z"
    },
    {
      "name": "fs",
      "descriptor": "()V"
    },
    {
      "name": "ft",
      "descriptor": "()Z"
    },
    {
      "name": "fu",
      "descriptor": "()V"
    },
    {
      "name": "fv",
      "descriptor": "()I",
      "javadoc": [
        "@return calculated food value from item stacks in this villager's inventory"
      ]
    },
    {
      "name": "fw",
      "descriptor": "()V"
    },
    {
      "name": "fx",
      "descriptor": "()V"
    },
    {
      "name": "g",
      "descriptor": "(Lbfw;)I",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pDistanceToClosestPlayer"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(Lbfw;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(Laqm;)Z"
    },
    {
      "name": "i",
      "descriptor": "(Lbfw;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayerIn"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(Lbmb;)Z"
    },
    {
      "name": "j",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "m",
      "descriptor": "()V",
      "javadoc": [
        "This is called when Entity's growing age timer reaches 0 (negative values are considered as a child, positive as an adult)"
      ]
    },
    {
      "name": "u",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pXpIn"
        }
      ]
    },
    {
      "name": "u",
      "descriptor": "(Z)V"
    },
    {
      "name": "v",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pQty"
        }
      ]
    }
  ]
}