{
  "name": "ayj",
  "fields": [
    {
      "name": "a",
      "descriptor": "Laqn;"
    },
    {
      "name": "b",
      "descriptor": "Lbrx;"
    },
    {
      "name": "c",
      "descriptor": "Lcxd;"
    },
    {
      "name": "d",
      "descriptor": "D"
    },
    {
      "name": "e",
      "descriptor": "I"
    },
    {
      "name": "f",
      "descriptor": "I"
    },
    {
      "name": "g",
      "descriptor": "Ldcn;"
    },
    {
      "name": "h",
      "descriptor": "Lgr;"
    },
    {
      "name": "i",
      "descriptor": "J"
    },
    {
      "name": "j",
      "descriptor": "J"
    },
    {
      "name": "k",
      "descriptor": "D"
    },
    {
      "name": "l",
      "descriptor": "F"
    },
    {
      "name": "m",
      "descriptor": "Z"
    },
    {
      "name": "n",
      "descriptor": "J"
    },
    {
      "name": "o",
      "descriptor": "Lcxc;"
    },
    {
      "name": "p",
      "descriptor": "Lfx;"
    },
    {
      "name": "q",
      "descriptor": "I",
      "javadoc": [
        "Distance in which a path point counts as target-reaching"
      ]
    },
    {
      "name": "r",
      "descriptor": "F"
    },
    {
      "name": "s",
      "descriptor": "Lcxf;"
    },
    {
      "name": "t",
      "descriptor": "Z"
    }
  ],
  "methods": [
    {
      "name": "<init>",
      "descriptor": "(Laqn;Lbrx;)V"
    },
    {
      "name": "D_",
      "descriptor": "()V",
      "javadoc": [
        "Trims path data from the end to the first sun covered block"
      ]
    },
    {
      "name": "a",
      "descriptor": "()Z",
      "javadoc": [
        "If on ground or swimming and can swim"
      ]
    },
    {
      "name": "a",
      "descriptor": "(D)V",
      "javadoc": [
        "Sets the speed"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSpeedIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDD)Z",
      "javadoc": [
        "Try to find and set a path to XYZ. Returns true if successful. Args : x, y, z, speed"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pSpeedIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDI)Lcxd;",
      "javadoc": [
        "Returns path to given BlockPos"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pAccuracy"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "pMultiplier"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(I)Lcxf;"
    },
    {
      "name": "a",
      "descriptor": "(Laqa;D)Z",
      "javadoc": [
        "Try to find and set a path to EntityLiving. Returns true if successful. Args : entity, speed"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        },
        {
          "index": 2,
          "name": "pSpeedIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;I)Lcxd;",
      "javadoc": [
        "Returns a path to the given entity or null"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcxd;D)Z",
      "javadoc": [
        "Sets a new path. If it's diferent from the old path. Checks to adjust path for sun avoiding, and stores start coords. Args : path, speed"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPathentityIn"
        },
        {
          "index": 2,
          "name": "pSpeedIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;)V",
      "javadoc": [
        "Checks if entity haven't been moved when last checked and if so, clears current {@link net.minecraft.pathfinding.PathEntity}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPositionVec3"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;Ldcn;III)Z",
      "javadoc": [
        "Checks if the specified entity can safely walk to the specified location."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPosVec31"
        },
        {
          "index": 2,
          "name": "pPosVec32"
        },
        {
          "index": 3,
          "name": "pSizeX"
        },
        {
          "index": 4,
          "name": "pSizeY"
        },
        {
          "index": 5,
          "name": "pSizeZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lfx;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lfx;I)Lcxd;",
      "javadoc": [
        "Returns path to given BlockPos"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pAccuracy"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Set;I)Lcxd;",
      "parameters": [
        {
          "index": 1,
          "name": "pPositions"
        },
        {
          "index": 2,
          "name": "pDistance"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Set;IZI)Lcxd;",
      "javadoc": [
        "Returns a path to one of the given targets or null"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTargets"
        },
        {
          "index": 2,
          "name": "pRegionOffset"
        },
        {
          "index": 3,
          "name": "pOffsetUpward"
        },
        {
          "index": 4,
          "name": "pAccuracy"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/stream/Stream;I)Lcxd;",
      "javadoc": [
        "Returns a path to one of the elements of the stream or null"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTargets"
        },
        {
          "index": 2,
          "name": "pAccuracy"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "b",
      "descriptor": "(Ldcn;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lfx;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "()V"
    },
    {
      "name": "d",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCanSwim"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "()V"
    },
    {
      "name": "f",
      "descriptor": "()V"
    },
    {
      "name": "g",
      "descriptor": "()V"
    },
    {
      "name": "h",
      "descriptor": "()Lfx;"
    },
    {
      "name": "i",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if path can be changed by {@link net.minecraft.pathfinding.PathNavigate#onUpdateNavigation() onUpdateNavigation()}"
      ]
    },
    {
      "name": "j",
      "descriptor": "()V"
    },
    {
      "name": "k",
      "descriptor": "()Lcxd;",
      "javadoc": [
        "gets the actively used PathEntity"
      ]
    },
    {
      "name": "l",
      "descriptor": "()V"
    },
    {
      "name": "m",
      "descriptor": "()Z",
      "javadoc": [
        "If null path or reached the end"
      ]
    },
    {
      "name": "n",
      "descriptor": "()Z"
    },
    {
      "name": "o",
      "descriptor": "()V",
      "javadoc": [
        "sets active PathEntity to null"
      ]
    },
    {
      "name": "p",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the entity is in water or lava, false otherwise"
      ]
    },
    {
      "name": "q",
      "descriptor": "()Lcxc;"
    },
    {
      "name": "r",
      "descriptor": "()Z"
    },
    {
      "name": "s",
      "descriptor": "()F"
    },
    {
      "name": "t",
      "descriptor": "()Z"
    }
  ]
}