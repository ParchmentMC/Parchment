{
  "name": "bch",
  "fields": [
    {
      "name": "a",
      "descriptor": "Lbch;"
    },
    {
      "name": "b",
      "descriptor": "Lbch;"
    },
    {
      "name": "c",
      "descriptor": "Lbch;"
    },
    {
      "name": "d",
      "descriptor": "Lbch;"
    },
    {
      "name": "e",
      "descriptor": "Lbch;"
    },
    {
      "name": "f",
      "descriptor": "Lbch;"
    },
    {
      "name": "g",
      "descriptor": "Lbch;"
    },
    {
      "name": "h",
      "descriptor": "Lbch;"
    },
    {
      "name": "i",
      "descriptor": "Lbch;"
    },
    {
      "name": "j",
      "descriptor": "Lbch;"
    },
    {
      "name": "k",
      "descriptor": "Lbch;"
    },
    {
      "name": "l",
      "descriptor": "[Lbch;"
    },
    {
      "name": "m",
      "descriptor": "Ljava/lang/Class;"
    },
    {
      "name": "n",
      "descriptor": "I"
    },
    {
      "name": "o",
      "descriptor": "Ljava/lang/String;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(ILjava/lang/Class;Ljava/lang/String;)V"
    },
    {
      "name": "a",
      "descriptor": "()Ljava/lang/reflect/Constructor;"
    },
    {
      "name": "a",
      "descriptor": "(I)Lbch;",
      "javadoc": [
        "Gets a phase by its ID. If the phase is out of bounds (negative or beyond the end of the phase array), returns {@link #HOLDING_PATTERN}."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pId"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbbr;)Lbcb;",
      "parameters": [
        {
          "index": 1,
          "name": "pDragon"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/Class;Ljava/lang/String;)Lbch;",
      "parameters": [
        {
          "index": 0,
          "name": "pPhase"
        },
        {
          "index": 1,
          "name": "pName"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "()I"
    },
    {
      "name": "c",
      "descriptor": "()I"
    },
    {
      "name": "toString",
      "descriptor": "()Ljava/lang/String;"
    }
  ]
}