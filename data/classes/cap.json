{
  "name": "cap",
  "fields": [
    {
      "name": "a",
      "descriptor": "Lcfb;"
    },
    {
      "name": "b",
      "descriptor": "Lddh;"
    },
    {
      "name": "c",
      "descriptor": "Lnr;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lceg$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbny;)Lceh;",
      "parameters": [
        {
          "index": 1,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrx;Lfx;ILbfv;Lbfw;)Lbic;"
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrc;Lfx;Lcxe;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pType"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbrx;Lfx;Lbfw;Laot;Ldcj;)Laou;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pPlayer"
        },
        {
          "index": 5,
          "name": "pHand"
        },
        {
          "index": 6,
          "name": "pHit"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbyg;)Lceh;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pMirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lbzm;)Lceh;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pRot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcei$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBuilder"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;)Lbzh;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;Lbrc;Lfx;Ldcs;)Lddh;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;Lbrx;Lfx;)Laox;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "c_",
      "descriptor": "(Lceh;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    }
  ]
}