{
  "name": "cjk",
  "fields": [
    {
      "name": "a",
      "descriptor": "I"
    },
    {
      "name": "b",
      "descriptor": "I"
    },
    {
      "name": "c",
      "descriptor": "I"
    },
    {
      "name": "d",
      "descriptor": "I"
    },
    {
      "name": "e",
      "descriptor": "Lart;"
    },
    {
      "name": "f",
      "descriptor": "Lbmt;"
    },
    {
      "name": "g",
      "descriptor": "Lbqp;"
    },
    {
      "name": "h",
      "descriptor": "I"
    },
    {
      "name": "i",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<init>",
      "descriptor": "(Lgg;Lcks;)V"
    },
    {
      "name": "B_",
      "descriptor": "()Los;"
    },
    {
      "name": "a",
      "descriptor": "()V"
    },
    {
      "name": "a",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "page"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;)Ldl;",
      "javadoc": [
        "Creates a CommandSource for resolving the contents of a book. If the player is null, a fake commandsource for this lectern is used."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbqp;)V",
      "javadoc": [
        "Sets the item stack in this lectern. Note that this does not update the block state use {@link LecternBlock#tryPlaceBook} for that."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbqp;Lbkd;)V",
      "javadoc": [
        "Sets the item stack in this lectern. Note that this does not update the block state use {@link LecternBlock#tryPlaceBook} for that."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        },
        {
          "index": 2,
          "name": "player"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lna;)V"
    },
    {
      "name": "b",
      "descriptor": "(Lbqp;Lbkd;)Lbqp;",
      "javadoc": [
        "Resolves the passed book, if it is a book and has not yet been resolved."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        },
        {
          "index": 2,
          "name": "player"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lna;)Lna;",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "createMenu",
      "descriptor": "(ILbkc;Lbkd;)Lbmj;"
    },
    {
      "name": "f",
      "descriptor": "()Lbqp;"
    },
    {
      "name": "g",
      "descriptor": "()Z",
      "javadoc": [
        "True if the item in this lectern is a book or written book. False if it is another item (i.e. an empty stack)"
      ]
    },
    {
      "name": "h",
      "descriptor": "()I"
    },
    {
      "name": "i",
      "descriptor": "()I"
    },
    {
      "name": "j",
      "descriptor": "()V"
    },
    {
      "name": "q",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if players can use this tile entity to access operator (permission level 2) commands either directly or indirectly, such as give or setblock. A similar method exists for entities at {@link net.minecraft.entity.Entity#ignoreItemEntityData()}.<p>For example, {@link net.minecraft.tileentity.TileEntitySign#onlyOpsCanSetNbt() signs} (player right-clicking) and {@link net.minecraft.tileentity.TileEntityCommandBlock#onlyOpsCanSetNbt() command blocks} are considered accessible.</p>@return true if this block entity offers ways for unauthorized players to use restricted commands"
      ]
    }
  ]
}