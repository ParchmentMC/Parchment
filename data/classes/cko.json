{
  "name": "cko",
  "fields": [
    {
      "name": "a",
      "descriptor": "D"
    },
    {
      "name": "b",
      "descriptor": "I"
    },
    {
      "name": "c",
      "descriptor": "D"
    },
    {
      "name": "d",
      "descriptor": "Lcks;"
    },
    {
      "name": "e",
      "descriptor": "Lgl;"
    },
    {
      "name": "f",
      "descriptor": "Z",
      "javadoc": [
        "if this piston is extending or not"
      ]
    },
    {
      "name": "g",
      "descriptor": "Z"
    },
    {
      "name": "h",
      "descriptor": "Ljava/lang/ThreadLocal;"
    },
    {
      "name": "i",
      "descriptor": "F"
    },
    {
      "name": "j",
      "descriptor": "F",
      "javadoc": [
        "the progress in (de)extending"
      ]
    },
    {
      "name": "k",
      "descriptor": "J"
    },
    {
      "name": "l",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lgg;Lcks;)V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lgg;Lcks;Lcks;Lgl;ZZ)V"
    },
    {
      "name": "Z_",
      "descriptor": "()Lna;",
      "javadoc": [
        "Get an NBT compound to sync to the client with SPacketChunkData, used for initial loading of the chunk or when many blocks change at once. This compound comes back to you clientside in {@link handleUpdateTag}"
      ]
    },
    {
      "name": "a",
      "descriptor": "(F)F",
      "javadoc": [
        "Get interpolated progress value (between lastProgress and progress) given the fractional time between ticks as an argument"
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;)Ldnt;"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;FLcko;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;Lcko;)V"
    },
    {
      "name": "a",
      "descriptor": "(Ldmv;Latf;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Ldmv;Lgl;Ldmv;)D"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Latf;Lgl;D)V"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Ldmv;Lcko;)Ldmv;"
    },
    {
      "name": "a",
      "descriptor": "(Lgl;Latf;DLgl;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lna;)V"
    },
    {
      "name": "b",
      "descriptor": "(F)F"
    },
    {
      "name": "b",
      "descriptor": "(Lbwp;Lgg;FLcko;)V"
    },
    {
      "name": "b",
      "descriptor": "(Ldmv;Latf;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lna;)Lna;"
    },
    {
      "name": "c",
      "descriptor": "(F)F"
    },
    {
      "name": "d",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if a piston is extending"
      ]
    },
    {
      "name": "d",
      "descriptor": "(F)F"
    },
    {
      "name": "e",
      "descriptor": "(F)F"
    },
    {
      "name": "f",
      "descriptor": "()Lgl;"
    },
    {
      "name": "g",
      "descriptor": "()Z"
    },
    {
      "name": "h",
      "descriptor": "()Lgl;"
    },
    {
      "name": "i",
      "descriptor": "()Lcks;"
    },
    {
      "name": "j",
      "descriptor": "()V",
      "javadoc": [
        "removes a piston's tile entity (and if the piston is moving, stops it)"
      ]
    },
    {
      "name": "s",
      "descriptor": "()J"
    },
    {
      "name": "t",
      "descriptor": "()Lcks;"
    },
    {
      "name": "u",
      "descriptor": "()Z"
    },
    {
      "name": "v",
      "descriptor": "()Lgl;"
    }
  ]
}