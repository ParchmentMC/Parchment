{
  "name": "cdf",
  "fields": [
    {
      "name": "a",
      "descriptor": "[Lnr;"
    },
    {
      "name": "b",
      "descriptor": "Z"
    },
    {
      "name": "c",
      "descriptor": "Lbfw;"
    },
    {
      "name": "g",
      "descriptor": "[Lafa;"
    },
    {
      "name": "h",
      "descriptor": "Lbkx;"
    }
  ],
  "methods": [
    {
      "name": "<init>",
      "descriptor": "()V"
    },
    {
      "name": "a",
      "descriptor": "()Low;",
      "javadoc": [
        "Retrieves packet to send to the client whenever this Tile Entity is resynced via World.notifyBlockUpdate. For modded TE's, this packet comes back to you clientside in {@link #onDataPacket}"
      ]
    },
    {
      "name": "a",
      "descriptor": "(I)Lnr;",
      "parameters": [
        {
          "index": 1,
          "name": "pLine"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ILjava/util/function/Function;)Lafa;",
      "parameters": [
        {
          "index": 1,
          "name": "pRow"
        },
        {
          "index": 2,
          "name": "pTextProcessorFunction"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ILnr;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLine"
        },
        {
          "index": 2,
          "name": "pSignText"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laah;)Ldb;",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayerIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbfw;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayerIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkx;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pNewColor"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lmd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pNbt"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;)Lmd;",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets the sign's isEditable flag to the specified parameter."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pIsEditableIn"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "()Lmd;",
      "javadoc": [
        "Get an NBT compound to sync to the client with SPacketChunkData, used for initial loading of the chunk or when many blocks change at once. This compound comes back to you clientside in {@link handleUpdateTag}"
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbfw;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayerIn"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "()Z"
    },
    {
      "name": "f",
      "descriptor": "()Lbfw;"
    },
    {
      "name": "g",
      "descriptor": "()Lbkx;"
    },
    {
      "name": "t",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if players can use this tile entity to access operator (permission level 2) commands either directly or indirectly, such as give or setblock. A similar method exists for entities at {@link net.minecraft.entity.Entity#ignoreItemEntityData()}.<p>For example, {@link net.minecraft.tileentity.TileEntitySign#onlyOpsCanSetNbt() signs} (player right-clicking) and {@link net.minecraft.tileentity.TileEntityCommandBlock#onlyOpsCanSetNbt() command blocks} are considered accessible.</p>@return true if this block entity offers ways for unauthorized players to use restricted commands"
      ]
    }
  ]
}