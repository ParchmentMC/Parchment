{
  "name": "cdn",
  "fields": [
    {
      "name": "a",
      "descriptor": "Lclm;"
    },
    {
      "name": "b",
      "descriptor": "Lclj;"
    },
    {
      "name": "c",
      "descriptor": "Lclj;"
    },
    {
      "name": "d",
      "descriptor": "Ldnt;"
    },
    {
      "name": "e",
      "descriptor": "Ldnt;"
    },
    {
      "name": "f",
      "descriptor": "Ldnt;"
    },
    {
      "name": "g",
      "descriptor": "Ldnt;"
    },
    {
      "name": "h",
      "descriptor": "Ldnt;"
    },
    {
      "name": "i",
      "descriptor": "Ldnt;"
    },
    {
      "name": "j",
      "descriptor": "Ldnt;"
    },
    {
      "name": "k",
      "descriptor": "Ldnt;"
    },
    {
      "name": "l",
      "descriptor": "Ldnt;"
    },
    {
      "name": "m",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;Lbwp;Lgg;Lcks;Lbqp;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lbsp;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "context"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lbkd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "player"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 0,
          "name": "level"
        },
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "state"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 0,
          "name": "level"
        },
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "state"
        },
        {
          "index": 3,
          "name": "hasBook"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "rand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldhb;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "type"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "context"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getWeakPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "blockState"
        },
        {
          "index": 2,
          "name": "blockAccess"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "side"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getComparatorInputOverride(World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "blockState"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;Larz;Ldmw;)Lasa;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "player"
        },
        {
          "index": 5,
          "name": "hand"
        },
        {
          "index": 6,
          "name": "hit"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "newState"
        },
        {
          "index": 5,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "mirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "rot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "builder"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;)Lcip;"
    },
    {
      "name": "b",
      "descriptor": "(Lbkd;Lbwp;Lgg;Lcks;Lbqp;)V"
    },
    {
      "name": "b",
      "descriptor": "(Lbwp;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 0,
          "name": "level"
        },
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "state"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 0,
          "name": "level"
        },
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "state"
        },
        {
          "index": 3,
          "name": "powered"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getStrongPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "blockState"
        },
        {
          "index": 2,
          "name": "blockAccess"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "side"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;)Lasd;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;)Lcfd;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;Lbvt;Lgg;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "context"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Lcks;Lbwp;Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "d_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "@deprecated call via {@link IBlockState#hasComparatorInputOverride()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "f_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "Can this block provide power. Only wire currently seems to have this change based on its state.",
        "@deprecated call via {@link IBlockState#canProvidePower()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "g_",
      "descriptor": "(Lcks;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    }
  ]
}