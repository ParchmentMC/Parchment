{
  "name": "ccs",
  "fields": [
    {
      "name": "d",
      "descriptor": "Lcls;"
    },
    {
      "name": "e",
      "descriptor": "I"
    },
    {
      "name": "f",
      "descriptor": "D"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;Lgl;Ldnt;ZD)V"
    },
    {
      "name": "a",
      "descriptor": "(Labr;Ljava/util/Random;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "rand"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "state"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lcks;Z)Z",
      "javadoc": [
        "Whether this IGrowable can grow"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "state"
        },
        {
          "index": 4,
          "name": "isClient"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Ljava/util/Random;Lgg;Lcks;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "rand"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "state"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwq;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcks;)Lcks;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgl;Lcks;Lbwq;Lgg;Lgg;)Lcks;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "facing"
        },
        {
          "index": 3,
          "name": "facingState"
        },
        {
          "index": 4,
          "name": "level"
        },
        {
          "index": 5,
          "name": "currentPos"
        },
        {
          "index": 6,
          "name": "facingPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Ljava/util/Random;)Lcks;"
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "builder"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;)I",
      "javadoc": [
        "Used to determine how much to grow the plant when using bonemeal. Kelp always returns 1, where as the nether vines return a random value at least 1."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "rand"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V",
      "javadoc": [
        "Performs a random tick on a block."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "random"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "()Lccs;"
    },
    {
      "name": "e_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "Returns whether or not this block is of a type that needs random ticking. Called for ref-counting purposes by ExtendedBlockStorage in order to broadly cull a chunk from the random chunk update list for efficiency's sake."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(Lcks;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    }
  ]
}