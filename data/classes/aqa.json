{
  "name": "aqa",
  "fields": [
    {
      "name": "A",
      "descriptor": "F"
    },
    {
      "name": "B",
      "descriptor": "F"
    },
    {
      "name": "C",
      "descriptor": "F"
    },
    {
      "name": "D",
      "descriptor": "D"
    },
    {
      "name": "E",
      "descriptor": "D"
    },
    {
      "name": "F",
      "descriptor": "D"
    },
    {
      "name": "G",
      "descriptor": "F"
    },
    {
      "name": "H",
      "descriptor": "Z"
    },
    {
      "name": "I",
      "descriptor": "F"
    },
    {
      "name": "J",
      "descriptor": "Ljava/util/Random;"
    },
    {
      "name": "K",
      "descriptor": "I"
    },
    {
      "name": "L",
      "descriptor": "Z"
    },
    {
      "name": "M",
      "descriptor": "Lit/unimi/dsi/fastutil/objects/Object2DoubleMap;"
    },
    {
      "name": "N",
      "descriptor": "Z"
    },
    {
      "name": "O",
      "descriptor": "Lael;"
    },
    {
      "name": "P",
      "descriptor": "I"
    },
    {
      "name": "Q",
      "descriptor": "Z"
    },
    {
      "name": "R",
      "descriptor": "Luv;"
    },
    {
      "name": "S",
      "descriptor": "Lus;"
    },
    {
      "name": "T",
      "descriptor": "Lus;"
    },
    {
      "name": "U",
      "descriptor": "Z"
    },
    {
      "name": "V",
      "descriptor": "I"
    },
    {
      "name": "W",
      "descriptor": "I"
    },
    {
      "name": "X",
      "descriptor": "I"
    },
    {
      "name": "Y",
      "descriptor": "Z"
    },
    {
      "name": "Z",
      "descriptor": "Z"
    },
    {
      "name": "aA",
      "descriptor": "[D"
    },
    {
      "name": "aB",
      "descriptor": "J"
    },
    {
      "name": "aC",
      "descriptor": "Laqb;"
    },
    {
      "name": "aD",
      "descriptor": "F"
    },
    {
      "name": "aa",
      "descriptor": "Z"
    },
    {
      "name": "ab",
      "descriptor": "I"
    },
    {
      "name": "ac",
      "descriptor": "Lfx;"
    },
    {
      "name": "ad",
      "descriptor": "Ljava/util/UUID;"
    },
    {
      "name": "ae",
      "descriptor": "Ljava/lang/String;"
    },
    {
      "name": "af",
      "descriptor": "Z"
    },
    {
      "name": "ag",
      "descriptor": "Ljava/util/List;"
    },
    {
      "name": "ah",
      "descriptor": "Laqa;"
    },
    {
      "name": "ai",
      "descriptor": "Ldcn;"
    },
    {
      "name": "aj",
      "descriptor": "Lfx;"
    },
    {
      "name": "ak",
      "descriptor": "Ldcn;"
    },
    {
      "name": "al",
      "descriptor": "Ldci;"
    },
    {
      "name": "am",
      "descriptor": "F"
    },
    {
      "name": "an",
      "descriptor": "F"
    },
    {
      "name": "ao",
      "descriptor": "I"
    },
    {
      "name": "ap",
      "descriptor": "Lus;"
    },
    {
      "name": "aq",
      "descriptor": "Lus;"
    },
    {
      "name": "ar",
      "descriptor": "Lus;"
    },
    {
      "name": "as",
      "descriptor": "Lus;"
    },
    {
      "name": "at",
      "descriptor": "Lus;"
    },
    {
      "name": "au",
      "descriptor": "Z"
    },
    {
      "name": "av",
      "descriptor": "Ldcn;"
    },
    {
      "name": "aw",
      "descriptor": "I"
    },
    {
      "name": "ax",
      "descriptor": "Z"
    },
    {
      "name": "ay",
      "descriptor": "Ljava/util/Set;"
    },
    {
      "name": "az",
      "descriptor": "Z"
    },
    {
      "name": "b",
      "descriptor": "Ljava/util/concurrent/atomic/AtomicInteger;"
    },
    {
      "name": "c",
      "descriptor": "Ljava/util/List;"
    },
    {
      "name": "d",
      "descriptor": "Ldci;"
    },
    {
      "name": "e",
      "descriptor": "D"
    },
    {
      "name": "f",
      "descriptor": "Laqe;"
    },
    {
      "name": "g",
      "descriptor": "I"
    },
    {
      "name": "h",
      "descriptor": "Lorg/apache/logging/log4j/Logger;"
    },
    {
      "name": "i",
      "descriptor": "Z"
    },
    {
      "name": "j",
      "descriptor": "I"
    },
    {
      "name": "k",
      "descriptor": "Z"
    },
    {
      "name": "l",
      "descriptor": "Lbrx;"
    },
    {
      "name": "m",
      "descriptor": "D"
    },
    {
      "name": "n",
      "descriptor": "D"
    },
    {
      "name": "o",
      "descriptor": "D"
    },
    {
      "name": "p",
      "descriptor": "F"
    },
    {
      "name": "q",
      "descriptor": "F"
    },
    {
      "name": "r",
      "descriptor": "F"
    },
    {
      "name": "s",
      "descriptor": "F"
    },
    {
      "name": "t",
      "descriptor": "Z"
    },
    {
      "name": "u",
      "descriptor": "Z"
    },
    {
      "name": "v",
      "descriptor": "Z"
    },
    {
      "name": "w",
      "descriptor": "Z"
    },
    {
      "name": "x",
      "descriptor": "Ldcn;"
    },
    {
      "name": "y",
      "descriptor": "Z"
    },
    {
      "name": "z",
      "descriptor": "F"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Laqe;Lbrx;)V"
    },
    {
      "name": "E",
      "descriptor": "()V",
      "javadoc": [
        "Decrements the counter for the remaining time until the entity may use a portal again."
      ]
    },
    {
      "name": "P",
      "descriptor": "()Loj;"
    },
    {
      "name": "R",
      "descriptor": "()Lnr;"
    },
    {
      "name": "R_",
      "descriptor": "()Z"
    },
    {
      "name": "S",
      "descriptor": "()Z"
    },
    {
      "name": "T",
      "descriptor": "()Lnr;"
    },
    {
      "name": "U",
      "descriptor": "()I"
    },
    {
      "name": "V",
      "descriptor": "()V"
    },
    {
      "name": "W",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "X",
      "descriptor": "()Laqe;"
    },
    {
      "name": "Y",
      "descriptor": "()I"
    },
    {
      "name": "Z",
      "descriptor": "()Ljava/util/Set;"
    },
    {
      "name": "a",
      "descriptor": "()Z"
    },
    {
      "name": "a",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pId"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(D)Z",
      "javadoc": [
        "Checks if the entity is in range to render."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pDistance"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pYaw"
        },
        {
          "index": 3,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Sets the position of the entity and updates the 'last' variables"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDFF)V",
      "javadoc": [
        "Sets position and rotation, clamping and wrapping params to valid values. Used by network code."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pYaw"
        },
        {
          "index": 8,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDFFIZ)V",
      "javadoc": [
        "Sets a target for the client to interpolate towards over the next few ticks"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pYaw"
        },
        {
          "index": 8,
          "name": "pPitch"
        },
        {
          "index": 9,
          "name": "pPosRotationIncrements"
        },
        {
          "index": 10,
          "name": "pTeleport"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDF)Ldcn;",
      "parameters": [
        {
          "index": 0,
          "name": "pMountWidth"
        },
        {
          "index": 2,
          "name": "pRiderWidth"
        },
        {
          "index": 4,
          "name": "pYaw"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DFZ)Ldcl;",
      "parameters": [
        {
          "index": 1,
          "name": "pRayTraceDistance"
        },
        {
          "index": 3,
          "name": "pPartialTicks"
        },
        {
          "index": 4,
          "name": "pRayTraceFluids"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DZLceh;Lfx;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pY"
        },
        {
          "index": 3,
          "name": "pOnGroundIn"
        },
        {
          "index": 4,
          "name": "pState"
        },
        {
          "index": 5,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(FF)V",
      "javadoc": [
        "Sets the rotation of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pYaw"
        },
        {
          "index": 2,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(FI)V",
      "parameters": [
        {
          "index": 1,
          "name": "pYaw"
        },
        {
          "index": 2,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(FLdcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pAmount"
        },
        {
          "index": 2,
          "name": "pRelative"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;)Lcxm;"
    },
    {
      "name": "a",
      "descriptor": "(Laag;Laqa;)V"
    },
    {
      "name": "a",
      "descriptor": "(Laag;Laql;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pLightning"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;Laqm;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pKilledEntity"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;Lfx;Z)Ljava/util/Optional;"
    },
    {
      "name": "a",
      "descriptor": "(Laag;Li$a;)Lcxm;"
    },
    {
      "name": "a",
      "descriptor": "(Laah;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ladp;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "pSoundIn"
        },
        {
          "index": 2,
          "name": "pVolume"
        },
        {
          "index": 3,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lael;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pTagIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lael;D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pFluidTag"
        },
        {
          "index": 2,
          "name": "pMotionScale"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lapk;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSource"
        },
        {
          "index": 2,
          "name": "pAmount"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Laqa;D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pDistance"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;ILapk;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pKilled"
        },
        {
          "index": 2,
          "name": "pScoreValue"
        },
        {
          "index": 3,
          "name": "pDamageSource"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;Laqa$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pCallback"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;Ldcn;Ldci;Lbrx;Ldcs;Lafo;)Ldcn;",
      "parameters": [
        {
          "index": 0,
          "name": "pEntity"
        },
        {
          "index": 1,
          "name": "pVec"
        },
        {
          "index": 2,
          "name": "pCollisionBox"
        },
        {
          "index": 3,
          "name": "pLevel"
        },
        {
          "index": 4,
          "name": "pContext"
        },
        {
          "index": 5,
          "name": "pPotentialHits"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqa;Z)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        },
        {
          "index": 2,
          "name": "pForce"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqf;Lbmb;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pSlotIn"
        },
        {
          "index": 2,
          "name": "pStack"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqm;Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityLivingBaseIn"
        },
        {
          "index": 2,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqr;Ldcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pTypeIn"
        },
        {
          "index": 2,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqx;)Laqb;",
      "parameters": [
        {
          "index": 1,
          "name": "pPoseIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laqx;Laqb;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pPoseIn"
        },
        {
          "index": 2,
          "name": "pSizeIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbfw;Laot;)Laou;",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pHand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbfw;Ldcn;Laot;)Laou;",
      "javadoc": [
        "Applies the given player interaction to this Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pVec"
        },
        {
          "index": 3,
          "name": "pHand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbmb;)Lbcv;",
      "parameters": [
        {
          "index": 1,
          "name": "pStack"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbmb;F)Lbcv;",
      "javadoc": [
        "Drops an item at the position of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pStack"
        },
        {
          "index": 2,
          "name": "pOffsetY"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrp;Lbrc;Lfx;Lceh;F)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pExplosionIn"
        },
        {
          "index": 2,
          "name": "pLevelIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pBlockStateIn"
        },
        {
          "index": 5,
          "name": "pExplosionPower"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrp;Lbrc;Lfx;Lceh;Lcux;F)F",
      "javadoc": [
        "Explosion resistance of a block relative to this entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pExplosionIn"
        },
        {
          "index": 2,
          "name": "pLevelIn"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pBlockStateIn"
        },
        {
          "index": 5,
          "name": "pFluidState"
        },
        {
          "index": 6,
          "name": "pExplosionPower"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrw;)Lbcv;",
      "parameters": [
        {
          "index": 1,
          "name": "pItemIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbrw;I)Lbcv;",
      "parameters": [
        {
          "index": 1,
          "name": "pItemIn"
        },
        {
          "index": 2,
          "name": "pOffset"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbyg;)F",
      "javadoc": [
        "Transforms the entity's current yaw with the given Mirror and returns it. This does not have a side-effect."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTransformMirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbzm;)F",
      "javadoc": [
        "Transforms the entity's current yaw with the given Rotation and returns it. This does not have a side-effect."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTransformRotation"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Ldcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pMotionMultiplierIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lceh;Lfx;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Ldci;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBb"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;)V"
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;FF)Ldcn;",
      "parameters": [
        {
          "index": 0,
          "name": "pRelative"
        },
        {
          "index": 1,
          "name": "pMotionScaler"
        },
        {
          "index": 2,
          "name": "pFacing"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;Laqr;)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pVec"
        },
        {
          "index": 2,
          "name": "pMover"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;Ldci;Lafo;)Ldcn;",
      "parameters": [
        {
          "index": 0,
          "name": "pVec"
        },
        {
          "index": 1,
          "name": "pCollisionBox"
        },
        {
          "index": 2,
          "name": "pPotentialHits"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldcn;Ldci;Lbrz;Ldcs;Lafo;)Ldcn;",
      "parameters": [
        {
          "index": 0,
          "name": "pVec"
        },
        {
          "index": 1,
          "name": "pCollisionBox"
        },
        {
          "index": 2,
          "name": "pLevelIn"
        },
        {
          "index": 3,
          "name": "pSelectionContext"
        },
        {
          "index": 4,
          "name": "pPotentialHits"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lddp;)Z",
      "javadoc": [
        "Returns whether this Entity is on the given scoreboard team."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTeamIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldj$a;Ldcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pAnchor"
        },
        {
          "index": 2,
          "name": "pTarget"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lfx;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pRotationYawIn"
        },
        {
          "index": 3,
          "name": "pRotationPitchIn"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lfx;Lceh;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lgc$a;D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pAxis"
        },
        {
          "index": 2,
          "name": "pDistance"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgc$a;Li$a;)Ldcn;"
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/Class;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityClazz"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pTag"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lm;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCategory"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lnr;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pName"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lnr;Ljava/util/UUID;)V",
      "javadoc": [
        "Send a chat message to the CommandSender"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pComponent"
        },
        {
          "index": 2,
          "name": "pSenderUUID"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lob;)Lob;"
    },
    {
      "name": "a",
      "descriptor": "(Lus;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pKey"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ZLjava/util/Set;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayersOnly"
        },
        {
          "index": 2,
          "name": "pPassengers"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "([D)Lmj;",
      "javadoc": [
        "creates a NBT list from the array of doubles passed to this function"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pNumbers"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "([F)Lmj;",
      "javadoc": [
        "Returns a new NBTTagList filled with the specified floats"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pNumbers"
        }
      ]
    },
    {
      "name": "aA",
      "descriptor": "()Z",
      "javadoc": [
        "@return True if this entity will not play sounds"
      ]
    },
    {
      "name": "aB",
      "descriptor": "()Z"
    },
    {
      "name": "aC",
      "descriptor": "()Z"
    },
    {
      "name": "aD",
      "descriptor": "()Z"
    },
    {
      "name": "aE",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is inside water (if inWater field is true as a result of handleWaterMovement() returning true)"
      ]
    },
    {
      "name": "aF",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is either in water or on an open air block in rain (used in wolves)."
      ]
    },
    {
      "name": "aG",
      "descriptor": "()Z"
    },
    {
      "name": "aH",
      "descriptor": "()Z"
    },
    {
      "name": "aI",
      "descriptor": "()Z"
    },
    {
      "name": "aJ",
      "descriptor": "()V"
    },
    {
      "name": "aK",
      "descriptor": "()Z"
    },
    {
      "name": "aL",
      "descriptor": "()V"
    },
    {
      "name": "aM",
      "descriptor": "()V",
      "javadoc": [
        "Plays the {@link #getSplashSound() splash sound}, and the {@link ParticleType#WATER_BUBBLE} and {@link ParticleType#WATER_SPLASH} particles."
      ]
    },
    {
      "name": "aN",
      "descriptor": "()Lceh;"
    },
    {
      "name": "aO",
      "descriptor": "()Z"
    },
    {
      "name": "aP",
      "descriptor": "()V"
    },
    {
      "name": "aQ",
      "descriptor": "()Z"
    },
    {
      "name": "aR",
      "descriptor": "()F",
      "javadoc": [
        "Gets how bright this entity is."
      ]
    },
    {
      "name": "aS",
      "descriptor": "()V",
      "javadoc": [
        "Marks this entity's velocity as changed, so that it can be re-synced with the client later"
      ]
    },
    {
      "name": "aT",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if other Entities should be prevented from moving through this Entity."
      ]
    },
    {
      "name": "aU",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should push and be pushed by other entities when colliding."
      ]
    },
    {
      "name": "aV",
      "descriptor": "()Z"
    },
    {
      "name": "aW",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns the string that identifies this Entity's class"
      ]
    },
    {
      "name": "aX",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the entity has not been {@link #removed}."
      ]
    },
    {
      "name": "aY",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is inside of an opaque block"
      ]
    },
    {
      "name": "aZ",
      "descriptor": "()Z"
    },
    {
      "name": "a_",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the player is in spectator mode."
      ]
    },
    {
      "name": "a_",
      "descriptor": "(ILbmb;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pInventorySlot"
        },
        {
          "index": 2,
          "name": "pItemStackIn"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Lbfw;)V",
      "javadoc": [
        "Called by a player entity when they collide with an entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Lbrx;)V",
      "javadoc": [
        "Sets the reference to the World object."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pLevelIn"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Ljava/util/UUID;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pUniqueIdIn"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Lmd;)Z",
      "javadoc": [
        "Writes this entity to NBT, unless it has been removed. Also writes this entity's passengers, and the entity type ID (so the produced NBT is sufficient to recreate the entity).",
        "",
        "Generally, {@link #writeUnlessPassenger} or {@link #writeWithoutTypeId} should be used instead of this method.",
        "",
        "@return True if the entity was written (and the passed compound should be saved)\" false if the entity was not written."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Z)V"
    },
    {
      "name": "aa",
      "descriptor": "()V",
      "javadoc": [
        "Called by the /kill command."
      ]
    },
    {
      "name": "ab",
      "descriptor": "()Luv;"
    },
    {
      "name": "ac",
      "descriptor": "()V",
      "javadoc": [
        "Keeps moving the entity up so it isn't colliding with blocks and other requirements for this entity to be spawned (only actually used on players though its also on Entity)"
      ]
    },
    {
      "name": "ad",
      "descriptor": "()V",
      "javadoc": [
        "Queues the entity for removal from the world on the next tick."
      ]
    },
    {
      "name": "ae",
      "descriptor": "()Laqx;"
    },
    {
      "name": "af",
      "descriptor": "()V",
      "javadoc": [
        "Recomputes this entity's bounding box so that it is positioned at this entity's X/Y/Z."
      ]
    },
    {
      "name": "ag",
      "descriptor": "()V",
      "javadoc": [
        "Gets called every tick from main Entity class"
      ]
    },
    {
      "name": "ah",
      "descriptor": "()V"
    },
    {
      "name": "ai",
      "descriptor": "()Z"
    },
    {
      "name": "aj",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of time this entity should stay in a portal before being transported."
      ]
    },
    {
      "name": "ak",
      "descriptor": "()V",
      "javadoc": [
        "Called whenever the entity is walking inside of lava."
      ]
    },
    {
      "name": "al",
      "descriptor": "()I"
    },
    {
      "name": "am",
      "descriptor": "()V",
      "javadoc": [
        "Removes fire from entity."
      ]
    },
    {
      "name": "an",
      "descriptor": "()V",
      "javadoc": [
        "sets the dead flag. Used when you fall off the bottom of the world."
      ]
    },
    {
      "name": "ao",
      "descriptor": "()Z"
    },
    {
      "name": "ap",
      "descriptor": "()Lfx;"
    },
    {
      "name": "aq",
      "descriptor": "()F"
    },
    {
      "name": "ar",
      "descriptor": "()F"
    },
    {
      "name": "as",
      "descriptor": "()Lfx;"
    },
    {
      "name": "at",
      "descriptor": "()F"
    },
    {
      "name": "au",
      "descriptor": "()V",
      "javadoc": [
        "Resets the entity's position to the center (planar) and bottom (vertical) points of its bounding box."
      ]
    },
    {
      "name": "av",
      "descriptor": "()Ladp;"
    },
    {
      "name": "aw",
      "descriptor": "()Ladp;"
    },
    {
      "name": "ax",
      "descriptor": "()Ladp;"
    },
    {
      "name": "ay",
      "descriptor": "()V"
    },
    {
      "name": "az",
      "descriptor": "()Z"
    },
    {
      "name": "b",
      "descriptor": "()Z"
    },
    {
      "name": "b",
      "descriptor": "(D)V",
      "parameters": [
        {
          "index": 0,
          "name": "pRenderDistWeight"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(DDDFF)V",
      "javadoc": [
        "Sets the location and Yaw/Pitch of an entity in the world"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pYaw"
        },
        {
          "index": 8,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(FF)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pDistance"
        },
        {
          "index": 2,
          "name": "pDamageMultiplier"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(IZ)V",
      "javadoc": [
        "Enable or disable a entity flag, see getEntityFlag to read the know flags."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pFlag"
        },
        {
          "index": 2,
          "name": "pSet"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laag;)Laqa;",
      "parameters": [
        {
          "index": 1,
          "name": "pServer"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laah;)V",
      "javadoc": [
        "Add the given player to the list of players tracking this entity. For instance, a player may track a boss in order to view its associated boss bar."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lael;)D"
    },
    {
      "name": "b",
      "descriptor": "(Lapk;)Z",
      "javadoc": [
        "Returns whether this Entity is invulnerable to the given DamageSource."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSource"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laqm;)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pLivingEntity"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laqx;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPoseIn"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lceh;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lceh;Lfx;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Ldci;)Z",
      "javadoc": [
        "Determines if a liquid is present within the specified AxisAlignedBB."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pBb"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Ldcn;)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lfx;Lceh;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlockIn"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Ljava/lang/String;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pTag"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lmd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lnr;)Lnr;",
      "parameters": [
        {
          "index": 0,
          "name": "pName"
        }
      ]
    },
    {
      "name": "bA",
      "descriptor": "()Z",
      "javadoc": [
        "Get if the Entity is sprinting."
      ]
    },
    {
      "name": "bB",
      "descriptor": "()Z"
    },
    {
      "name": "bC",
      "descriptor": "()Z"
    },
    {
      "name": "bD",
      "descriptor": "()Z"
    },
    {
      "name": "bE",
      "descriptor": "()Z"
    },
    {
      "name": "bF",
      "descriptor": "()Z"
    },
    {
      "name": "bG",
      "descriptor": "()Lddp;"
    },
    {
      "name": "bH",
      "descriptor": "()I"
    },
    {
      "name": "bI",
      "descriptor": "()I"
    },
    {
      "name": "bJ",
      "descriptor": "()Lnr;"
    },
    {
      "name": "bK",
      "descriptor": "()F"
    },
    {
      "name": "bL",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if it's possible to attack this entity with an item."
      ]
    },
    {
      "name": "bM",
      "descriptor": "()Z"
    },
    {
      "name": "bN",
      "descriptor": "()V"
    },
    {
      "name": "bO",
      "descriptor": "()Z",
      "javadoc": [
        "Returns false if this Entity can't move between dimensions. True if it can."
      ]
    },
    {
      "name": "bP",
      "descriptor": "()I",
      "javadoc": [
        "The maximum height from where the entity is alowed to jump (used in pathfinder)"
      ]
    },
    {
      "name": "bQ",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether this entity should NOT trigger a pressure plate or a tripwire."
      ]
    },
    {
      "name": "bR",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether this entity should be rendered as on fire."
      ]
    },
    {
      "name": "bS",
      "descriptor": "()Ljava/util/UUID;",
      "javadoc": [
        "Returns the UUID of this entity."
      ]
    },
    {
      "name": "bT",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "bU",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns a String to use as this entity's name in the scoreboard/entity selector systems"
      ]
    },
    {
      "name": "bV",
      "descriptor": "()Z"
    },
    {
      "name": "bW",
      "descriptor": "()D"
    },
    {
      "name": "bX",
      "descriptor": "()Z"
    },
    {
      "name": "bY",
      "descriptor": "()Z"
    },
    {
      "name": "bZ",
      "descriptor": "()Lgc;",
      "javadoc": [
        "Gets the horizontal facing direction of this Entity."
      ]
    },
    {
      "name": "ba",
      "descriptor": "()V",
      "javadoc": [
        "Handles updating while riding another entity"
      ]
    },
    {
      "name": "bb",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y Offset of this entity."
      ]
    },
    {
      "name": "bc",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y offset from the entity's position for any entity riding this one."
      ]
    },
    {
      "name": "bd",
      "descriptor": "()Z"
    },
    {
      "name": "be",
      "descriptor": "()V",
      "javadoc": [
        "Dismounts all entities riding this entity from this entity."
      ]
    },
    {
      "name": "bf",
      "descriptor": "()V"
    },
    {
      "name": "bg",
      "descriptor": "()F"
    },
    {
      "name": "bh",
      "descriptor": "()Ldcn;",
      "javadoc": [
        "returns a (normalized) vector of where this entity is looking"
      ]
    },
    {
      "name": "bi",
      "descriptor": "()Ldcm;",
      "javadoc": [
        "returns the Entity's pitch and yaw as a Vec2f"
      ]
    },
    {
      "name": "bj",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "bk",
      "descriptor": "()V"
    },
    {
      "name": "bl",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of cooldown before this entity can use a portal again."
      ]
    },
    {
      "name": "bm",
      "descriptor": "()V",
      "javadoc": [
        "Setups the entity to do the hurt animation. Only used by packets in multiplayer."
      ]
    },
    {
      "name": "bn",
      "descriptor": "()Ljava/lang/Iterable;"
    },
    {
      "name": "bo",
      "descriptor": "()Ljava/lang/Iterable;"
    },
    {
      "name": "bp",
      "descriptor": "()Ljava/lang/Iterable;"
    },
    {
      "name": "bq",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the entity is on fire. Used by render to add the fire effect on rendering."
      ]
    },
    {
      "name": "br",
      "descriptor": "()Z"
    },
    {
      "name": "bs",
      "descriptor": "()Z",
      "javadoc": [
        "If at least 1 entity is riding this one"
      ]
    },
    {
      "name": "bt",
      "descriptor": "()Z"
    },
    {
      "name": "bu",
      "descriptor": "()Z"
    },
    {
      "name": "bv",
      "descriptor": "()Z"
    },
    {
      "name": "bw",
      "descriptor": "()Z"
    },
    {
      "name": "bx",
      "descriptor": "()Z"
    },
    {
      "name": "by",
      "descriptor": "()Z"
    },
    {
      "name": "bz",
      "descriptor": "()Z"
    },
    {
      "name": "c",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pScale"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(FF)Ldcn;",
      "javadoc": [
        "Creates a Vec3 using the pitch and yaw of the entities rotation."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPitch"
        },
        {
          "index": 2,
          "name": "pYaw"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Laah;)V",
      "javadoc": [
        "Removes the given player from the list of players tracking this entity. See {@link Entity#addTrackingPlayer} for more information on tracking."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Laqx;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPose"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lbfw;)Z",
      "javadoc": [
        "Only used by renderer in EntityLivingBase subclasses.",
        "Determines if an entity is visible or not to a specific player, if the entity is normally invisible.",
        "For EntityLivingBase subclasses, returning false when invisible will render the entity semi-transparent."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Ldcn;)D",
      "parameters": [
        {
          "index": 0,
          "name": "pVec"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pGrounded"
        }
      ]
    },
    {
      "name": "cA",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "cB",
      "descriptor": "()Lfx;"
    },
    {
      "name": "cC",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "cD",
      "descriptor": "()D"
    },
    {
      "name": "cE",
      "descriptor": "()D"
    },
    {
      "name": "cF",
      "descriptor": "()D"
    },
    {
      "name": "cG",
      "descriptor": "()D"
    },
    {
      "name": "cH",
      "descriptor": "()D"
    },
    {
      "name": "cI",
      "descriptor": "()V",
      "javadoc": [
        "Makes the entity despawn if requirements are reached"
      ]
    },
    {
      "name": "ca",
      "descriptor": "()Lgc;",
      "javadoc": [
        "Gets the horizontal facing direction of this Entity, adjusted to take specially-treated entity types into account."
      ]
    },
    {
      "name": "cb",
      "descriptor": "()Lnv;"
    },
    {
      "name": "cc",
      "descriptor": "()Ldci;"
    },
    {
      "name": "cd",
      "descriptor": "()Ldci;",
      "javadoc": [
        "Gets the bounding box of this Entity, adjusted to take auxiliary entities into account (e.g. the tile contained by a minecart, such as a command block)."
      ]
    },
    {
      "name": "ce",
      "descriptor": "()F"
    },
    {
      "name": "cf",
      "descriptor": "()Ldcn;"
    },
    {
      "name": "cg",
      "descriptor": "()Lbrx;",
      "javadoc": [
        "Get the world, if available. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return the overworld"
      ]
    },
    {
      "name": "ch",
      "descriptor": "()Lnet/minecraft/server/MinecraftServer;",
      "javadoc": [
        "Get the Minecraft server instance"
      ]
    },
    {
      "name": "ci",
      "descriptor": "()Z"
    },
    {
      "name": "cj",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if players can use this entity to access operator (permission level 2) commands either directly or indirectly, such as give or setblock. A similar method exists for entities at {@link net.minecraft.tileentity.TileEntity#onlyOpsCanSetNbt()}.<p>For example, {@link net.minecraft.entity.item.EntityMinecartCommandBlock#ignoreItemEntityData() command block minecarts} and {@link net.minecraft.entity.item.EntityMinecartMobSpawner#ignoreItemEntityData() mob spawner minecarts} (spawning command block minecarts or drops) are considered accessible.</p>@return true if this entity offers ways for unauthorized players to use restricted commands"
      ]
    },
    {
      "name": "ck",
      "descriptor": "()Z"
    },
    {
      "name": "cl",
      "descriptor": "()Z"
    },
    {
      "name": "cm",
      "descriptor": "()Laqa;",
      "javadoc": [
        "For vehicles, the first passenger is generally considered the controller and \"drives\" the vehicle. For example, Pigs, Horses, and Boats are generally \"steered\" by the controlling passenger."
      ]
    },
    {
      "name": "cn",
      "descriptor": "()Ljava/util/List;"
    },
    {
      "name": "co",
      "descriptor": "()Ljava/util/Collection;",
      "javadoc": [
        "Recursively collects the passengers of this entity. This differs from getPassengers() in that passengers of passengers are recursively collected."
      ]
    },
    {
      "name": "cp",
      "descriptor": "()Ljava/util/stream/Stream;"
    },
    {
      "name": "cq",
      "descriptor": "()Z"
    },
    {
      "name": "cr",
      "descriptor": "()Laqa;"
    },
    {
      "name": "cs",
      "descriptor": "()Z"
    },
    {
      "name": "ct",
      "descriptor": "()Laqa;",
      "javadoc": [
        "Get entity this is riding"
      ]
    },
    {
      "name": "cu",
      "descriptor": "()Ladr;"
    },
    {
      "name": "cv",
      "descriptor": "()I"
    },
    {
      "name": "cw",
      "descriptor": "()Ldb;"
    },
    {
      "name": "cx",
      "descriptor": "()D"
    },
    {
      "name": "cy",
      "descriptor": "()F"
    },
    {
      "name": "cz",
      "descriptor": "()F"
    },
    {
      "name": "d",
      "descriptor": "()Lnr;"
    },
    {
      "name": "d",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pScale"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Sets the x,y,z of the entity from the given parameters. Also seems to set up a bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "pVolume"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(FF)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPitch"
        },
        {
          "index": 2,
          "name": "pYaw"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Laqx;)Ldci;",
      "parameters": [
        {
          "index": 1,
          "name": "pPose"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Ldcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pVec"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Lfx;)V",
      "javadoc": [
        "Marks the entity as being inside a portal, activating teleportation logic in onEntityUpdate() in the following tick(s)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Lmd;)Z",
      "javadoc": [
        "Writes this entity to NBT, unless it has been removed or it is a passenger. Also writes this entity's passengers, and the entity type ID (so the produced NBT is sufficient to recreate the entity).",
        "To always write the entity, use {@link #writeWithoutTypeId}.",
        "",
        "@return True if the entity was written (and the passed compound should be saved)\" false if the entity was not written."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Z)V",
      "javadoc": [
        "When set to true the entity will not play sounds."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pIsSilent"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "()V"
    },
    {
      "name": "e",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pScale"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(DDD)Z",
      "javadoc": [
        "Checks if the offset position from the entity's current position is inside of a liquid."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 1,
          "name": "pVolume"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pId"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(Laqx;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pPose"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(Ldcn;)D",
      "parameters": [
        {
          "index": 1,
          "name": "pVec"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(Lmd;)Lmd;",
      "javadoc": [
        "Writes this entity, including passengers, to NBT, regardless as to whether or not it is removed or a passenger. Does <b>not</b> include the entity's type ID, so the NBT is insufficient to recreate the entity using {@link AnvilChunkLoader#readWorldEntity}. Use {@link #writeUnlessPassenger} for that purpose."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pNoGravity"
        }
      ]
    },
    {
      "name": "equals",
      "descriptor": "(Ljava/lang/Object;)Z"
    },
    {
      "name": "f",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pScale"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(F)Ldcn;",
      "javadoc": [
        "interpolated look vector"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(I)V",
      "javadoc": [
        "Sets entity to burn for x amount of seconds, cannot lower amount of existing fire."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSeconds"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(Ldcn;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pMotionIn"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(Lmd;)V",
      "javadoc": [
        "Reads the entity from NBT (calls an abstract helper method to read specialized data)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pKeyDownIn"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "pScale"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Like {@link #setRawPosition}, but also sets {@link #prevPosX}/Y/Z and {@link #lastTickPosX}/Y/Z. {@link #setLocationAndAngles} does the same thing, except it also updates the bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(F)F",
      "javadoc": [
        "Gets the current pitch of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pTicks"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(Laqa;)F",
      "javadoc": [
        "Returns the distance to the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(Ldcn;)Ldcn;",
      "javadoc": [
        "Given a motion vector, return an updated vector that takes into account restrictions such as collisions (from all directions) and step-up from stepHeight"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pVec"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(Z)V",
      "javadoc": [
        "Set sprinting switch for Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSprinting"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(DDD)D",
      "javadoc": [
        "Gets the squared distance to the position."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(F)F",
      "javadoc": [
        "Gets the current yaw of the entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(I)V",
      "javadoc": [
        "Will deal the specified amount of fire damage to the entity if the entity isn't immune to fire damage."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pAmount"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(Laqa;)D",
      "javadoc": [
        "Returns the squared distance to the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pSwimming"
        }
      ]
    },
    {
      "name": "hashCode",
      "descriptor": "()I"
    },
    {
      "name": "i",
      "descriptor": "()Z"
    },
    {
      "name": "i",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Adds to the current velocity of the entity, and sets {@link #isAirBorne} to true."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(F)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(I)Z",
      "javadoc": [
        "Returns true if the flag is active for the entity. Known flags: 0: burning 1: sneaking 2: unused 3: sprinting 4: swimming 5: invisible 6: glowing 7: elytra flying"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pFlag"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(Laqa;)V",
      "javadoc": [
        "Applies a velocity to the entities, to push them away from eachother."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pGlowingIn"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "j",
      "descriptor": "(DDD)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "(F)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pAir"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pInvisible"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "()Z"
    },
    {
      "name": "k",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Updates the entity motion clientside, called by packets from the server"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(F)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(I)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pDownwards"
        }
      ]
    },
    {
      "name": "l",
      "descriptor": "()V",
      "javadoc": [
        "Dismounts this entity from the entity it is riding."
      ]
    },
    {
      "name": "l",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "l",
      "descriptor": "(F)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "l",
      "descriptor": "(Laqa;)V",
      "javadoc": [
        "Applies this entity's orientation (pitch/yaw) to another entity. Used to update passenger orientation."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityToUpdate"
        }
      ]
    },
    {
      "name": "l",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pDownwards"
        }
      ]
    },
    {
      "name": "m",
      "descriptor": "()V"
    },
    {
      "name": "m",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Teleports the entity, forcing the destination to stay loaded for a short time"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "m",
      "descriptor": "(F)V",
      "javadoc": [
        "Sets the head's yaw rotation of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pRotation"
        }
      ]
    },
    {
      "name": "m",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "m",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets whether this Entity is invulnerable."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pIsInvulnerable"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "n",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "(F)V",
      "javadoc": [
        "Set the render yaw offset"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pOffset"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pAlwaysRenderNameTag"
        }
      ]
    },
    {
      "name": "o",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "o",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Directly updates the {@link #posX}, {@link posY}, and {@link posZ} fields, without performing any collision checks, updating the bounding box position, or sending any packets. In general, this is not what you want and {@link #setPosition} is better, as that handles the bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "o",
      "descriptor": "(F)Ldcn;",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "o",
      "descriptor": "(Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "p",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "p",
      "descriptor": "(Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "q",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "q",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "r",
      "descriptor": "(Laqa;)Z",
      "javadoc": [
        "Returns whether this Entity is on the same team as the given Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "s",
      "descriptor": "(Laqa;)Z",
      "javadoc": [
        "Returns true if Entity argument is equal to this Entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "t",
      "descriptor": "(Laqa;)Z",
      "javadoc": [
        "Called when a player attacks an entity. If this returns true the attack will not happen."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "toString",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "u",
      "descriptor": "(Laqa;)V",
      "javadoc": [
        "Sets this entity's location and angles to the location and angles of the passed in entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "v",
      "descriptor": "(Laqa;)V",
      "javadoc": [
        "Prepares this entity in new dimension by copying NBT data from entity in old dimension"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "w",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "x",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "x_",
      "descriptor": "()V"
    },
    {
      "name": "y",
      "descriptor": "()I"
    },
    {
      "name": "y",
      "descriptor": "(Laqa;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntityIn"
        }
      ]
    },
    {
      "name": "y_",
      "descriptor": "()Lcvc;"
    }
  ]
}