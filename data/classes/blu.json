{
  "name": "blu",
  "fields": [
    {
      "name": "aA",
      "descriptor": "I"
    },
    {
      "name": "aB",
      "descriptor": "D"
    },
    {
      "name": "aC",
      "descriptor": "D"
    },
    {
      "name": "aD",
      "descriptor": "D"
    },
    {
      "name": "aE",
      "descriptor": "D"
    },
    {
      "name": "aF",
      "descriptor": "D"
    },
    {
      "name": "aG",
      "descriptor": "Z"
    },
    {
      "name": "aH",
      "descriptor": "Z"
    },
    {
      "name": "aI",
      "descriptor": "Z"
    },
    {
      "name": "aJ",
      "descriptor": "Z"
    },
    {
      "name": "aK",
      "descriptor": "D"
    },
    {
      "name": "aL",
      "descriptor": "F"
    },
    {
      "name": "aM",
      "descriptor": "Lblu$a;"
    },
    {
      "name": "aN",
      "descriptor": "Lblu$a;"
    },
    {
      "name": "aO",
      "descriptor": "D"
    },
    {
      "name": "aP",
      "descriptor": "Z"
    },
    {
      "name": "aQ",
      "descriptor": "Z"
    },
    {
      "name": "aR",
      "descriptor": "F"
    },
    {
      "name": "aS",
      "descriptor": "F"
    },
    {
      "name": "aT",
      "descriptor": "F"
    },
    {
      "name": "ao",
      "descriptor": "Lwf;"
    },
    {
      "name": "ap",
      "descriptor": "Lwf;"
    },
    {
      "name": "aq",
      "descriptor": "Lwf;"
    },
    {
      "name": "ar",
      "descriptor": "Lwf;"
    },
    {
      "name": "as",
      "descriptor": "Lwf;"
    },
    {
      "name": "at",
      "descriptor": "Lwf;"
    },
    {
      "name": "au",
      "descriptor": "I"
    },
    {
      "name": "av",
      "descriptor": "D"
    },
    {
      "name": "aw",
      "descriptor": "[F"
    },
    {
      "name": "ax",
      "descriptor": "F"
    },
    {
      "name": "ay",
      "descriptor": "F"
    },
    {
      "name": "az",
      "descriptor": "F"
    },
    {
      "name": "b",
      "descriptor": "I"
    },
    {
      "name": "c",
      "descriptor": "I"
    },
    {
      "name": "d",
      "descriptor": "D"
    },
    {
      "name": "e",
      "descriptor": "I"
    },
    {
      "name": "f",
      "descriptor": "Lwf;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Latj;Lbwp;)V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lbwp;DDD)V"
    },
    {
      "name": "A",
      "descriptor": "()I"
    },
    {
      "name": "P",
      "descriptor": "()Lpk;"
    },
    {
      "name": "a",
      "descriptor": "(DDDFFIZ)V",
      "javadoc": [
        "Sets a target for the client to interpolate towards over the next few ticks"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pYaw"
        },
        {
          "index": 8,
          "name": "pPitch"
        },
        {
          "index": 9,
          "name": "pPosRotationIncrements"
        },
        {
          "index": 10,
          "name": "pTeleport"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DZLcks;Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pY"
        },
        {
          "index": 3,
          "name": "pOnGround"
        },
        {
          "index": 4,
          "name": "pState"
        },
        {
          "index": 5,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(F)V",
      "javadoc": [
        "Sets the damage taken from the last hit."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pDamageTaken"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(I)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pSide"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IF)F",
      "parameters": [
        {
          "index": 1,
          "name": "pSide"
        },
        {
          "index": 2,
          "name": "pLimbSwing"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lasp;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSource"
        },
        {
          "index": 2,
          "name": "pAmount"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;)V",
      "javadoc": [
        "Applies this boat's yaw to the given entity. Used to update the orientation of its passenger."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityToUpdate"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;Latf;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lauf;Latg;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pPose"
        },
        {
          "index": 2,
          "name": "pSize"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;Larz;)Lasa;",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pHand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lblu$b;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBoatType"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgl$a;Ln$a;)Ldna;"
    },
    {
      "name": "a",
      "descriptor": "(Lna;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ZZ)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLeft"
        },
        {
          "index": 2,
          "name": "pRight"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ZZZZ)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLeftInputDown"
        },
        {
          "index": 2,
          "name": "pRightInputDown"
        },
        {
          "index": 3,
          "name": "pForwardInputDown"
        },
        {
          "index": 4,
          "name": "pBackInputDown"
        }
      ]
    },
    {
      "name": "aI",
      "descriptor": "()Latf$b;"
    },
    {
      "name": "aP",
      "descriptor": "()Z"
    },
    {
      "name": "a_",
      "descriptor": "()V"
    },
    {
      "name": "b",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(I)V",
      "javadoc": [
        "Sets the time to count down from since the last time entity was hit."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pTimeSinceHit"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Latf;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Latt;)Ldna;",
      "parameters": [
        {
          "index": 1,
          "name": "pLivingEntity"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lna;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "bc",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if other Entities should be prevented from moving through this Entity."
      ]
    },
    {
      "name": "bd",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should push and be pushed by other entities when colliding."
      ]
    },
    {
      "name": "bi",
      "descriptor": "()Z"
    },
    {
      "name": "bl",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y offset from the entity's position for any entity riding this one."
      ]
    },
    {
      "name": "bv",
      "descriptor": "()V",
      "javadoc": [
        "Setups the entity to do the hurt animation. Only used by packets in multiplayer."
      ]
    },
    {
      "name": "c",
      "descriptor": "(I)V",
      "javadoc": [
        "Sets the forward direction of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pForwardDirection"
        }
      ]
    },
    {
      "name": "cp",
      "descriptor": "()Lgl;",
      "javadoc": [
        "Gets the horizontal facing direction of this Entity, adjusted to take specially-treated entity types into account."
      ]
    },
    {
      "name": "cz",
      "descriptor": "()Latf;",
      "javadoc": [
        "For vehicles, the first passenger is generally considered the controller and \"drives\" the vehicle. For example, Pigs, Horses, and Boats are generally \"steered\" by the controlling passenger."
      ]
    },
    {
      "name": "d",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pTicks"
        }
      ]
    },
    {
      "name": "df",
      "descriptor": "()Lbqp;"
    },
    {
      "name": "g",
      "descriptor": "(Latf;)V",
      "javadoc": [
        "Applies a velocity to the entities, to push them away from eachother."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "()Lbql;"
    },
    {
      "name": "h",
      "descriptor": "(Latf;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "()Lafd;"
    },
    {
      "name": "i",
      "descriptor": "(Latf;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "()F"
    },
    {
      "name": "j",
      "descriptor": "(Latf;)V",
      "javadoc": [
        "Applies this entity's orientation (pitch/yaw) to another entity. Used to update passenger orientation."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntityToUpdate"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "k",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pDownwards"
        }
      ]
    },
    {
      "name": "l",
      "descriptor": "()F",
      "javadoc": [
        "Decides how much the boat should be gliding on the land (based on any slippery blocks)"
      ]
    },
    {
      "name": "n",
      "descriptor": "()F",
      "javadoc": [
        "Gets the damage taken from the last hit."
      ]
    },
    {
      "name": "o",
      "descriptor": "()I",
      "javadoc": [
        "Gets the time since the last hit."
      ]
    },
    {
      "name": "o",
      "descriptor": "(Latf;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPassenger"
        }
      ]
    },
    {
      "name": "p",
      "descriptor": "()I",
      "javadoc": [
        "Gets the forward direction of the entity."
      ]
    },
    {
      "name": "q",
      "descriptor": "()Lblu$b;"
    },
    {
      "name": "r",
      "descriptor": "()V"
    },
    {
      "name": "s",
      "descriptor": "()V"
    },
    {
      "name": "t",
      "descriptor": "()Lblu$a;",
      "javadoc": [
        "Determines whether the boat is in water, gliding on land, or in air"
      ]
    },
    {
      "name": "v",
      "descriptor": "()Z"
    },
    {
      "name": "w",
      "descriptor": "()Lblu$a;",
      "javadoc": [
        "Decides whether the boat is currently underwater."
      ]
    },
    {
      "name": "x",
      "descriptor": "()V",
      "javadoc": [
        "Update the boat's speed, based on momentum."
      ]
    },
    {
      "name": "z",
      "descriptor": "()V"
    }
  ]
}