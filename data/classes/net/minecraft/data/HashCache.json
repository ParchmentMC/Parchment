{
  "name": "net/minecraft/data/HashCache",
  "methods": [
    {
      "name": "getHash",
      "descriptor": "(Ljava/nio/file/Path;)Ljava/lang/String;",
      "javadoc": [
        "Gets the previous hash of a file, so that it doesn't need to be written to disk. Only meaningful before {@link recordHash} has been called.",
        "",
        "@return The hash that was recorded when {@link recordHash} was called on the previous run, or <code>null</code> if the file does not exist, or an empty string if the file exists but was not recorded. Note that the hash is <em>not</em> based on the current bytes on disk."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "file"
        }
      ]
    },
    {
      "name": "had",
      "descriptor": "(Ljava/nio/file/Path;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "file"
        }
      ]
    },
    {
      "name": "purgeStaleAndWrite",
      "descriptor": "()V",
      "javadoc": [
        "Writes the cache file containing the hashes of newly created files to the disk, and deletes any stale files."
      ]
    },
    {
      "name": "putNew",
      "descriptor": "(Ljava/nio/file/Path;Ljava/lang/String;)V",
      "javadoc": [
        "Inform the cache that a file has been written to {@code fileIn} with contents hashing to {@code hash}."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "file"
        },
        {
          "index": 2,
          "name": "hash"
        }
      ]
    },
    {
      "name": "walkOutputFiles",
      "descriptor": "()Ljava/util/stream/Stream;",
      "javadoc": [
        "Gets all files in the directory, other than the cache file itself."
      ]
    }
  ]
}