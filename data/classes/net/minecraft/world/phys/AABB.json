{
  "name": "net/minecraft/world/phys/AABB",
  "methods": [
    {
      "name": "clip",
      "descriptor": "(Ljava/lang/Iterable;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/BlockHitResult;",
      "parameters": [
        {
          "index": 0,
          "name": "boxes"
        },
        {
          "index": 1,
          "name": "start"
        },
        {
          "index": 2,
          "name": "end"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "clip",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Ljava/util/Optional;",
      "parameters": [
        {
          "index": 1,
          "name": "from"
        },
        {
          "index": 2,
          "name": "to"
        }
      ]
    },
    {
      "name": "clipPoint",
      "descriptor": "([DLnet/minecraft/core/Direction;DDDDDDDDLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;",
      "parameters": [
        {
          "index": 0,
          "name": "minDistance"
        },
        {
          "index": 1,
          "name": "prevDirection"
        },
        {
          "index": 2,
          "name": "distanceSide"
        },
        {
          "index": 4,
          "name": "distanceOtherA"
        },
        {
          "index": 6,
          "name": "distanceOtherB"
        },
        {
          "index": 8,
          "name": "minSide"
        },
        {
          "index": 10,
          "name": "minOtherA"
        },
        {
          "index": 12,
          "name": "maxOtherA"
        },
        {
          "index": 14,
          "name": "minOtherB"
        },
        {
          "index": 16,
          "name": "maxOtherB"
        },
        {
          "index": 18,
          "name": "hitSide"
        },
        {
          "index": 19,
          "name": "startSide"
        },
        {
          "index": 21,
          "name": "startOtherA"
        },
        {
          "index": 23,
          "name": "startOtherB"
        }
      ]
    },
    {
      "name": "contains",
      "descriptor": "(DDD)Z",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "contains",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Z",
      "javadoc": [
        "Returns if the supplied Vec3D is completely inside the bounding box"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "contract",
      "descriptor": "(DDD)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Creates a new {@link AxisAlignedBB} that has been contracted by the given amount, with positive changes decreasing max values and negative changes increasing min values.",
        "<br/>",
        "If the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see last sample).",
        "",
        "<h3>Samples:</h3>",
        "<table>",
        "<tr><th>Input</th><th>Result</th></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 4, 4, 4).contract(2, 2, 2)</code></pre></td><td><pre><samp>box[0.0, 0.0, 0.0 -> 2.0, 2.0, 2.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 4, 4, 4).contract(-2, -2, -2)</code></pre></td><td><pre><samp>box[2.0, 2.0, 2.0 -> 4.0, 4.0, 4.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).contract(0, 1, -1)</code></pre></td><td><pre><samp>box[5.0, 5.0, 6.0 -> 7.0, 6.0, 7.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(-2, -2, -2, 2, 2, 2).contract(4, -4, 0)</code></pre></td><td><pre><samp>box[-8.0, 2.0, -2.0 -> -2.0, 8.0, 2.0]</samp></pre></td></tr>",
        "</table>",
        "",
        "<h3>See Also:</h3>",
        "<ul>",
        "<li>{@link #expand(double, double, double)} - like this, except for expanding.</li>",
        "<li>{@link #grow(double, double, double)} and {@link #grow(double)} - expands in all directions.</li>",
        "<li>{@link #shrink(double)} - contracts in all directions (like {@link #grow(double)})</li>",
        "</ul>",
        "",
        "@return A new modified bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "deflate",
      "descriptor": "(D)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Creates a new {@link AxisAlignedBB} that is expanded by the given value in all directions. Equivalent to {@link #grow(double)} with value set to the negative of the value provided here. Passing a negative value to this method values will grow the AABB.",
        "<br/>",
        "Side lengths will be decreased by 2 times the value of the parameter, since both min and max are changed.",
        "<br/>",
        "If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see samples on {@link #grow(double, double, double)}).",
        "",
        "@return A modified AABB."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "value"
        }
      ]
    },
    {
      "name": "expandTowards",
      "descriptor": "(DDD)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Creates a new {@link AxisAlignedBB} that has been expanded by the given amount, with positive changes increasing max values and negative changes decreasing min values.",
        "",
        "<h3>Samples:</h3>",
        "<table>",
        "<tr><th>Input</th><th>Result</th></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).expand(2, 2, 2)</code></pre></td><td><pre><samp>box[0, 0, 0 -> 3, 3, 3]</samp></pre></td><td>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).expand(-2, -2, -2)</code></pre></td><td><pre><samp>box[-2, -2, -2 -> 1, 1, 1]</samp></pre></td><td>",
        "<tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).expand(0, 1, -1)</code></pre></td><td><pre><samp>box[5, 5, 4, 7, 8, 7]</samp></pre></td><td>",
        "</table>",
        "",
        "<h3>See Also:</h3>",
        "<ul>",
        "<li>{@link #contract(double, double, double)} - like this, except for shrinking.</li>",
        "<li>{@link #grow(double, double, double)} and {@link #grow(double)} - expands in all directions.</li>",
        "<li>{@link #shrink(double)} - contracts in all directions (like {@link #grow(double)})</li>",
        "</ul>",
        "",
        "@return A modified bounding box that will always be equal or greater in volume to this bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "expandTowards",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "vector"
        }
      ]
    },
    {
      "name": "getDirection",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/phys/Vec3;[DLnet/minecraft/core/Direction;DDD)Lnet/minecraft/core/Direction;",
      "parameters": [
        {
          "index": 0,
          "name": "aabb"
        },
        {
          "index": 1,
          "name": "start"
        },
        {
          "index": 2,
          "name": "minDistance"
        },
        {
          "index": 3,
          "name": "facing"
        },
        {
          "index": 4,
          "name": "deltaX"
        },
        {
          "index": 6,
          "name": "deltaY"
        },
        {
          "index": 8,
          "name": "deltaZ"
        }
      ]
    },
    {
      "name": "getSize",
      "descriptor": "()D",
      "javadoc": [
        "Returns the average length of the edges of the bounding box."
      ]
    },
    {
      "name": "inflate",
      "descriptor": "(D)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Creates a new {@link AxisAlignedBB} that is expanded by the given value in all directions. Equivalent to {@link #grow(double, double, double)} with the given value for all 3 params. Negative values will shrink the AABB.",
        "<br/>",
        "Side lengths will be increased by 2 times the value of the parameter, since both min and max are changed.",
        "<br/>",
        "If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see samples on {@link #grow(double, double, double)}).",
        "",
        "@return A modified AABB."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "value"
        }
      ]
    },
    {
      "name": "inflate",
      "descriptor": "(DDD)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Creates a new {@link AxisAlignedBB} that has been contracted by the given amount in both directions. Negative values will shrink the AABB instead of expanding it.",
        "<br/>",
        "Side lengths will be increased by 2 times the value of the parameters, since both min and max are changed.",
        "<br/>",
        "If contracting and the amount to contract by is larger than the length of a side, then the side will wrap (still creating a valid AABB - see last ample).",
        "",
        "<h3>Samples:</h3>",
        "<table>",
        "<tr><th>Input</th><th>Result</th></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 1, 1, 1).grow(2, 2, 2)</code></pre></td><td><pre><samp>box[-2.0, -2.0, -2.0 -> 3.0, 3.0, 3.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(0, 0, 0, 6, 6, 6).grow(-2, -2, -2)</code></pre></td><td><pre><samp>box[2.0, 2.0, 2.0 -> 4.0, 4.0, 4.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(5, 5, 5, 7, 7, 7).grow(0, 1, -1)</code></pre></td><td><pre><samp>box[5.0, 4.0, 6.0 -> 7.0, 8.0, 6.0]</samp></pre></td></tr>",
        "<tr><td><pre><code>new AxisAlignedBB(1, 1, 1, 3, 3, 3).grow(-4, -2, -3)</code></pre></td><td><pre><samp>box[-1.0, 1.0, 0.0 -> 5.0, 3.0, 4.0]</samp></pre></td></tr>",
        "</table>",
        "",
        "<h3>See Also:</h3>",
        "<ul>",
        "<li>{@link #expand(double, double, double)} - expands in only one direction.</li>",
        "<li>{@link #contract(double, double, double)} - contracts in only one direction.</li>",
        "<lu>{@link #grow(double)} - version of this that expands in all directions from one parameter.</li>",
        "<li>{@link #shrink(double)} - contracts in all directions</li>",
        "</ul>",
        "",
        "@return A modified bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "intersect",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "other"
        }
      ]
    },
    {
      "name": "intersects",
      "descriptor": "(DDDDDD)Z",
      "parameters": [
        {
          "index": 1,
          "name": "x1"
        },
        {
          "index": 3,
          "name": "y1"
        },
        {
          "index": 5,
          "name": "z1"
        },
        {
          "index": 7,
          "name": "x2"
        },
        {
          "index": 9,
          "name": "y2"
        },
        {
          "index": 11,
          "name": "z2"
        }
      ]
    },
    {
      "name": "intersects",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)Z",
      "javadoc": [
        "Checks if the bounding box intersects with another."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "other"
        }
      ]
    },
    {
      "name": "intersects",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "min"
        },
        {
          "index": 2,
          "name": "max"
        }
      ]
    },
    {
      "name": "max",
      "descriptor": "(Lnet/minecraft/core/Direction$Axis;)D",
      "parameters": [
        {
          "index": 1,
          "name": "axis"
        }
      ]
    },
    {
      "name": "min",
      "descriptor": "(Lnet/minecraft/core/Direction$Axis;)D",
      "parameters": [
        {
          "index": 1,
          "name": "axis"
        }
      ]
    },
    {
      "name": "minmax",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "other"
        }
      ]
    },
    {
      "name": "move",
      "descriptor": "(DDD)Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Offsets the current bounding box by the specified amount."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "move",
      "descriptor": "(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        }
      ]
    },
    {
      "name": "move",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "of",
      "descriptor": "(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 0,
          "name": "mutableBox"
        }
      ]
    },
    {
      "name": "unitCubeFromLowerCorner",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 0,
          "name": "vector"
        }
      ]
    }
  ]
}