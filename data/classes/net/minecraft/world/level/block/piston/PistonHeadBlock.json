{
  "name": "net/minecraft/world/level/block/piston/PistonHeadBlock",
  "methods": [
    {
      "name": "calculateShape",
      "descriptor": "(Lnet/minecraft/core/Direction;Z)Lnet/minecraft/world/phys/shapes/VoxelShape;",
      "parameters": [
        {
          "index": 0,
          "name": "direction"
        },
        {
          "index": 1,
          "name": "shortArm"
        }
      ]
    },
    {
      "name": "canSurvive",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/core/BlockPos;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "createBlockStateDefinition",
      "descriptor": "(Lnet/minecraft/world/level/block/state/StateDefinition$Builder;)V",
      "parameters": [
        {
          "index": 1,
          "name": "builder"
        }
      ]
    },
    {
      "name": "getCloneItemStack",
      "descriptor": "(Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)Lnet/minecraft/world/item/ItemStack;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "state"
        }
      ]
    },
    {
      "name": "getShape",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/phys/shapes/CollisionContext;)Lnet/minecraft/world/phys/shapes/VoxelShape;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "context"
        }
      ]
    },
    {
      "name": "isFittingBase",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/state/BlockState;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "baseState"
        },
        {
          "index": 2,
          "name": "extendedState"
        }
      ]
    },
    {
      "name": "isPathfindable",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/pathfinder/PathComputationType;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "type"
        }
      ]
    },
    {
      "name": "makeShapes",
      "descriptor": "(Z)[Lnet/minecraft/world/phys/shapes/VoxelShape;",
      "parameters": [
        {
          "index": 0,
          "name": "extended"
        }
      ]
    },
    {
      "name": "mirror",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Mirror;)Lnet/minecraft/world/level/block/state/BlockState;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "mirror"
        }
      ]
    },
    {
      "name": "neighborChanged",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/Block;Lnet/minecraft/core/BlockPos;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "block"
        },
        {
          "index": 5,
          "name": "fromPos"
        },
        {
          "index": 6,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "onRemove",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "newState"
        },
        {
          "index": 5,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "playerWillDestroy",
      "descriptor": "(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/entity/player/Player;)V",
      "javadoc": [
        "Called before the Block is set to air in the world. Called regardless of if the player's tool can actually collect this block"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "state"
        },
        {
          "index": 4,
          "name": "player"
        }
      ]
    },
    {
      "name": "rotate",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/world/level/block/state/BlockState;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "rot"
        }
      ]
    },
    {
      "name": "updateShape",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/Direction;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Lnet/minecraft/world/level/block/state/BlockState;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "facing"
        },
        {
          "index": 3,
          "name": "facingState"
        },
        {
          "index": 4,
          "name": "level"
        },
        {
          "index": 5,
          "name": "currentPos"
        },
        {
          "index": 6,
          "name": "facingPos"
        }
      ]
    },
    {
      "name": "useShapeForLightOcclusion",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    }
  ]
}