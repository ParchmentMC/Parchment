{
  "name": "net/minecraft/world/item/enchantment/Enchantment",
  "methods": [
    {
      "name": "byId",
      "descriptor": "(I)Lnet/minecraft/world/item/enchantment/Enchantment;",
      "javadoc": [
        "Gets an Enchantment from the registry, based on a numeric ID."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "id"
        }
      ]
    },
    {
      "name": "canEnchant",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Determines if this enchantment can be applied to a specific ItemStack."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "checkCompatibility",
      "descriptor": "(Lnet/minecraft/world/item/enchantment/Enchantment;)Z",
      "javadoc": [
        "Determines if the enchantment passed can be applyied together with this enchantment."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "ench"
        }
      ]
    },
    {
      "name": "doPostAttack",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V",
      "javadoc": [
        "Called whenever a mob is damaged with an item that has this enchantment on it."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "user"
        },
        {
          "index": 2,
          "name": "target"
        },
        {
          "index": 3,
          "name": "level"
        }
      ]
    },
    {
      "name": "doPostHurt",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;I)V",
      "javadoc": [
        "Whenever an entity that has this enchantment on one of its associated items is damaged this method will be called."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "user"
        },
        {
          "index": 2,
          "name": "attacker"
        },
        {
          "index": 3,
          "name": "level"
        }
      ]
    },
    {
      "name": "getDamageBonus",
      "descriptor": "(ILnet/minecraft/world/entity/MobType;)F",
      "javadoc": [
        "Calculates the additional damage that will be dealt by an item with this enchantment. This alternative to calcModifierDamage is sensitive to the targets EnumCreatureAttribute."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "creatureType"
        }
      ]
    },
    {
      "name": "getDamageProtection",
      "descriptor": "(ILnet/minecraft/world/damagesource/DamageSource;)I",
      "javadoc": [
        "Calculates the damage protection of the enchantment based on level and damage source passed."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "source"
        }
      ]
    },
    {
      "name": "getDescriptionId",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Return the name of key in translation table of this enchantment."
      ]
    },
    {
      "name": "getFullname",
      "descriptor": "(I)Lnet/minecraft/network/chat/Component;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    },
    {
      "name": "getMaxCost",
      "descriptor": "(I)I",
      "parameters": [
        {
          "index": 1,
          "name": "enchantmentLevel"
        }
      ]
    },
    {
      "name": "getMaxLevel",
      "descriptor": "()I",
      "javadoc": [
        "Returns the maximum level that the enchantment can have."
      ]
    },
    {
      "name": "getMinCost",
      "descriptor": "(I)I",
      "javadoc": [
        "Returns the minimal value of enchantability needed on the enchantment level passed."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "enchantmentLevel"
        }
      ]
    },
    {
      "name": "getMinLevel",
      "descriptor": "()I",
      "javadoc": [
        "Returns the minimum level that the enchantment can have."
      ]
    },
    {
      "name": "getRarity",
      "descriptor": "()Lnet/minecraft/world/item/enchantment/Enchantment$Rarity;",
      "javadoc": [
        "Retrieves the weight value of an Enchantment. This weight value is used within vanilla to determine how rare an enchantment is."
      ]
    },
    {
      "name": "getSlotItems",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;)Ljava/util/Map;",
      "javadoc": [
        "Gets map of all the entity's currently equipped gear that this enchantment can go on"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "livingEntity"
        }
      ]
    },
    {
      "name": "isCompatibleWith",
      "descriptor": "(Lnet/minecraft/world/item/enchantment/Enchantment;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "enchantment"
        }
      ]
    },
    {
      "name": "isDiscoverable",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if the enchantment can be applied to loot table drops."
      ]
    },
    {
      "name": "isTradeable",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if the enchantment can be sold by villagers in their trades."
      ]
    }
  ]
}