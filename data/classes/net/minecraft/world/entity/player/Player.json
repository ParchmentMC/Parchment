{
  "name": "net/minecraft/world/entity/player/Player",
  "fields": [
    {
      "name": "gameProfile",
      "descriptor": "Lcom/mojang/authlib/GameProfile;",
      "javadoc": [
        "The player's unique game profile"
      ]
    }
  ],
  "methods": [
    {
      "name": "actuallyHurt",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)V",
      "javadoc": [
        "Deals damage to the entity. This will take the armor of the entity into consideration before damaging the health bar."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "damageSrc"
        },
        {
          "index": 2,
          "name": "damageAmount"
        }
      ]
    },
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "aiStep",
      "descriptor": "()V",
      "javadoc": [
        "Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use this to react to sunlight and start to burn."
      ]
    },
    {
      "name": "attack",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Attacks for the player the targeted entity with the currently equipped item.  The equipped item has hitEntity called on it. Args: targetEntity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "targetEntity"
        }
      ]
    },
    {
      "name": "awardStat",
      "descriptor": "(Lnet/minecraft/resources/ResourceLocation;)V",
      "parameters": [
        {
          "index": 1,
          "name": "stat"
        }
      ]
    },
    {
      "name": "awardStat",
      "descriptor": "(Lnet/minecraft/stats/Stat;)V",
      "javadoc": [
        "Add a stat once"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stat"
        }
      ]
    },
    {
      "name": "awardStat",
      "descriptor": "(Lnet/minecraft/stats/Stat;I)V",
      "javadoc": [
        "Adds a value to a statistic field."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stat"
        },
        {
          "index": 2,
          "name": "amount"
        }
      ]
    },
    {
      "name": "blockActionRestricted",
      "descriptor": "(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/GameType;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "gameMode"
        }
      ]
    },
    {
      "name": "blockUsingShield",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "canEat",
      "descriptor": "(Z)Z",
      "parameters": [
        {
          "index": 1,
          "name": "ignoreHunger"
        }
      ]
    },
    {
      "name": "canHarmPlayer",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "other"
        }
      ]
    },
    {
      "name": "canTakeItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "itemstack"
        }
      ]
    },
    {
      "name": "causeFoodExhaustion",
      "descriptor": "(F)V",
      "javadoc": [
        "increases exhaustion level by supplied amount"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "exhaustion"
        }
      ]
    },
    {
      "name": "checkMovementStatistics",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Adds a value to a movement statistic field - like run, walk, swin or climb."
      ]
    },
    {
      "name": "checkRidingStatistics",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Adds a value to a mounted movement statistic field - by minecart, boat, or pig."
      ]
    },
    {
      "name": "closeContainer",
      "descriptor": "()V",
      "javadoc": [
        "set current crafting inventory back to the 2x2 square"
      ]
    },
    {
      "name": "createPlayerUUID",
      "descriptor": "(Lcom/mojang/authlib/GameProfile;)Ljava/util/UUID;",
      "javadoc": [
        "Gets a players UUID given their GameProfie"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "profile"
        }
      ]
    },
    {
      "name": "createPlayerUUID",
      "descriptor": "(Ljava/lang/String;)Ljava/util/UUID;",
      "parameters": [
        {
          "index": 0,
          "name": "username"
        }
      ]
    },
    {
      "name": "crit",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Called when the entity is dealt a critical hit."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entityHit"
        }
      ]
    },
    {
      "name": "die",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)V",
      "javadoc": [
        "Called when the mob's health reaches 0."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "cause"
        }
      ]
    },
    {
      "name": "displayClientMessage",
      "descriptor": "(Lnet/minecraft/network/chat/Component;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "chatComponent"
        },
        {
          "index": 2,
          "name": "actionBar"
        }
      ]
    },
    {
      "name": "doWaterSplashEffect",
      "descriptor": "()V",
      "javadoc": [
        "Plays the {@link #getSplashSound() splash sound}, and the {@link ParticleType#WATER_BUBBLE} and {@link ParticleType#WATER_SPLASH} particles."
      ]
    },
    {
      "name": "drop",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;Z)Lnet/minecraft/world/entity/item/ItemEntity;",
      "javadoc": [
        "Drops an item into the world."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemStack"
        },
        {
          "index": 2,
          "name": "unused"
        }
      ]
    },
    {
      "name": "drop",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;ZZ)Lnet/minecraft/world/entity/item/ItemEntity;",
      "javadoc": [
        "Creates and drops the provided item. Depending on the dropAround, it will drop teh item around the player, instead of dropping the item from where the player is pointing at. Likewise, if traceItem is true, the dropped item entity will have the thrower set as the player."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "droppedItem"
        },
        {
          "index": 2,
          "name": "dropAround"
        },
        {
          "index": 3,
          "name": "traceItem"
        }
      ]
    },
    {
      "name": "freeAt",
      "descriptor": "(Lnet/minecraft/core/BlockPos;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        }
      ]
    },
    {
      "name": "getAbsorptionAmount",
      "descriptor": "()F",
      "javadoc": [
        "Returns the amount of health added by the Absorption effect."
      ]
    },
    {
      "name": "getAttackStrengthScale",
      "descriptor": "(F)F",
      "javadoc": [
        "Returns the percentage of attack power available based on the cooldown (zero to one)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "adjustTicks"
        }
      ]
    },
    {
      "name": "getDestroySpeed",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;)F",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "getDimensionChangingDelay",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of cooldown before this entity can use a portal again."
      ]
    },
    {
      "name": "getDimensions",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "getEnderChestInventory",
      "descriptor": "()Lnet/minecraft/world/inventory/PlayerEnderChestContainer;",
      "javadoc": [
        "Returns the InventoryEnderChest of this player."
      ]
    },
    {
      "name": "getExperienceReward",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)I",
      "javadoc": [
        "Get the experience points the entity currently has."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "getFallDamageSound",
      "descriptor": "(I)Lnet/minecraft/sounds/SoundEvent;",
      "parameters": [
        {
          "index": 1,
          "name": "height"
        }
      ]
    },
    {
      "name": "getFoodData",
      "descriptor": "()Lnet/minecraft/world/food/FoodData;",
      "javadoc": [
        "Returns the player's FoodStats object."
      ]
    },
    {
      "name": "getGameProfile",
      "descriptor": "()Lcom/mojang/authlib/GameProfile;",
      "javadoc": [
        "Returns the GameProfile for this player"
      ]
    },
    {
      "name": "getHurtSound",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;",
      "parameters": [
        {
          "index": 1,
          "name": "damageSource"
        }
      ]
    },
    {
      "name": "getItemBySlot",
      "descriptor": "(Lnet/minecraft/world/entity/EquipmentSlot;)Lnet/minecraft/world/item/ItemStack;",
      "parameters": [
        {
          "index": 1,
          "name": "slot"
        }
      ]
    },
    {
      "name": "getMyRidingOffset",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y Offset of this entity."
      ]
    },
    {
      "name": "getPortalWaitTime",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of time this entity should stay in a portal before being transported."
      ]
    },
    {
      "name": "getProjectile",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/item/ItemStack;",
      "parameters": [
        {
          "index": 1,
          "name": "shootable"
        }
      ]
    },
    {
      "name": "getRopeHoldPosition",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getScoreboardName",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns a String to use as this entity's name in the scoreboard/entity selector systems"
      ]
    },
    {
      "name": "getSpeed",
      "descriptor": "()F",
      "javadoc": [
        "the movespeed used for the new AI system"
      ]
    },
    {
      "name": "getStandingEyeHeight",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        },
        {
          "index": 2,
          "name": "size"
        }
      ]
    },
    {
      "name": "getXpNeededForNextLevel",
      "descriptor": "()I",
      "javadoc": [
        "This method returns the cap amount of experience that the experience bar can hold. With each level, the experience cap on the player's experience bar is raised by 10."
      ]
    },
    {
      "name": "giveExperienceLevels",
      "descriptor": "(I)V",
      "javadoc": [
        "Add experience levels to this player."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "levels"
        }
      ]
    },
    {
      "name": "handleEntityEvent",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "id"
        }
      ]
    },
    {
      "name": "hurt",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        },
        {
          "index": 2,
          "name": "amount"
        }
      ]
    },
    {
      "name": "hurtArmor",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)V",
      "parameters": [
        {
          "index": 1,
          "name": "damageSource"
        },
        {
          "index": 2,
          "name": "damage"
        }
      ]
    },
    {
      "name": "hurtCurrentlyUsedShield",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "damage"
        }
      ]
    },
    {
      "name": "increaseScore",
      "descriptor": "(I)V",
      "javadoc": [
        "Add to player's score"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "score"
        }
      ]
    },
    {
      "name": "interactOn",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;",
      "parameters": [
        {
          "index": 1,
          "name": "entityToInteractOn"
        },
        {
          "index": 2,
          "name": "hand"
        }
      ]
    },
    {
      "name": "isAlwaysExperienceDropper",
      "descriptor": "()Z",
      "javadoc": [
        "Only use is to identify if class is an instance of player for experience dropping"
      ]
    },
    {
      "name": "isHurt",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if the player's health is not full and not zero."
      ]
    },
    {
      "name": "isImmobile",
      "descriptor": "()Z",
      "javadoc": [
        "Dead and sleeping entities cannot move"
      ]
    },
    {
      "name": "isInvulnerableTo",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)Z",
      "javadoc": [
        "Returns whether this Entity is invulnerable to the given DamageSource."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        }
      ]
    },
    {
      "name": "isLocalPlayer",
      "descriptor": "()Z",
      "javadoc": [
        "returns true if this is an EntityPlayerSP, or the logged in player."
      ]
    },
    {
      "name": "isModelPartShown",
      "descriptor": "(Lnet/minecraft/world/entity/player/PlayerModelPart;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "part"
        }
      ]
    },
    {
      "name": "isReducedDebugInfo",
      "descriptor": "()Z",
      "javadoc": [
        "Whether the \"reducedDebugInfo\" option is active for this player."
      ]
    },
    {
      "name": "isSleepingLongEnough",
      "descriptor": "()Z",
      "javadoc": [
        "Returns whether or not the player is asleep and the screen has fully faded."
      ]
    },
    {
      "name": "isSpectator",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the player is in spectator mode."
      ]
    },
    {
      "name": "jumpFromGround",
      "descriptor": "()V",
      "javadoc": [
        "Causes this entity to do an upwards motion (jumping)."
      ]
    },
    {
      "name": "killed",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "killedEntity"
        }
      ]
    },
    {
      "name": "magicCrit",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "entityHit"
        }
      ]
    },
    {
      "name": "makeStuckInBlock",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "motionMultiplier"
        }
      ]
    },
    {
      "name": "mayUseItemAt",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/Direction;Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Returns whether this player can modify the block at a certain location with the given stack.",
        "<p>",
        "The position being queried is {@code pos.offset(facing.getOpposite()))}.",
        "",
        "@return Whether this player may modify the queried location in the current world",
        "@see ItemStack#canPlaceOn(Block)",
        "@see ItemStack#canEditBlocks()",
        "@see PlayerCapabilities#allowEdit"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "facing"
        },
        {
          "index": 3,
          "name": "stack"
        }
      ]
    },
    {
      "name": "maybeBackOffFromEdge",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/MoverType;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        },
        {
          "index": 2,
          "name": "mover"
        }
      ]
    },
    {
      "name": "onEnchantmentPerformed",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;I)V",
      "parameters": [
        {
          "index": 1,
          "name": "enchantedItem"
        },
        {
          "index": 2,
          "name": "cost"
        }
      ]
    },
    {
      "name": "onUpdateAbilities",
      "descriptor": "()V",
      "javadoc": [
        "Sends the player's abilities to the server (if there is one)."
      ]
    },
    {
      "name": "openCommandBlock",
      "descriptor": "(Lnet/minecraft/world/level/block/entity/CommandBlockEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "commandBlock"
        }
      ]
    },
    {
      "name": "openHorseInventory",
      "descriptor": "(Lnet/minecraft/world/entity/animal/horse/AbstractHorse;Lnet/minecraft/world/Container;)V",
      "parameters": [
        {
          "index": 1,
          "name": "horse"
        },
        {
          "index": 2,
          "name": "inventory"
        }
      ]
    },
    {
      "name": "openItemGui",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/InteractionHand;)V",
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        },
        {
          "index": 2,
          "name": "hand"
        }
      ]
    },
    {
      "name": "openMinecartCommandBlock",
      "descriptor": "(Lnet/minecraft/world/level/BaseCommandBlock;)V",
      "parameters": [
        {
          "index": 1,
          "name": "commandBlock"
        }
      ]
    },
    {
      "name": "openStructureBlock",
      "descriptor": "(Lnet/minecraft/world/level/block/entity/StructureBlockEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "structure"
        }
      ]
    },
    {
      "name": "openTextEdit",
      "descriptor": "(Lnet/minecraft/world/level/block/entity/SignBlockEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "signTile"
        }
      ]
    },
    {
      "name": "playSound",
      "descriptor": "(Lnet/minecraft/sounds/SoundEvent;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "sound"
        },
        {
          "index": 2,
          "name": "volume"
        },
        {
          "index": 3,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "resetStat",
      "descriptor": "(Lnet/minecraft/stats/Stat;)V",
      "parameters": [
        {
          "index": 1,
          "name": "stat"
        }
      ]
    },
    {
      "name": "rideTick",
      "descriptor": "()V",
      "javadoc": [
        "Handles updating while riding another entity"
      ]
    },
    {
      "name": "sendMerchantOffers",
      "descriptor": "(ILnet/minecraft/world/item/trading/MerchantOffers;IIZZ)V",
      "parameters": [
        {
          "index": 1,
          "name": "containerId"
        },
        {
          "index": 2,
          "name": "offers"
        },
        {
          "index": 3,
          "name": "level"
        },
        {
          "index": 4,
          "name": "xp"
        }
      ]
    },
    {
      "name": "setAbsorptionAmount",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "amount"
        }
      ]
    },
    {
      "name": "setItemSlot",
      "descriptor": "(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V",
      "parameters": [
        {
          "index": 1,
          "name": "slot"
        },
        {
          "index": 2,
          "name": "stack"
        }
      ]
    },
    {
      "name": "setMainArm",
      "descriptor": "(Lnet/minecraft/world/entity/HumanoidArm;)V",
      "parameters": [
        {
          "index": 1,
          "name": "hand"
        }
      ]
    },
    {
      "name": "setReducedDebugInfo",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "reducedDebug"
        }
      ]
    },
    {
      "name": "setRemainingFireTicks",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "ticks"
        }
      ]
    },
    {
      "name": "setScore",
      "descriptor": "(I)V",
      "javadoc": [
        "Set player's score"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "score"
        }
      ]
    },
    {
      "name": "setShoulderEntityLeft",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "tag"
        }
      ]
    },
    {
      "name": "setShoulderEntityRight",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "tag"
        }
      ]
    },
    {
      "name": "startSleepInBed",
      "descriptor": "(Lnet/minecraft/core/BlockPos;)Lcom/mojang/datafixers/util/Either;",
      "parameters": [
        {
          "index": 1,
          "name": "at"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "touch",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "travel",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "travelVector"
        }
      ]
    }
  ]
}