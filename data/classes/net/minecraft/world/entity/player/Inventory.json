{
  "name": "net/minecraft/world/entity/player/Inventory",
  "methods": [
    {
      "name": "add",
      "descriptor": "(ILnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Adds the stack to the specified slot in the player's inventory. Returns {@code false} if it's not possible to place the entire stack in the inventory."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "slot"
        },
        {
          "index": 2,
          "name": "stack"
        }
      ]
    },
    {
      "name": "add",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Adds the stack to the first empty slot in the player's inventory. Returns {@code false} if it's not possible to place the entire stack in the inventory."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemStack"
        }
      ]
    },
    {
      "name": "addResource",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)I",
      "javadoc": [
        "This function stores as many items of an ItemStack as possible in a matching slot and returns the quantity of left over items."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemStack"
        }
      ]
    },
    {
      "name": "contains",
      "descriptor": "(Lnet/minecraft/tags/Tag;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "itemTag"
        }
      ]
    },
    {
      "name": "contains",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Returns true if the specified ItemStack exists in the inventory."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemStack"
        }
      ]
    },
    {
      "name": "dropAll",
      "descriptor": "()V",
      "javadoc": [
        "Drop all armor and main inventory items."
      ]
    },
    {
      "name": "findSlotMatchingItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)I",
      "javadoc": [
        "Finds the stack or an equivalent one in the main inventory"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "getArmor",
      "descriptor": "(I)Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "returns a player armor item (as itemstack) contained in specified armor slot."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "slot"
        }
      ]
    },
    {
      "name": "getContainerSize",
      "descriptor": "()I",
      "javadoc": [
        "Returns the number of slots in the inventory."
      ]
    },
    {
      "name": "getDestroySpeed",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;)F",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "getFreeSlot",
      "descriptor": "()I",
      "javadoc": [
        "Returns the first item stack that is empty."
      ]
    },
    {
      "name": "getItem",
      "descriptor": "(I)Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "Returns the stack in the given slot."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "index"
        }
      ]
    },
    {
      "name": "getSelected",
      "descriptor": "()Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "Returns the item stack currently held by the player."
      ]
    },
    {
      "name": "getSelectionSize",
      "descriptor": "()I",
      "javadoc": [
        "Get the size of the player hotbar inventory"
      ]
    },
    {
      "name": "getSlotWithRemainingSpace",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)I",
      "javadoc": [
        "Stores a stack in the player's inventory. It first tries to place it in the selected slot in the player's hotbar, then the offhand slot, then any available/empty slot in the player's inventory."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemStack"
        }
      ]
    },
    {
      "name": "hasRemainingSpaceForItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "stack1"
        },
        {
          "index": 2,
          "name": "stack2"
        }
      ]
    },
    {
      "name": "isHotbarSlot",
      "descriptor": "(I)Z",
      "parameters": [
        {
          "index": 0,
          "name": "index"
        }
      ]
    },
    {
      "name": "load",
      "descriptor": "(Lnet/minecraft/nbt/ListTag;)V",
      "javadoc": [
        "Reads from the given tag list and fills the slots in the inventory with the correct items."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "nbtTagList"
        }
      ]
    },
    {
      "name": "pickSlot",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "index"
        }
      ]
    },
    {
      "name": "removeItem",
      "descriptor": "(II)Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "Removes up to a specified number of items from an inventory slot and returns them in a new stack."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "index"
        },
        {
          "index": 2,
          "name": "count"
        }
      ]
    },
    {
      "name": "removeItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)V",
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "removeItemNoUpdate",
      "descriptor": "(I)Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "Removes a stack from the given slot and returns it."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "index"
        }
      ]
    },
    {
      "name": "replaceWith",
      "descriptor": "(Lnet/minecraft/world/entity/player/Inventory;)V",
      "javadoc": [
        "Copy the ItemStack contents from another InventoryPlayer instance"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "playerInventory"
        }
      ]
    },
    {
      "name": "save",
      "descriptor": "(Lnet/minecraft/nbt/ListTag;)Lnet/minecraft/nbt/ListTag;",
      "javadoc": [
        "Writes the inventory out as a list of compound tags. This is where the slot indices are used (+100 for armor, +80 for crafting)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "nbtTagList"
        }
      ]
    },
    {
      "name": "setChanged",
      "descriptor": "()V",
      "javadoc": [
        "For tile entities, ensures the chunk containing the tile entity is saved to disk later - the game won't think it hasn't changed and skip it."
      ]
    },
    {
      "name": "setItem",
      "descriptor": "(ILnet/minecraft/world/item/ItemStack;)V",
      "javadoc": [
        "Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "index"
        },
        {
          "index": 2,
          "name": "stack"
        }
      ]
    },
    {
      "name": "setPickedItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)V",
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "stillValid",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)Z",
      "javadoc": [
        "Don't rename this method to canInteractWith due to conflicts with Container"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "swapPaint",
      "descriptor": "(D)V",
      "parameters": [
        {
          "index": 1,
          "name": "direction"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Decrement the number of animations remaining. Only called on client side. This is used to handle the animation of receiving a block."
      ]
    }
  ]
}