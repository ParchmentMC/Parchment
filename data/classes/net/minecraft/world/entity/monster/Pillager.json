{
  "name": "net/minecraft/world/entity/monster/Pillager",
  "methods": [
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "applyRaidBuffs",
      "descriptor": "(IZ)V",
      "parameters": [
        {
          "index": 1,
          "name": "wave"
        }
      ]
    },
    {
      "name": "finalizeSpawn",
      "descriptor": "(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "difficulty"
        },
        {
          "index": 3,
          "name": "reason"
        },
        {
          "index": 4,
          "name": "spawnData"
        },
        {
          "index": 5,
          "name": "dataTag"
        }
      ]
    },
    {
      "name": "getHurtSound",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;",
      "parameters": [
        {
          "index": 1,
          "name": "damageSource"
        }
      ]
    },
    {
      "name": "getMaxSpawnClusterSize",
      "descriptor": "()I",
      "javadoc": [
        "Will return how many at most can spawn in a chunk at once."
      ]
    },
    {
      "name": "getWalkTargetValue",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "level"
        }
      ]
    },
    {
      "name": "isAlliedTo",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "javadoc": [
        "Returns whether this Entity is on the same team as the given Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "performRangedAttack",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;F)V",
      "javadoc": [
        "Attack the specified entity using a ranged attack."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "target"
        },
        {
          "index": 2,
          "name": "distanceFactor"
        }
      ]
    },
    {
      "name": "pickUpItem",
      "descriptor": "(Lnet/minecraft/world/entity/item/ItemEntity;)V",
      "javadoc": [
        "Tests if this entity should pickup a weapon or an armor. Entity drops current weapon or armor if the new one is better."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "itemEntity"
        }
      ]
    },
    {
      "name": "populateDefaultEquipmentSlots",
      "descriptor": "(Lnet/minecraft/world/DifficultyInstance;)V",
      "javadoc": [
        "Gives armor or weapon for entity based on given DifficultyInstance"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "difficulty"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "setChargingCrossbow",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "isCharging"
        }
      ]
    }
  ]
}