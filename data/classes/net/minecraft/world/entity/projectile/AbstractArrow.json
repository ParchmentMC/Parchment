{
  "name": "net/minecraft/world/entity/projectile/AbstractArrow",
  "methods": [
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "doPostHurtEffects",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "living"
        }
      ]
    },
    {
      "name": "findHitEntity",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/EntityHitResult;",
      "javadoc": [
        "Gets the EntityRayTraceResult representing the entity hit"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "startVec"
        },
        {
          "index": 2,
          "name": "endVec"
        }
      ]
    },
    {
      "name": "getDefaultHitGroundSoundEvent",
      "descriptor": "()Lnet/minecraft/sounds/SoundEvent;",
      "javadoc": [
        "The sound made when an entity is hit by this projectile"
      ]
    },
    {
      "name": "getEyeHeight",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        },
        {
          "index": 2,
          "name": "size"
        }
      ]
    },
    {
      "name": "isAttackable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if it's possible to attack this entity with an item."
      ]
    },
    {
      "name": "isCritArrow",
      "descriptor": "()Z",
      "javadoc": [
        "Whether the arrow has a stream of critical hit particles flying behind it."
      ]
    },
    {
      "name": "isNoPhysics",
      "descriptor": "()Z",
      "javadoc": [
        "Whether the arrow can noClip"
      ]
    },
    {
      "name": "lerpMotion",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Updates the entity motion clientside, called by packets from the server"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "lerpTo",
      "descriptor": "(DDDFFIZ)V",
      "javadoc": [
        "Sets a target for the client to interpolate towards over the next few ticks"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        },
        {
          "index": 7,
          "name": "yaw"
        },
        {
          "index": 8,
          "name": "pitch"
        },
        {
          "index": 9,
          "name": "posRotationIncrements"
        },
        {
          "index": 10,
          "name": "teleport"
        }
      ]
    },
    {
      "name": "move",
      "descriptor": "(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "type"
        },
        {
          "index": 2,
          "name": "pos"
        }
      ]
    },
    {
      "name": "onHitEntity",
      "descriptor": "(Lnet/minecraft/world/phys/EntityHitResult;)V",
      "javadoc": [
        "Called when the arrow hits an entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "result"
        }
      ]
    },
    {
      "name": "playerTouch",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "javadoc": [
        "Called by a player entity when they collide with an entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "setBaseDamage",
      "descriptor": "(D)V",
      "parameters": [
        {
          "index": 1,
          "name": "damage"
        }
      ]
    },
    {
      "name": "setCritArrow",
      "descriptor": "(Z)V",
      "javadoc": [
        "Whether the arrow has a stream of critical hit particles flying behind it."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "critical"
        }
      ]
    },
    {
      "name": "setKnockback",
      "descriptor": "(I)V",
      "javadoc": [
        "Sets the amount of knockback the arrow applies when it hits a mob."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "knockbackStrength"
        }
      ]
    },
    {
      "name": "setNoPhysics",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets if this arrow can noClip"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "noClip"
        }
      ]
    },
    {
      "name": "setOwner",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "setPierceLevel",
      "descriptor": "(B)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    },
    {
      "name": "setShotFromCrossbow",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets data about if this arrow entity was shot from a crossbow"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "fromCrossbow"
        }
      ]
    },
    {
      "name": "setSoundEvent",
      "descriptor": "(Lnet/minecraft/sounds/SoundEvent;)V",
      "parameters": [
        {
          "index": 1,
          "name": "sound"
        }
      ]
    },
    {
      "name": "shoot",
      "descriptor": "(DDDFF)V",
      "javadoc": [
        "Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        },
        {
          "index": 7,
          "name": "velocity"
        },
        {
          "index": 8,
          "name": "inaccuracy"
        }
      ]
    },
    {
      "name": "shotFromCrossbow",
      "descriptor": "()Z",
      "javadoc": [
        "Whether the arrow was shot from a crossbow."
      ]
    },
    {
      "name": "shouldRenderAtSqrDistance",
      "descriptor": "(D)Z",
      "javadoc": [
        "Checks if the entity is in range to render."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "distance"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    }
  ]
}