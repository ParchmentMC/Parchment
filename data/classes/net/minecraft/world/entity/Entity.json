{
  "name": "net/minecraft/world/entity/Entity",
  "methods": [
    {
      "name": "absMoveTo",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "absMoveTo",
      "descriptor": "(DDDFF)V",
      "javadoc": [
        "Sets position and rotation, clamping and wrapping params to valid values. Used by network code."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        },
        {
          "index": 7,
          "name": "yaw"
        },
        {
          "index": 8,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "addPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "passenger"
        }
      ]
    },
    {
      "name": "addTag",
      "descriptor": "(Ljava/lang/String;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "tag"
        }
      ]
    },
    {
      "name": "animateHurt",
      "descriptor": "()V",
      "javadoc": [
        "Setups the entity to do the hurt animation. Only used by packets in multiplayer."
      ]
    },
    {
      "name": "applyPistonMovementRestriction",
      "descriptor": "(Lnet/minecraft/core/Direction$Axis;D)D",
      "parameters": [
        {
          "index": 1,
          "name": "axis"
        },
        {
          "index": 2,
          "name": "distance"
        }
      ]
    },
    {
      "name": "awardKillScore",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;ILnet/minecraft/world/damagesource/DamageSource;)V",
      "parameters": [
        {
          "index": 1,
          "name": "killed"
        },
        {
          "index": 2,
          "name": "scoreValue"
        },
        {
          "index": 3,
          "name": "damageSource"
        }
      ]
    },
    {
      "name": "baseTick",
      "descriptor": "()V",
      "javadoc": [
        "Gets called every tick from main Entity class"
      ]
    },
    {
      "name": "broadcastToPlayer",
      "descriptor": "(Lnet/minecraft/server/level/ServerPlayer;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "calculateUpVector",
      "descriptor": "(FF)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "pitch"
        },
        {
          "index": 2,
          "name": "yaw"
        }
      ]
    },
    {
      "name": "calculateViewVector",
      "descriptor": "(FF)Lnet/minecraft/world/phys/Vec3;",
      "javadoc": [
        "Creates a Vec3 using the pitch and yaw of the entities rotation."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pitch"
        },
        {
          "index": 2,
          "name": "yaw"
        }
      ]
    },
    {
      "name": "canAddPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "passenger"
        }
      ]
    },
    {
      "name": "canChangeDimensions",
      "descriptor": "()Z",
      "javadoc": [
        "Returns false if this Entity can't move between dimensions. True if it can."
      ]
    },
    {
      "name": "canCollideWith",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "canEnterPose",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "canRide",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "changeDimension",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;",
      "parameters": [
        {
          "index": 1,
          "name": "server"
        }
      ]
    },
    {
      "name": "checkDespawn",
      "descriptor": "()V",
      "javadoc": [
        "Makes the entity despawn if requirements are reached"
      ]
    },
    {
      "name": "checkFallDamage",
      "descriptor": "(DZLnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/core/BlockPos;)V",
      "parameters": [
        {
          "index": 1,
          "name": "y"
        },
        {
          "index": 3,
          "name": "onGround"
        },
        {
          "index": 4,
          "name": "state"
        },
        {
          "index": 5,
          "name": "pos"
        }
      ]
    },
    {
      "name": "clearFire",
      "descriptor": "()V",
      "javadoc": [
        "Removes fire from entity."
      ]
    },
    {
      "name": "closerThan",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        },
        {
          "index": 2,
          "name": "distance"
        }
      ]
    },
    {
      "name": "collide",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;",
      "javadoc": [
        "Given a motion vector, return an updated vector that takes into account restrictions such as collisions (from all directions) and step-up from stepHeight"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "collideBoundingBox",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/level/LevelReader;Lnet/minecraft/world/phys/shapes/CollisionContext;Lnet/minecraft/util/RewindableStream;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 0,
          "name": "vec"
        },
        {
          "index": 1,
          "name": "collisionBox"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "selectionContext"
        },
        {
          "index": 4,
          "name": "potentialHits"
        }
      ]
    },
    {
      "name": "collideBoundingBoxHeuristically",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/world/level/Level;Lnet/minecraft/world/phys/shapes/CollisionContext;Lnet/minecraft/util/RewindableStream;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 0,
          "name": "entity"
        },
        {
          "index": 1,
          "name": "vec"
        },
        {
          "index": 2,
          "name": "collisionBox"
        },
        {
          "index": 3,
          "name": "level"
        },
        {
          "index": 4,
          "name": "context"
        },
        {
          "index": 5,
          "name": "potentialHits"
        }
      ]
    },
    {
      "name": "collideBoundingBoxLegacy",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/phys/AABB;Lnet/minecraft/util/RewindableStream;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 0,
          "name": "vec"
        },
        {
          "index": 1,
          "name": "collisionBox"
        },
        {
          "index": 2,
          "name": "potentialHits"
        }
      ]
    },
    {
      "name": "copyPosition",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Sets this entity's location and angles to the location and angles of the passed in entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "displayFireAnimation",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether this entity should be rendered as on fire."
      ]
    },
    {
      "name": "distanceTo",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)F",
      "javadoc": [
        "Returns the distance to the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "distanceToSqr",
      "descriptor": "(DDD)D",
      "javadoc": [
        "Gets the squared distance to the position."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "distanceToSqr",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)D",
      "javadoc": [
        "Returns the squared distance to the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "distanceToSqr",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)D",
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "doEnchantDamageEffects",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "livingEntity"
        },
        {
          "index": 2,
          "name": "entity"
        }
      ]
    },
    {
      "name": "doWaterSplashEffect",
      "descriptor": "()V",
      "javadoc": [
        "Plays the {@link #getSplashSound() splash sound}, and the {@link ParticleType#WATER_BUBBLE} and {@link ParticleType#WATER_SPLASH} particles."
      ]
    },
    {
      "name": "ejectPassengers",
      "descriptor": "()V",
      "javadoc": [
        "Dismounts all entities riding this entity from this entity."
      ]
    },
    {
      "name": "fillCrashReportCategory",
      "descriptor": "(Lnet/minecraft/CrashReportCategory;)V",
      "parameters": [
        {
          "index": 1,
          "name": "category"
        }
      ]
    },
    {
      "name": "getBlockExplosionResistance",
      "descriptor": "(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/material/FluidState;F)F",
      "javadoc": [
        "Explosion resistance of a block relative to this entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "explosion"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "blockState"
        },
        {
          "index": 5,
          "name": "fluidState"
        },
        {
          "index": 6,
          "name": "explosionPower"
        }
      ]
    },
    {
      "name": "getBoundingBoxForCulling",
      "descriptor": "()Lnet/minecraft/world/phys/AABB;",
      "javadoc": [
        "Gets the bounding box of this Entity, adjusted to take auxiliary entities into account (e.g. the tile contained by a minecart, such as a command block)."
      ]
    },
    {
      "name": "getBoundingBoxForPose",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/phys/AABB;",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "getBrightness",
      "descriptor": "()F",
      "javadoc": [
        "Gets how bright this entity is."
      ]
    },
    {
      "name": "getCollisionHorizontalEscapeVector",
      "descriptor": "(DDF)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 0,
          "name": "mountWidth"
        },
        {
          "index": 2,
          "name": "riderWidth"
        },
        {
          "index": 4,
          "name": "yaw"
        }
      ]
    },
    {
      "name": "getCommandSenderWorld",
      "descriptor": "()Lnet/minecraft/world/level/Level;",
      "javadoc": [
        "Get the world, if available. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return the overworld"
      ]
    },
    {
      "name": "getControllingPassenger",
      "descriptor": "()Lnet/minecraft/world/entity/Entity;",
      "javadoc": [
        "For vehicles, the first passenger is generally considered the controller and \"drives\" the vehicle. For example, Pigs, Horses, and Boats are generally \"steered\" by the controlling passenger."
      ]
    },
    {
      "name": "getDimensionChangingDelay",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of cooldown before this entity can use a portal again."
      ]
    },
    {
      "name": "getDimensions",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)Lnet/minecraft/world/entity/EntityDimensions;",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "getDirection",
      "descriptor": "()Lnet/minecraft/core/Direction;",
      "javadoc": [
        "Gets the horizontal facing direction of this Entity."
      ]
    },
    {
      "name": "getDismountLocationForPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "livingEntity"
        }
      ]
    },
    {
      "name": "getEncodeId",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns the string that identifies this Entity's class"
      ]
    },
    {
      "name": "getEyeHeight",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "getEyeHeight",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        },
        {
          "index": 2,
          "name": "size"
        }
      ]
    },
    {
      "name": "getEyePosition",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getInputVector",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;FF)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 0,
          "name": "relative"
        },
        {
          "index": 1,
          "name": "motionScaler"
        },
        {
          "index": 2,
          "name": "facing"
        }
      ]
    },
    {
      "name": "getLightProbePosition",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getLookAngle",
      "descriptor": "()Lnet/minecraft/world/phys/Vec3;",
      "javadoc": [
        "returns a (normalized) vector of where this entity is looking"
      ]
    },
    {
      "name": "getMaxFallDistance",
      "descriptor": "()I",
      "javadoc": [
        "The maximum height from where the entity is alowed to jump (used in pathfinder)"
      ]
    },
    {
      "name": "getMotionDirection",
      "descriptor": "()Lnet/minecraft/core/Direction;",
      "javadoc": [
        "Gets the horizontal facing direction of this Entity, adjusted to take specially-treated entity types into account."
      ]
    },
    {
      "name": "getMyRidingOffset",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y Offset of this entity."
      ]
    },
    {
      "name": "getPassengersRidingOffset",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y offset from the entity's position for any entity riding this one."
      ]
    },
    {
      "name": "getPortalWaitTime",
      "descriptor": "()I",
      "javadoc": [
        "Return the amount of time this entity should stay in a portal before being transported."
      ]
    },
    {
      "name": "getPosition",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getRandomX",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "scale"
        }
      ]
    },
    {
      "name": "getRandomZ",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "scale"
        }
      ]
    },
    {
      "name": "getRopeHoldPosition",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getRotationVector",
      "descriptor": "()Lnet/minecraft/world/phys/Vec2;",
      "javadoc": [
        "returns the Entity's pitch and yaw as a Vec2f"
      ]
    },
    {
      "name": "getScoreboardName",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns a String to use as this entity's name in the scoreboard/entity selector systems"
      ]
    },
    {
      "name": "getServer",
      "descriptor": "()Lnet/minecraft/server/MinecraftServer;",
      "javadoc": [
        "Get the Minecraft server instance"
      ]
    },
    {
      "name": "getSharedFlag",
      "descriptor": "(I)Z",
      "javadoc": [
        "Returns true if the flag is active for the entity. Known flags: 0: burning 1: sneaking 2: unused 3: sprinting 4: swimming 5: invisible 6: glowing 7: elytra flying"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "flag"
        }
      ]
    },
    {
      "name": "getUpVector",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getVehicle",
      "descriptor": "()Lnet/minecraft/world/entity/Entity;",
      "javadoc": [
        "Get entity this is riding"
      ]
    },
    {
      "name": "getViewVector",
      "descriptor": "(F)Lnet/minecraft/world/phys/Vec3;",
      "javadoc": [
        "interpolated look vector"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getViewXRot",
      "descriptor": "(F)F",
      "javadoc": [
        "Gets the current pitch of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getViewYRot",
      "descriptor": "(F)F",
      "javadoc": [
        "Gets the current yaw of the entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "getX",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "scale"
        }
      ]
    },
    {
      "name": "getY",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "scale"
        }
      ]
    },
    {
      "name": "getZ",
      "descriptor": "(D)D",
      "parameters": [
        {
          "index": 1,
          "name": "scale"
        }
      ]
    },
    {
      "name": "handleEntityEvent",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "id"
        }
      ]
    },
    {
      "name": "handleInsidePortal",
      "descriptor": "(Lnet/minecraft/core/BlockPos;)V",
      "javadoc": [
        "Marks the entity as being inside a portal, activating teleportation logic in onEntityUpdate() in the following tick(s)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        }
      ]
    },
    {
      "name": "hasIndirectPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "hasPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "hasPermissions",
      "descriptor": "(I)Z",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    },
    {
      "name": "hurt",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        },
        {
          "index": 2,
          "name": "amount"
        }
      ]
    },
    {
      "name": "interact",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        },
        {
          "index": 2,
          "name": "hand"
        }
      ]
    },
    {
      "name": "interactAt",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;",
      "javadoc": [
        "Applies the given player interaction to this Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        },
        {
          "index": 2,
          "name": "vec"
        },
        {
          "index": 3,
          "name": "hand"
        }
      ]
    },
    {
      "name": "is",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "javadoc": [
        "Returns true if Entity argument is equal to this Entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "isAlive",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the entity has not been {@link #removed}."
      ]
    },
    {
      "name": "isAlliedTo",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "javadoc": [
        "Returns whether this Entity is on the same team as the given Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "isAlliedTo",
      "descriptor": "(Lnet/minecraft/world/scores/Team;)Z",
      "javadoc": [
        "Returns whether this Entity is on the given scoreboard team."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "team"
        }
      ]
    },
    {
      "name": "isAttackable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if it's possible to attack this entity with an item."
      ]
    },
    {
      "name": "isEyeInFluid",
      "descriptor": "(Lnet/minecraft/tags/Tag;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "tag"
        }
      ]
    },
    {
      "name": "isFree",
      "descriptor": "(DDD)Z",
      "javadoc": [
        "Checks if the offset position from the entity's current position is inside of a liquid."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "isFree",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)Z",
      "javadoc": [
        "Determines if a liquid is present within the specified AxisAlignedBB."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "bb"
        }
      ]
    },
    {
      "name": "isIgnoringBlockTriggers",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether this entity should NOT trigger a pressure plate or a tripwire."
      ]
    },
    {
      "name": "isInWall",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is inside of an opaque block"
      ]
    },
    {
      "name": "isInWater",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is inside water (if inWater field is true as a result of handleWaterMovement() returning true)"
      ]
    },
    {
      "name": "isInWaterOrRain",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if this entity is either in water or on an open air block in rain (used in wolves)."
      ]
    },
    {
      "name": "isInvisibleTo",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)Z",
      "javadoc": [
        "Only used by renderer in EntityLivingBase subclasses.",
        "Determines if an entity is visible or not to a specific player, if the entity is normally invisible.",
        "For EntityLivingBase subclasses, returning false when invisible will render the entity semi-transparent."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "isInvulnerableTo",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)Z",
      "javadoc": [
        "Returns whether this Entity is invulnerable to the given DamageSource."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        }
      ]
    },
    {
      "name": "isOnFire",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the entity is on fire. Used by render to add the fire effect on rendering."
      ]
    },
    {
      "name": "isPassengerOfSameVehicle",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "isPickable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if other Entities should be prevented from moving through this Entity."
      ]
    },
    {
      "name": "isPushable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should push and be pushed by other entities when colliding."
      ]
    },
    {
      "name": "isSilent",
      "descriptor": "()Z",
      "javadoc": [
        "@return True if this entity will not play sounds"
      ]
    },
    {
      "name": "isSpectator",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the player is in spectator mode."
      ]
    },
    {
      "name": "isSprinting",
      "descriptor": "()Z",
      "javadoc": [
        "Get if the Entity is sprinting."
      ]
    },
    {
      "name": "isVehicle",
      "descriptor": "()Z",
      "javadoc": [
        "If at least 1 entity is riding this one"
      ]
    },
    {
      "name": "kill",
      "descriptor": "()V",
      "javadoc": [
        "Called by the /kill command."
      ]
    },
    {
      "name": "killed",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LivingEntity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "killedEntity"
        }
      ]
    },
    {
      "name": "lavaHurt",
      "descriptor": "()V",
      "javadoc": [
        "Called whenever the entity is walking inside of lava."
      ]
    },
    {
      "name": "lerpHeadTo",
      "descriptor": "(FI)V",
      "parameters": [
        {
          "index": 1,
          "name": "yaw"
        },
        {
          "index": 2,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "lerpMotion",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Updates the entity motion clientside, called by packets from the server"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "lerpTo",
      "descriptor": "(DDDFFIZ)V",
      "javadoc": [
        "Sets a target for the client to interpolate towards over the next few ticks"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        },
        {
          "index": 7,
          "name": "yaw"
        },
        {
          "index": 8,
          "name": "pitch"
        },
        {
          "index": 9,
          "name": "posRotationIncrements"
        },
        {
          "index": 10,
          "name": "teleport"
        }
      ]
    },
    {
      "name": "limitPistonMovement",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        }
      ]
    },
    {
      "name": "load",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "Reads the entity from NBT (calls an abstract helper method to read specialized data)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "lookAt",
      "descriptor": "(Lnet/minecraft/commands/arguments/EntityAnchorArgument$Anchor;Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "anchor"
        },
        {
          "index": 2,
          "name": "target"
        }
      ]
    },
    {
      "name": "makeStuckInBlock",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "motionMultiplier"
        }
      ]
    },
    {
      "name": "markHurt",
      "descriptor": "()V",
      "javadoc": [
        "Marks this entity's velocity as changed, so that it can be re-synced with the client later"
      ]
    },
    {
      "name": "maybeBackOffFromEdge",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;Lnet/minecraft/world/entity/MoverType;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        },
        {
          "index": 2,
          "name": "mover"
        }
      ]
    },
    {
      "name": "mirror",
      "descriptor": "(Lnet/minecraft/world/level/block/Mirror;)F",
      "javadoc": [
        "Transforms the entity's current yaw with the given Mirror and returns it. This does not have a side-effect."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "transformMirror"
        }
      ]
    },
    {
      "name": "move",
      "descriptor": "(Lnet/minecraft/world/entity/MoverType;Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "type"
        },
        {
          "index": 2,
          "name": "pos"
        }
      ]
    },
    {
      "name": "moveRelative",
      "descriptor": "(FLnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "amount"
        },
        {
          "index": 2,
          "name": "relative"
        }
      ]
    },
    {
      "name": "moveTo",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "moveTo",
      "descriptor": "(DDDFF)V",
      "javadoc": [
        "Sets the location and Yaw/Pitch of an entity in the world"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        },
        {
          "index": 7,
          "name": "yaw"
        },
        {
          "index": 8,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "moveTo",
      "descriptor": "(Lnet/minecraft/core/BlockPos;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "rotationYaw"
        },
        {
          "index": 3,
          "name": "rotationPitch"
        }
      ]
    },
    {
      "name": "moveTo",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "moveTowardsClosestSpace",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "newDoubleList",
      "descriptor": "([D)Lnet/minecraft/nbt/ListTag;",
      "javadoc": [
        "creates a NBT list from the array of doubles passed to this function"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "numbers"
        }
      ]
    },
    {
      "name": "newFloatList",
      "descriptor": "([F)Lnet/minecraft/nbt/ListTag;",
      "javadoc": [
        "Returns a new NBTTagList filled with the specified floats"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "numbers"
        }
      ]
    },
    {
      "name": "onAboveBubbleCol",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "downwards"
        }
      ]
    },
    {
      "name": "onInsideBlock",
      "descriptor": "(Lnet/minecraft/world/level/block/state/BlockState;)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "onInsideBubbleColumn",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "downwards"
        }
      ]
    },
    {
      "name": "onPassengerTurned",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Applies this entity's orientation (pitch/yaw) to another entity. Used to update passenger orientation."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entityToUpdate"
        }
      ]
    },
    {
      "name": "onSyncedDataUpdated",
      "descriptor": "(Lnet/minecraft/network/syncher/EntityDataAccessor;)V",
      "parameters": [
        {
          "index": 1,
          "name": "key"
        }
      ]
    },
    {
      "name": "onlyOpCanSetNbt",
      "descriptor": "()Z",
      "javadoc": [
        "Checks if players can use this entity to access operator (permission level 2) commands either directly or indirectly, such as give or setblock. A similar method exists for entities at {@link net.minecraft.tileentity.TileEntity#onlyOpsCanSetNbt()}.<p>For example, {@link net.minecraft.entity.item.EntityMinecartCommandBlock#ignoreItemEntityData() command block minecarts} and {@link net.minecraft.entity.item.EntityMinecartMobSpawner#ignoreItemEntityData() mob spawner minecarts} (spawning command block minecarts or drops) are considered accessible.</p>@return true if this entity offers ways for unauthorized players to use restricted commands"
      ]
    },
    {
      "name": "outOfWorld",
      "descriptor": "()V",
      "javadoc": [
        "sets the dead flag. Used when you fall off the bottom of the world."
      ]
    },
    {
      "name": "pick",
      "descriptor": "(DFZ)Lnet/minecraft/world/phys/HitResult;",
      "parameters": [
        {
          "index": 1,
          "name": "rayTraceDistance"
        },
        {
          "index": 3,
          "name": "partialTicks"
        },
        {
          "index": 4,
          "name": "rayTraceFluids"
        }
      ]
    },
    {
      "name": "playSound",
      "descriptor": "(Lnet/minecraft/sounds/SoundEvent;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "sound"
        },
        {
          "index": 2,
          "name": "volume"
        },
        {
          "index": 3,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "playStepSound",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "block"
        }
      ]
    },
    {
      "name": "playSwimSound",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "volume"
        }
      ]
    },
    {
      "name": "playerTouch",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "javadoc": [
        "Called by a player entity when they collide with an entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "positionRider",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "passenger"
        }
      ]
    },
    {
      "name": "positionRider",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;Lnet/minecraft/world/entity/Entity$MoveFunction;)V",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        },
        {
          "index": 2,
          "name": "callback"
        }
      ]
    },
    {
      "name": "processPortalCooldown",
      "descriptor": "()V",
      "javadoc": [
        "Decrements the counter for the remaining time until the entity may use a portal again."
      ]
    },
    {
      "name": "push",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Adds to the current velocity of the entity, and sets {@link #isAirBorne} to true."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "push",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Applies a velocity to the entities, to push them away from eachother."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "reapplyPosition",
      "descriptor": "()V",
      "javadoc": [
        "Recomputes this entity's bounding box so that it is positioned at this entity's X/Y/Z."
      ]
    },
    {
      "name": "removeAction",
      "descriptor": "(Lnet/minecraft/network/chat/Component;)Lnet/minecraft/network/chat/Component;",
      "parameters": [
        {
          "index": 0,
          "name": "name"
        }
      ]
    },
    {
      "name": "removePassenger",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "passenger"
        }
      ]
    },
    {
      "name": "removeTag",
      "descriptor": "(Ljava/lang/String;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "tag"
        }
      ]
    },
    {
      "name": "restoreFrom",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "javadoc": [
        "Prepares this entity in new dimension by copying NBT data from entity in old dimension"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "rideTick",
      "descriptor": "()V",
      "javadoc": [
        "Handles updating while riding another entity"
      ]
    },
    {
      "name": "rotate",
      "descriptor": "(Lnet/minecraft/world/level/block/Rotation;)F",
      "javadoc": [
        "Transforms the entity's current yaw with the given Rotation and returns it. This does not have a side-effect."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "transformRotation"
        }
      ]
    },
    {
      "name": "save",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)Z",
      "javadoc": [
        "Writes this entity to NBT, unless it has been removed or it is a passenger. Also writes this entity's passengers, and the entity type ID (so the produced NBT is sufficient to recreate the entity).",
        "To always write the entity, use {@link #writeWithoutTypeId}.",
        "",
        "@return True if the entity was written (and the passed compound should be saved)\" false if the entity was not written."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "saveAsPassenger",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)Z",
      "javadoc": [
        "Writes this entity to NBT, unless it has been removed. Also writes this entity's passengers, and the entity type ID (so the produced NBT is sufficient to recreate the entity).",
        "",
        "Generally, {@link #writeUnlessPassenger} or {@link #writeWithoutTypeId} should be used instead of this method.",
        "",
        "@return True if the entity was written (and the passed compound should be saved)\" false if the entity was not written."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "saveWithoutId",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/nbt/CompoundTag;",
      "javadoc": [
        "Writes this entity, including passengers, to NBT, regardless as to whether or not it is removed or a passenger. Does <b>not</b> include the entity's type ID, so the NBT is insufficient to recreate the entity using {@link AnvilChunkLoader#readWorldEntity}. Use {@link #writeUnlessPassenger} for that purpose."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "sendMessage",
      "descriptor": "(Lnet/minecraft/network/chat/Component;Ljava/util/UUID;)V",
      "javadoc": [
        "Send a chat message to the CommandSender"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "component"
        },
        {
          "index": 2,
          "name": "senderUUID"
        }
      ]
    },
    {
      "name": "setAirSupply",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "air"
        }
      ]
    },
    {
      "name": "setBoundingBox",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)V",
      "parameters": [
        {
          "index": 1,
          "name": "bb"
        }
      ]
    },
    {
      "name": "setCustomName",
      "descriptor": "(Lnet/minecraft/network/chat/Component;)V",
      "parameters": [
        {
          "index": 1,
          "name": "name"
        }
      ]
    },
    {
      "name": "setCustomNameVisible",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "alwaysRenderNameTag"
        }
      ]
    },
    {
      "name": "setDeltaMovement",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "setDeltaMovement",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "motion"
        }
      ]
    },
    {
      "name": "setId",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "id"
        }
      ]
    },
    {
      "name": "setInvisible",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "invisible"
        }
      ]
    },
    {
      "name": "setInvulnerable",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets whether this Entity is invulnerable."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "isInvulnerable"
        }
      ]
    },
    {
      "name": "setItemSlot",
      "descriptor": "(Lnet/minecraft/world/entity/EquipmentSlot;Lnet/minecraft/world/item/ItemStack;)V",
      "parameters": [
        {
          "index": 1,
          "name": "slot"
        },
        {
          "index": 2,
          "name": "stack"
        }
      ]
    },
    {
      "name": "setNoGravity",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "noGravity"
        }
      ]
    },
    {
      "name": "setOnGround",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "grounded"
        }
      ]
    },
    {
      "name": "setPacketCoordinates",
      "descriptor": "(DDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "setPos",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Sets the x,y,z of the entity from the given parameters. Also seems to set up a bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "setPosRaw",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Directly updates the {@link #posX}, {@link posY}, and {@link posZ} fields, without performing any collision checks, updating the bounding box position, or sending any packets. In general, this is not what you want and {@link #setPosition} is better, as that handles the bounding box."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "setPose",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        }
      ]
    },
    {
      "name": "setRemainingFireTicks",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "ticks"
        }
      ]
    },
    {
      "name": "setRot",
      "descriptor": "(FF)V",
      "javadoc": [
        "Sets the rotation of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "yaw"
        },
        {
          "index": 2,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "setSecondsOnFire",
      "descriptor": "(I)V",
      "javadoc": [
        "Sets entity to burn for x amount of seconds, cannot lower amount of existing fire."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "seconds"
        }
      ]
    },
    {
      "name": "setSharedFlag",
      "descriptor": "(IZ)V",
      "javadoc": [
        "Enable or disable a entity flag, see getEntityFlag to read the know flags."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "flag"
        },
        {
          "index": 2,
          "name": "set"
        }
      ]
    },
    {
      "name": "setShiftKeyDown",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "keyDown"
        }
      ]
    },
    {
      "name": "setSilent",
      "descriptor": "(Z)V",
      "javadoc": [
        "When set to true the entity will not play sounds."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "isSilent"
        }
      ]
    },
    {
      "name": "setSprinting",
      "descriptor": "(Z)V",
      "javadoc": [
        "Set sprinting switch for Entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "sprinting"
        }
      ]
    },
    {
      "name": "setSwimming",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "swimming"
        }
      ]
    },
    {
      "name": "setUUID",
      "descriptor": "(Ljava/util/UUID;)V",
      "parameters": [
        {
          "index": 1,
          "name": "uniqueId"
        }
      ]
    },
    {
      "name": "setViewScale",
      "descriptor": "(D)V",
      "parameters": [
        {
          "index": 0,
          "name": "renderDistWeight"
        }
      ]
    },
    {
      "name": "setYBodyRot",
      "descriptor": "(F)V",
      "javadoc": [
        "Set the render yaw offset"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "offset"
        }
      ]
    },
    {
      "name": "setYHeadRot",
      "descriptor": "(F)V",
      "javadoc": [
        "Sets the head's yaw rotation of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "rotation"
        }
      ]
    },
    {
      "name": "shouldBlockExplode",
      "descriptor": "(Lnet/minecraft/world/level/Explosion;Lnet/minecraft/world/level/BlockGetter;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;F)Z",
      "parameters": [
        {
          "index": 1,
          "name": "explosion"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "blockState"
        },
        {
          "index": 5,
          "name": "explosionPower"
        }
      ]
    },
    {
      "name": "shouldRender",
      "descriptor": "(DDD)Z",
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "shouldRenderAtSqrDistance",
      "descriptor": "(D)Z",
      "javadoc": [
        "Checks if the entity is in range to render."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "distance"
        }
      ]
    },
    {
      "name": "skipAttackInteraction",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "javadoc": [
        "Called when a player attacks an entity. If this returns true the attack will not happen."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "spawnAtLocation",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Lnet/minecraft/world/entity/item/ItemEntity;",
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "spawnAtLocation",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;F)Lnet/minecraft/world/entity/item/ItemEntity;",
      "javadoc": [
        "Drops an item at the position of the entity."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        },
        {
          "index": 2,
          "name": "offsetY"
        }
      ]
    },
    {
      "name": "spawnAtLocation",
      "descriptor": "(Lnet/minecraft/world/level/ItemLike;)Lnet/minecraft/world/entity/item/ItemEntity;",
      "parameters": [
        {
          "index": 1,
          "name": "item"
        }
      ]
    },
    {
      "name": "spawnAtLocation",
      "descriptor": "(Lnet/minecraft/world/level/ItemLike;I)Lnet/minecraft/world/entity/item/ItemEntity;",
      "parameters": [
        {
          "index": 1,
          "name": "item"
        },
        {
          "index": 2,
          "name": "offset"
        }
      ]
    },
    {
      "name": "startRiding",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "startRiding",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;Z)Z",
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        },
        {
          "index": 2,
          "name": "force"
        }
      ]
    },
    {
      "name": "startSeenByPlayer",
      "descriptor": "(Lnet/minecraft/server/level/ServerPlayer;)V",
      "javadoc": [
        "Add the given player to the list of players tracking this entity. For instance, a player may track a boss in order to view its associated boss bar."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "stopRiding",
      "descriptor": "()V",
      "javadoc": [
        "Dismounts this entity from the entity it is riding."
      ]
    },
    {
      "name": "stopSeenByPlayer",
      "descriptor": "(Lnet/minecraft/server/level/ServerPlayer;)V",
      "javadoc": [
        "Removes the given player from the list of players tracking this entity. See {@link Entity#addTrackingPlayer} for more information on tracking."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "teleportTo",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Sets the position of the entity and updates the 'last' variables"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "teleportToWithTicket",
      "descriptor": "(DDD)V",
      "javadoc": [
        "Teleports the entity, forcing the destination to stay loaded for a short time"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x"
        },
        {
          "index": 3,
          "name": "y"
        },
        {
          "index": 5,
          "name": "z"
        }
      ]
    },
    {
      "name": "thunderHit",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/LightningBolt;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "lightning"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "turn",
      "descriptor": "(DD)V",
      "parameters": [
        {
          "index": 1,
          "name": "yaw"
        },
        {
          "index": 3,
          "name": "pitch"
        }
      ]
    },
    {
      "name": "updateFluidHeightAndDoFluidPushing",
      "descriptor": "(Lnet/minecraft/tags/Tag;D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "fluidTag"
        },
        {
          "index": 2,
          "name": "motionScale"
        }
      ]
    }
  ]
}