{
  "name": "net/minecraft/world/entity/item/ItemEntity",
  "methods": [
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "areMergable",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "stack1"
        },
        {
          "index": 1,
          "name": "stack2"
        }
      ]
    },
    {
      "name": "changeDimension",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;)Lnet/minecraft/world/entity/Entity;",
      "parameters": [
        {
          "index": 1,
          "name": "server"
        }
      ]
    },
    {
      "name": "getItem",
      "descriptor": "()Lnet/minecraft/world/item/ItemStack;",
      "javadoc": [
        "Gets the item that this entity represents."
      ]
    },
    {
      "name": "getSpin",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 1,
          "name": "partialTicks"
        }
      ]
    },
    {
      "name": "hurt",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        },
        {
          "index": 2,
          "name": "amount"
        }
      ]
    },
    {
      "name": "isAttackable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if it's possible to attack this entity with an item."
      ]
    },
    {
      "name": "merge",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;Lnet/minecraft/world/item/ItemStack;I)Lnet/minecraft/world/item/ItemStack;",
      "parameters": [
        {
          "index": 0,
          "name": "stack1"
        },
        {
          "index": 1,
          "name": "stack2"
        }
      ]
    },
    {
      "name": "mergeWithNeighbours",
      "descriptor": "()V",
      "javadoc": [
        "Looks for other itemstacks nearby and tries to stack them together"
      ]
    },
    {
      "name": "onSyncedDataUpdated",
      "descriptor": "(Lnet/minecraft/network/syncher/EntityDataAccessor;)V",
      "parameters": [
        {
          "index": 1,
          "name": "key"
        }
      ]
    },
    {
      "name": "playerTouch",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "javadoc": [
        "Called by a player entity when they collide with an entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "entity"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "setItem",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)V",
      "javadoc": [
        "Sets the item that this entity represents."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "setOwner",
      "descriptor": "(Ljava/util/UUID;)V",
      "parameters": [
        {
          "index": 1,
          "name": "ownerId"
        }
      ]
    },
    {
      "name": "setPickUpDelay",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "ticks"
        }
      ]
    },
    {
      "name": "setThrower",
      "descriptor": "(Ljava/util/UUID;)V",
      "parameters": [
        {
          "index": 1,
          "name": "throwerId"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    }
  ]
}