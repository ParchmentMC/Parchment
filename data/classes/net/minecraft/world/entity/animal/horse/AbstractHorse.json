{
  "name": "net/minecraft/world/entity/animal/horse/AbstractHorse",
  "fields": [
    {
      "name": "gallopSoundCounter",
      "descriptor": "I",
      "javadoc": [
        "Used to determine the sound that the horse should make when it steps"
      ]
    },
    {
      "name": "temper",
      "descriptor": "I",
      "javadoc": [
        "The higher this value, the more likely the horse is to be tamed next time a player rides it."
      ]
    }
  ],
  "methods": [
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "aiStep",
      "descriptor": "()V",
      "javadoc": [
        "Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use this to react to sunlight and start to burn."
      ]
    },
    {
      "name": "calculateFallDamage",
      "descriptor": "(FF)I",
      "parameters": [
        {
          "index": 1,
          "name": "distance"
        },
        {
          "index": 2,
          "name": "damageMultiplier"
        }
      ]
    },
    {
      "name": "canBeControlledByRider",
      "descriptor": "()Z",
      "javadoc": [
        "returns true if all the conditions for steering the entity are met. For pigs, this is true if it is being ridden by a player and the player is holding a carrot-on-a-stick"
      ]
    },
    {
      "name": "canMate",
      "descriptor": "(Lnet/minecraft/world/entity/animal/Animal;)Z",
      "javadoc": [
        "Returns true if the mob is currently able to mate with the specified mob."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "otherAnimal"
        }
      ]
    },
    {
      "name": "canParent",
      "descriptor": "()Z",
      "javadoc": [
        "Return true if the horse entity ready to mate. (no rider, not riding, tame, adult, not steril...)"
      ]
    },
    {
      "name": "containerChanged",
      "descriptor": "(Lnet/minecraft/world/Container;)V",
      "javadoc": [
        "Called by InventoryBasic.onInventoryChanged() on a array that is never filled."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "invBasic"
        }
      ]
    },
    {
      "name": "doPlayerRide",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "finalizeSpawn",
      "descriptor": "(Lnet/minecraft/world/level/ServerLevelAccessor;Lnet/minecraft/world/DifficultyInstance;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/world/entity/SpawnGroupData;Lnet/minecraft/nbt/CompoundTag;)Lnet/minecraft/world/entity/SpawnGroupData;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "difficulty"
        },
        {
          "index": 3,
          "name": "reason"
        },
        {
          "index": 4,
          "name": "spawnData"
        },
        {
          "index": 5,
          "name": "dataTag"
        }
      ]
    },
    {
      "name": "generateRandomJumpStrength",
      "descriptor": "()D",
      "javadoc": [
        "Returns randomized jump strength"
      ]
    },
    {
      "name": "generateRandomMaxHealth",
      "descriptor": "()F",
      "javadoc": [
        "Returns randomized max health"
      ]
    },
    {
      "name": "generateRandomSpeed",
      "descriptor": "()D",
      "javadoc": [
        "Returns randomized movement speed"
      ]
    },
    {
      "name": "getAmbientSoundInterval",
      "descriptor": "()I",
      "javadoc": [
        "Get number of ticks, at least during which the living entity will be silent."
      ]
    },
    {
      "name": "getControllingPassenger",
      "descriptor": "()Lnet/minecraft/world/entity/Entity;",
      "javadoc": [
        "For vehicles, the first passenger is generally considered the controller and \"drives\" the vehicle. For example, Pigs, Horses, and Boats are generally \"steered\" by the controlling passenger."
      ]
    },
    {
      "name": "getDismountLocationForPassenger",
      "descriptor": "(Lnet/minecraft/world/entity/LivingEntity;)Lnet/minecraft/world/phys/Vec3;",
      "parameters": [
        {
          "index": 1,
          "name": "livingEntity"
        }
      ]
    },
    {
      "name": "getHurtSound",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;)Lnet/minecraft/sounds/SoundEvent;",
      "parameters": [
        {
          "index": 1,
          "name": "damageSource"
        }
      ]
    },
    {
      "name": "getMaxSpawnClusterSize",
      "descriptor": "()I",
      "javadoc": [
        "Will return how many at most can spawn in a chunk at once."
      ]
    },
    {
      "name": "getSoundVolume",
      "descriptor": "()F",
      "javadoc": [
        "Returns the volume for the sounds this mob makes."
      ]
    },
    {
      "name": "getStandingEyeHeight",
      "descriptor": "(Lnet/minecraft/world/entity/Pose;Lnet/minecraft/world/entity/EntityDimensions;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pose"
        },
        {
          "index": 2,
          "name": "size"
        }
      ]
    },
    {
      "name": "handleEating",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/item/ItemStack;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        },
        {
          "index": 2,
          "name": "stack"
        }
      ]
    },
    {
      "name": "handleEntityEvent",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "id"
        }
      ]
    },
    {
      "name": "handleStartJump",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "jumpPower"
        }
      ]
    },
    {
      "name": "isArmor",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "isFood",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on the animal type)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "isImmobile",
      "descriptor": "()Z",
      "javadoc": [
        "Dead and sleeping entities cannot move"
      ]
    },
    {
      "name": "isPushable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should push and be pushed by other entities when colliding."
      ]
    },
    {
      "name": "onClimbable",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should move as if it were on a ladder (either because it's actually on a ladder, or for AI reasons)"
      ]
    },
    {
      "name": "onLeashDistance",
      "descriptor": "(F)V",
      "parameters": [
        {
          "index": 1,
          "name": "distance"
        }
      ]
    },
    {
      "name": "onPlayerJump",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "jumpPower"
        }
      ]
    },
    {
      "name": "openInventory",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "parameters": [
        {
          "index": 1,
          "name": "playerEntity"
        }
      ]
    },
    {
      "name": "playStepSound",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "block"
        }
      ]
    },
    {
      "name": "positionRider",
      "descriptor": "(Lnet/minecraft/world/entity/Entity;)V",
      "parameters": [
        {
          "index": 1,
          "name": "passenger"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "setBred",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "breeding"
        }
      ]
    },
    {
      "name": "setIsJumping",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "jumping"
        }
      ]
    },
    {
      "name": "setOwnerUUID",
      "descriptor": "(Ljava/util/UUID;)V",
      "parameters": [
        {
          "index": 1,
          "name": "uniqueId"
        }
      ]
    },
    {
      "name": "setStanding",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "rearing"
        }
      ]
    },
    {
      "name": "setTamed",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "tamed"
        }
      ]
    },
    {
      "name": "setTemper",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "temper"
        }
      ]
    },
    {
      "name": "spawnTamingParticles",
      "descriptor": "(Z)V",
      "javadoc": [
        "Spawns particles for the horse entity. par1 tells whether to spawn hearts. If it is false, it spawns smoke.\""
      ]
    },
    {
      "name": "tameWithName",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "tick",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "travel",
      "descriptor": "(Lnet/minecraft/world/phys/Vec3;)V",
      "parameters": [
        {
          "index": 1,
          "name": "travelVector"
        }
      ]
    }
  ]
}