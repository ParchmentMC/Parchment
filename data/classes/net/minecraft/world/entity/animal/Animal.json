{
  "name": "net/minecraft/world/entity/animal/Animal",
  "methods": [
    {
      "name": "addAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "aiStep",
      "descriptor": "()V",
      "javadoc": [
        "Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use this to react to sunlight and start to burn."
      ]
    },
    {
      "name": "canMate",
      "descriptor": "(Lnet/minecraft/world/entity/animal/Animal;)Z",
      "javadoc": [
        "Returns true if the mob is currently able to mate with the specified mob."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "otherAnimal"
        }
      ]
    },
    {
      "name": "checkAnimalSpawnRules",
      "descriptor": "(Lnet/minecraft/world/entity/EntityType;Lnet/minecraft/world/level/LevelAccessor;Lnet/minecraft/world/entity/MobSpawnType;Lnet/minecraft/core/BlockPos;Ljava/util/Random;)Z",
      "javadoc": [
        "Static predicate for determining whether or not an animal can spawn at the provided location."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "animal",
          "javadoc": "The animal entity to be spawned"
        },
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "reason"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "random"
        }
      ]
    },
    {
      "name": "getAmbientSoundInterval",
      "descriptor": "()I",
      "javadoc": [
        "Get number of ticks, at least during which the living entity will be silent."
      ]
    },
    {
      "name": "getExperienceReward",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)I",
      "javadoc": [
        "Get the experience points the entity currently has."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "getMyRidingOffset",
      "descriptor": "()D",
      "javadoc": [
        "Returns the Y Offset of this entity."
      ]
    },
    {
      "name": "getWalkTargetValue",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/LevelReader;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "level"
        }
      ]
    },
    {
      "name": "handleEntityEvent",
      "descriptor": "(B)V",
      "javadoc": [
        "Handler for {@link World#setEntityState}"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "id"
        }
      ]
    },
    {
      "name": "hurt",
      "descriptor": "(Lnet/minecraft/world/damagesource/DamageSource;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "source"
        },
        {
          "index": 2,
          "name": "amount"
        }
      ]
    },
    {
      "name": "isFood",
      "descriptor": "(Lnet/minecraft/world/item/ItemStack;)Z",
      "javadoc": [
        "Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on the animal type)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "stack"
        }
      ]
    },
    {
      "name": "isInLove",
      "descriptor": "()Z",
      "javadoc": [
        "Returns if the entity is currently in 'love mode'."
      ]
    },
    {
      "name": "mobInteract",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;Lnet/minecraft/world/InteractionHand;)Lnet/minecraft/world/InteractionResult;",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        },
        {
          "index": 2,
          "name": "hand"
        }
      ]
    },
    {
      "name": "readAdditionalSaveData",
      "descriptor": "(Lnet/minecraft/nbt/CompoundTag;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "compound"
        }
      ]
    },
    {
      "name": "removeWhenFarAway",
      "descriptor": "(D)Z",
      "parameters": [
        {
          "index": 1,
          "name": "distanceToClosestPlayer"
        }
      ]
    },
    {
      "name": "setInLove",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)V",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "setInLoveTime",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "ticks"
        }
      ]
    },
    {
      "name": "spawnChildFromBreeding",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/world/entity/animal/Animal;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    }
  ]
}