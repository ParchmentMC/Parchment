{
  "name": "net/minecraft/client/multiplayer/ClientPacketListener",
  "fields": [
    {
      "name": "callbackScreen",
      "descriptor": "Lnet/minecraft/client/gui/screens/Screen;",
      "javadoc": [
        "Seems to be either null (integrated server) or an instance of either GuiMultiplayer (when connecting to a server) or GuiScreenReamlsTOS (when connecting to MCO server)"
      ]
    },
    {
      "name": "connection",
      "descriptor": "Lnet/minecraft/network/Connection;",
      "javadoc": [
        "The NetworkManager instance used to communicate with the server, used to respond to various packets (primarilly movement and plugin channel related ones) and check the status of the network connection externally"
      ]
    },
    {
      "name": "level",
      "descriptor": "Lnet/minecraft/client/multiplayer/ClientLevel;",
      "javadoc": [
        "Reference to the current ClientWorld instance, which many handler methods operate on"
      ]
    },
    {
      "name": "minecraft",
      "descriptor": "Lnet/minecraft/client/Minecraft;",
      "javadoc": [
        "Reference to the Minecraft instance, which many handler methods operate on"
      ]
    },
    {
      "name": "playerInfoMap",
      "descriptor": "Ljava/util/Map;",
      "javadoc": [
        "A mapping from player names to their respective GuiPlayerInfo (specifies the clients response time to the server)"
      ]
    },
    {
      "name": "random",
      "descriptor": "Ljava/util/Random;",
      "javadoc": [
        "Just an ordinary random number generator, used to randomize audio pitch of item/orb pickup and randomize both particlespawn offset and velocity"
      ]
    },
    {
      "name": "started",
      "descriptor": "Z",
      "javadoc": [
        "True if the client has finished downloading terrain and may spawn. Set upon receipt of S08PacketPlayerPosLook, reset upon respawning"
      ]
    }
  ],
  "methods": [
    {
      "name": "cleanup",
      "descriptor": "()V",
      "javadoc": [
        "Clears the WorldClient instance associated with this NetHandlerPlayClient"
      ]
    },
    {
      "name": "downloadCallback",
      "descriptor": "(Ljava/util/concurrent/CompletableFuture;)V",
      "parameters": [
        {
          "index": 1,
          "name": "future"
        }
      ]
    },
    {
      "name": "findTotem",
      "descriptor": "(Lnet/minecraft/world/entity/player/Player;)Lnet/minecraft/world/item/ItemStack;",
      "parameters": [
        {
          "index": 0,
          "name": "player"
        }
      ]
    },
    {
      "name": "getConnection",
      "descriptor": "()Lnet/minecraft/network/Connection;",
      "javadoc": [
        "Returns this the NetworkManager instance registered with this NetworkHandlerPlayClient"
      ]
    },
    {
      "name": "getPlayerInfo",
      "descriptor": "(Ljava/lang/String;)Lnet/minecraft/client/multiplayer/PlayerInfo;",
      "javadoc": [
        "Gets the client's description information about another player on the server."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "name"
        }
      ]
    },
    {
      "name": "getPlayerInfo",
      "descriptor": "(Ljava/util/UUID;)Lnet/minecraft/client/multiplayer/PlayerInfo;",
      "parameters": [
        {
          "index": 1,
          "name": "uniqueId"
        }
      ]
    },
    {
      "name": "handleAddEntity",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAddEntityPacket;)V",
      "javadoc": [
        "Spawns an instance of the objecttype indicated by the packet and sets its position and momentum"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddExperienceOrb",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAddExperienceOrbPacket;)V",
      "javadoc": [
        "Spawns an experience orb and sets its value (amount of XP)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddMob",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAddMobPacket;)V",
      "javadoc": [
        "Spawns the mob entity at the specified location, with the specified rotation, momentum and type. Updates the entities Datawatchers with the entity metadata specified in the packet"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddObjective",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetObjectivePacket;)V",
      "javadoc": [
        "May create a scoreboard objective, remove an objective from the scoreboard or update an objectives' displayname"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddOrRemoveRecipes",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundRecipePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddPainting",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAddPaintingPacket;)V",
      "javadoc": [
        "Handles the spawning of a painting object"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAddPlayer",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAddPlayerPacket;)V",
      "javadoc": [
        "Handles the creation of a nearby player entity, sets the position and held item"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAnimate",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAnimatePacket;)V",
      "javadoc": [
        "Renders a specified animation: Waking up a player, a living entity swinging its currently held item, being hurt or receiving a critical hit by normal or magical means"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleAwardStats",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundAwardStatsPacket;)V",
      "javadoc": [
        "Updates the players statistics or achievements"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBlockBreakAck",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBlockBreakAckPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBlockDestruction",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBlockDestructionPacket;)V",
      "javadoc": [
        "Updates all registered IWorldAccess instances with destroyBlockInWorldPartially"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBlockEntityData",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBlockEntityDataPacket;)V",
      "javadoc": [
        "Updates the NBTTagCompound metadata of instances of the following entitytypes: Mob spawners, command blocks, beacons, skulls, flowerpot"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBlockEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBlockEventPacket;)V",
      "javadoc": [
        "Triggers Block.onBlockEventReceived, which is implemented in BlockPistonBase for extension/retraction, BlockNote for setting the instrument (including audiovisual feedback) and in BlockContainer to set the number of players accessing a (Ender)Chest"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBlockUpdate",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBlockUpdatePacket;)V",
      "javadoc": [
        "Updates the block and metadata and generates a blockupdate (and notify the clients)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleBossUpdate",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundBossEventPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleChangeDifficulty",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundChangeDifficultyPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleChat",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundChatPacket;)V",
      "javadoc": [
        "Prints a chatmessage in the chat GUI"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleChunkBlocksUpdate",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket;)V",
      "javadoc": [
        "Received from the servers PlayerManager if between 1 and 64 blocks in a chunk are changed. If only one block requires an update, the server sends S23PacketBlockChange and if 64 or more blocks are changed, the server sends S21PacketChunkData"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleCommandSuggestions",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundCommandSuggestionsPacket;)V",
      "javadoc": [
        "This method is only called for manual tab-completion (the {@link net.minecraft.command.arguments.SuggestionProviders#ASK_SERVER minecraft:ask_server} suggestion provider)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleCommands",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundCommandsPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleContainerClose",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundContainerClosePacket;)V",
      "javadoc": [
        "Resets the ItemStack held in hand and closes the window that is opened"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleContainerContent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundContainerSetContentPacket;)V",
      "javadoc": [
        "Handles the placement of a specified ItemStack in a specified container/inventory slot"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleContainerSetData",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundContainerSetDataPacket;)V",
      "javadoc": [
        "Sets the progressbar of the opened window to the specified value"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleContainerSetSlot",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket;)V",
      "javadoc": [
        "Handles pickin up an ItemStack or dropping one in your inventory or an open (non-creative) container"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleCustomPayload",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundCustomPayloadPacket;)V",
      "javadoc": [
        "Handles packets that have room for a channel specification. Vanilla implemented channels are \"MC|TrList\" to acquire a MerchantRecipeList trades for a villager merchant, \"MC|Brand\" which sets the server brand? on the player instance and finally \"MC|RPack\" which the server uses to communicate the identifier of the default server resourcepack for the client to load."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleCustomSoundEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundCustomSoundPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleDisconnect",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundDisconnectPacket;)V",
      "javadoc": [
        "Closes the network channel"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleEntityEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundEntityEventPacket;)V",
      "javadoc": [
        "Invokes the entities' handleUpdateHealth method which is implemented in LivingBase (hurt/death), MinecartMobSpawner (spawn delay), FireworkRocket & MinecartTNT (explosion), IronGolem (throwing,...), Witch (spawn particles), Zombie (villager transformation), Animal (breeding mode particles), Horse (breeding/smoke particles), Sheep (...), Tameable (...), Villager (particles for breeding mode, angry and happy), Wolf (...)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleEntityLinkPacket",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetEntityLinkPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleExplosion",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundExplodePacket;)V",
      "javadoc": [
        "Initiates a new explosion (sound, particles, drop spawn) for the affected blocks indicated by the packet."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleForgetLevelChunk",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleGameEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundGameEventPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleHorseScreenOpen",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundHorseScreenOpenPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleItemCooldown",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundCooldownPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleKeepAlive",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundKeepAlivePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleLevelChunk",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundLevelChunkPacket;)V",
      "javadoc": [
        "Updates the specified chunk with the supplied data, marks it for re-rendering and lighting recalculation"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleLevelEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundLevelEventPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleLightUpdatePacked",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundLightUpdatePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleLogin",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundLoginPacket;)V",
      "javadoc": [
        "Registers some server properties (gametype,hardcore-mode,terraintype,difficulty,player limit), creates a new WorldClient and sets the player initial dimension"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleLookAt",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleMapItemData",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundMapItemDataPacket;)V",
      "javadoc": [
        "Updates the worlds MapStorage with the specified MapData for the specified map-identifier and invokes a MapItemRenderer for it"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleMerchantOffers",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundMerchantOffersPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleMoveEntity",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundMoveEntityPacket;)V",
      "javadoc": [
        "Updates the specified entity's position by the specified relative moment and absolute rotation. Note that subclassing of the packet allows for the specification of a subset of this data (e.g. only rel. position, abs. rotation or both)."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleMovePlayer",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundPlayerPositionPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleMoveVehicle",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundMoveVehiclePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleOpenBook",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundOpenBookPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleOpenScreen",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundOpenScreenPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleOpenSignEditor",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundOpenSignEditorPacket;)V",
      "javadoc": [
        "Creates a sign in the specified location if it didn't exist and opens the GUI to edit its text"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleParticleEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundLevelParticlesPacket;)V",
      "javadoc": [
        "Spawns a specified number of particles at the specified location with a randomized displacement according to specified bounds"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handlePlaceRecipe",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundPlaceGhostRecipePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handlePlayerAbilities",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundPlayerAbilitiesPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handlePlayerInfo",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundPlayerInfoPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleRemoveMobEffect",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundRemoveMobEffectPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleResourcePack",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundResourcePackPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleRespawn",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundRespawnPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleRotateMob",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundRotateHeadPacket;)V",
      "javadoc": [
        "Updates the direction in which the specified entity is looking, normally this head rotation is independent of the rotation of the entity itself"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSelectAdvancementsTab",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSelectAdvancementsTabPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetCamera",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetCameraPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetCarriedItem",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetCarriedItemPacket;)V",
      "javadoc": [
        "Updates which hotbar slot of the player is currently selected"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetChunkCacheCenter",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetChunkCacheCenterPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetChunkCacheRadius",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetChunkCacheRadiusPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetDisplayObjective",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket;)V",
      "javadoc": [
        "Removes or sets the ScoreObjective to be displayed at a particular scoreboard position (list, sidebar, below name)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetEntityData",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetEntityDataPacket;)V",
      "javadoc": [
        "Invoked when the server registers new proximate objects in your watchlist or when objects in your watchlist have changed -> Registers any changes locally"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetEntityMotion",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetEntityMotionPacket;)V",
      "javadoc": [
        "Sets the velocity of the specified entity to the specified value"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetEntityPassengersPacket",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetPassengersPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetEquipment",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetEquipmentPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetExperience",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetExperiencePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetHealth",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetHealthPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetPlayerTeamPacket",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket;)V",
      "javadoc": [
        "Updates a team managed by the scoreboard: Create/Remove the team registration, Register/Remove the player-team-memberships, Set team displayname/prefix/suffix and/or whether friendly fire is enabled"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetScore",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetScorePacket;)V",
      "javadoc": [
        "Either updates the score with a specified value or removes the score for an objective"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSetTime",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSetTimePacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSoundEntityEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSoundEntityPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleSoundEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundSoundPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleStopSoundEvent",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundStopSoundPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleTabListCustomisation",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundTabListPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleTagQueryPacket",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundTagQueryPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleTakeItemEntity",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundTakeItemEntityPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleTeleportEntity",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundTeleportEntityPacket;)V",
      "javadoc": [
        "Updates an entity's position and rotation as specified by the packet"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleUpdateAdvancementsPacket",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleUpdateAttributes",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundUpdateAttributesPacket;)V",
      "javadoc": [
        "Updates en entity's attributes and their respective modifiers, which are used for speed bonusses (player sprinting, animals fleeing, baby speed), weapon/tool attackDamage, hostiles followRange randomization, zombie maxHealth and knockback resistance as well as reinforcement spawning chance."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleUpdateMobEffect",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundUpdateMobEffectPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleUpdateRecipes",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "handleUpdateTags",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ClientboundUpdateTagsPacket;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "onDisconnect",
      "descriptor": "(Lnet/minecraft/network/chat/Component;)V",
      "javadoc": [
        "Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "reason"
        }
      ]
    },
    {
      "name": "send",
      "descriptor": "(Lnet/minecraft/network/protocol/Packet;)V",
      "parameters": [
        {
          "index": 1,
          "name": "packet"
        }
      ]
    },
    {
      "name": "send",
      "descriptor": "(Lnet/minecraft/network/protocol/game/ServerboundResourcePackPacket$Action;)V",
      "parameters": [
        {
          "index": 1,
          "name": "action"
        }
      ]
    },
    {
      "name": "validateResourcePackUrl",
      "descriptor": "(Ljava/lang/String;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "url"
        }
      ]
    }
  ]
}