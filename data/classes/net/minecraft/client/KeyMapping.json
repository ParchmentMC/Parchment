{
  "name": "net/minecraft/client/KeyMapping",
  "methods": [
    {
      "name": "click",
      "descriptor": "(Lcom/mojang/blaze3d/platform/InputConstants$Key;)V",
      "parameters": [
        {
          "index": 0,
          "name": "key"
        }
      ]
    },
    {
      "name": "consumeClick",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true on the initial key press. For continuous querying use {@link isKeyDown()}. Should be used in key events."
      ]
    },
    {
      "name": "createNameSupplier",
      "descriptor": "(Ljava/lang/String;)Ljava/util/function/Supplier;",
      "javadoc": [
        "Returns a supplier which gets a keybind's current binding (eg, <code>key.forward</code> returns <samp>W</samp> by default), or the keybind's name if no such keybind exists (eg, <code>key.invalid</code> returns <samp>key.invalid</samp>)"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "key"
        }
      ]
    },
    {
      "name": "isDefault",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the keybinding is using the default key and key modifier"
      ]
    },
    {
      "name": "isDown",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the key is pressed (used for continuous querying). Should be used in tickers."
      ]
    },
    {
      "name": "matches",
      "descriptor": "(II)Z",
      "parameters": [
        {
          "index": 1,
          "name": "keysym"
        },
        {
          "index": 2,
          "name": "scancode"
        }
      ]
    },
    {
      "name": "matchesMouse",
      "descriptor": "(I)Z",
      "javadoc": [
        "Returns true if the KeyBinding is set to a mouse key and the key matches"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "key"
        }
      ]
    },
    {
      "name": "same",
      "descriptor": "(Lnet/minecraft/client/KeyMapping;)Z",
      "javadoc": [
        "Returns true if the supplied KeyBinding conflicts with this"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "binding"
        }
      ]
    },
    {
      "name": "set",
      "descriptor": "(Lcom/mojang/blaze3d/platform/InputConstants$Key;Z)V",
      "parameters": [
        {
          "index": 0,
          "name": "key"
        },
        {
          "index": 1,
          "name": "held"
        }
      ]
    },
    {
      "name": "setAll",
      "descriptor": "()V",
      "javadoc": [
        "Completely recalculates whether any keybinds are held, from scratch."
      ]
    },
    {
      "name": "setDown",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "value"
        }
      ]
    },
    {
      "name": "setKey",
      "descriptor": "(Lcom/mojang/blaze3d/platform/InputConstants$Key;)V",
      "javadoc": [
        "Binds a new KeyCode to this"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "key"
        }
      ]
    }
  ]
}