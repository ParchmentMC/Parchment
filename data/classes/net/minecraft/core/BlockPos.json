{
  "name": "net/minecraft/core/BlockPos",
  "fields": [
    {
      "name": "ZERO",
      "descriptor": "Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "An immutable block pos with zero as all coordinates."
      ]
    }
  ],
  "methods": [
    {
      "name": "<init>",
      "descriptor": "(III)V",
      "javadoc": [
        "Constructs a {@code BlockPos} using the provided X, Y, and Z coordinates."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "x",
          "javadoc": "The X coordinate"
        },
        {
          "index": 2,
          "name": "y",
          "javadoc": "The Y coordinate"
        },
        {
          "index": 3,
          "name": "z",
          "javadoc": "The Z coordinate"
        }
      ]
    },
    {
      "name": "above",
      "descriptor": "()Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Offset this BlockPos 1 block up"
      ]
    },
    {
      "name": "above",
      "descriptor": "(I)Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Offset this BlockPos n blocks up"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "n"
        }
      ]
    },
    {
      "name": "asLong",
      "descriptor": "(III)J",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 1,
          "name": "y"
        },
        {
          "index": 2,
          "name": "z"
        }
      ]
    },
    {
      "name": "below",
      "descriptor": "()Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Offset this BlockPos 1 block down"
      ]
    },
    {
      "name": "below",
      "descriptor": "(I)Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Offset this BlockPos n blocks down"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "n"
        }
      ]
    },
    {
      "name": "betweenClosed",
      "descriptor": "(IIIIII)Ljava/lang/Iterable;",
      "javadoc": [
        "Creates an Iterable that returns all positions in the box specified by the given corners. <strong>Coordinates must be in order</strong>\" e.g. x1 <= x2.",
        "",
        "This method uses {@link BlockPos.MutableBlockPos MutableBlockPos} instead of regular BlockPos, which grants better performance. However, the resulting BlockPos instances can only be used inside the iteration loop (as otherwise the value will change), unless {@link #toImmutable()} is called. This method is ideal for searching large areas and only storing a few locations.",
        "",
        "@see #getAllInBox(BlockPos, BlockPos)",
        "@see #getAllInBox(int, int, int, int, int, int)",
        "@see #getAllInBoxMutable(BlockPos, BlockPos)"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "x1"
        },
        {
          "index": 1,
          "name": "y1"
        },
        {
          "index": 2,
          "name": "z1"
        },
        {
          "index": 3,
          "name": "x2"
        },
        {
          "index": 4,
          "name": "y2"
        },
        {
          "index": 5,
          "name": "z2"
        }
      ]
    },
    {
      "name": "betweenClosed",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/lang/Iterable;",
      "parameters": [
        {
          "index": 0,
          "name": "firstPos"
        },
        {
          "index": 1,
          "name": "secondPos"
        }
      ]
    },
    {
      "name": "betweenClosedStream",
      "descriptor": "(IIIIII)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "minX"
        },
        {
          "index": 1,
          "name": "minY"
        },
        {
          "index": 2,
          "name": "minZ"
        },
        {
          "index": 3,
          "name": "maxX"
        },
        {
          "index": 4,
          "name": "maxY"
        },
        {
          "index": 5,
          "name": "maxZ"
        }
      ]
    },
    {
      "name": "betweenClosedStream",
      "descriptor": "(Lnet/minecraft/core/BlockPos;Lnet/minecraft/core/BlockPos;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "firstPos"
        },
        {
          "index": 1,
          "name": "secondPos"
        }
      ]
    },
    {
      "name": "betweenClosedStream",
      "descriptor": "(Lnet/minecraft/world/level/levelgen/structure/BoundingBox;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "box"
        }
      ]
    },
    {
      "name": "betweenClosedStream",
      "descriptor": "(Lnet/minecraft/world/phys/AABB;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "aabb"
        }
      ]
    },
    {
      "name": "cross",
      "descriptor": "(Lnet/minecraft/core/Vec3i;)Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Calculate the cross product of this and the given Vector"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "vec"
        }
      ]
    },
    {
      "name": "findClosestMatch",
      "descriptor": "(Lnet/minecraft/core/BlockPos;IILjava/util/function/Predicate;)Ljava/util/Optional;",
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        },
        {
          "index": 1,
          "name": "width"
        },
        {
          "index": 2,
          "name": "height"
        },
        {
          "index": 3,
          "name": "posFilter"
        }
      ]
    },
    {
      "name": "getFlatIndex",
      "descriptor": "(J)J",
      "parameters": [
        {
          "index": 0,
          "name": "packedPos"
        }
      ]
    },
    {
      "name": "getX",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "packedPos"
        }
      ]
    },
    {
      "name": "getY",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "packedPos"
        }
      ]
    },
    {
      "name": "getZ",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "packedPos"
        }
      ]
    },
    {
      "name": "immutable",
      "descriptor": "()Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Returns a version of this BlockPos that is guaranteed to be immutable.",
        "",
        "<p>When storing a BlockPos given to you for an extended period of time, make sure you",
        "use this in case the value is changed internally.</p>"
      ]
    },
    {
      "name": "of",
      "descriptor": "(J)Lnet/minecraft/core/BlockPos;",
      "parameters": [
        {
          "index": 0,
          "name": "packedPos"
        }
      ]
    },
    {
      "name": "offset",
      "descriptor": "(JIII)J",
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "dx"
        },
        {
          "index": 3,
          "name": "dy"
        },
        {
          "index": 4,
          "name": "dz"
        }
      ]
    },
    {
      "name": "offset",
      "descriptor": "(JLnet/minecraft/core/Direction;)J",
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        },
        {
          "index": 2,
          "name": "direction"
        }
      ]
    },
    {
      "name": "randomBetweenClosed",
      "descriptor": "(Ljava/util/Random;IIIIIII)Ljava/lang/Iterable;",
      "parameters": [
        {
          "index": 0,
          "name": "rand"
        },
        {
          "index": 1,
          "name": "amount"
        },
        {
          "index": 2,
          "name": "minX"
        },
        {
          "index": 3,
          "name": "minY"
        },
        {
          "index": 4,
          "name": "minZ"
        },
        {
          "index": 5,
          "name": "maxX"
        },
        {
          "index": 6,
          "name": "maxY"
        },
        {
          "index": 7,
          "name": "maxZ"
        }
      ]
    },
    {
      "name": "relative",
      "descriptor": "(Lnet/minecraft/core/Direction;I)Lnet/minecraft/core/BlockPos;",
      "javadoc": [
        "Offsets this BlockPos n blocks in the given direction"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "facing"
        },
        {
          "index": 2,
          "name": "n"
        }
      ]
    },
    {
      "name": "rotate",
      "descriptor": "(Lnet/minecraft/world/level/block/Rotation;)Lnet/minecraft/core/BlockPos;",
      "parameters": [
        {
          "index": 1,
          "name": "rotation"
        }
      ]
    },
    {
      "name": "withinManhattan",
      "descriptor": "(Lnet/minecraft/core/BlockPos;III)Ljava/lang/Iterable;",
      "javadoc": [
        "Returns BlockPos#getProximitySortedBoxPositions as an Iterator."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        },
        {
          "index": 1,
          "name": "xWidth"
        },
        {
          "index": 2,
          "name": "yHeight"
        },
        {
          "index": 3,
          "name": "zWidth"
        }
      ]
    },
    {
      "name": "withinManhattanStream",
      "descriptor": "(Lnet/minecraft/core/BlockPos;III)Ljava/util/stream/Stream;",
      "javadoc": [
        "Returns a stream of positions in a box shape, ordered by closest to furthest. Returns by definition the given position as first element in the stream."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        },
        {
          "index": 1,
          "name": "xWidth"
        },
        {
          "index": 2,
          "name": "yHeight"
        },
        {
          "index": 3,
          "name": "zWidth"
        }
      ]
    }
  ]
}