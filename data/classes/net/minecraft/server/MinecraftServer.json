{
  "name": "net/minecraft/server/MinecraftServer",
  "fields": [
    {
      "name": "resourcePack",
      "descriptor": "Ljava/lang/String;",
      "javadoc": [
        "The texture pack for the server"
      ]
    }
  ],
  "methods": [
    {
      "name": "addTickable",
      "descriptor": "(Ljava/lang/Runnable;)V",
      "parameters": [
        {
          "index": 1,
          "name": "tickable"
        }
      ]
    },
    {
      "name": "detectBundledResources",
      "descriptor": "()V",
      "parameters": [
        {
          "index": 1,
          "name": "levelName"
        },
        {
          "index": 2,
          "name": "saveHandler"
        }
      ]
    },
    {
      "name": "doRunTask",
      "descriptor": "(Lnet/minecraft/server/TickTask;)V",
      "parameters": [
        {
          "index": 1,
          "name": "task"
        }
      ]
    },
    {
      "name": "getCompressionThreshold",
      "descriptor": "()I",
      "javadoc": [
        "The compression treshold. If the packet is larger than the specified amount of bytes, it will be compressed"
      ]
    },
    {
      "name": "getFile",
      "descriptor": "(Ljava/lang/String;)Ljava/io/File;",
      "javadoc": [
        "Returns a File object from the specified string."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "fileName"
        }
      ]
    },
    {
      "name": "getKeyPair",
      "descriptor": "()Ljava/security/KeyPair;",
      "javadoc": [
        "Gets KeyPair instanced in MinecraftServer."
      ]
    },
    {
      "name": "getLevel",
      "descriptor": "(Lnet/minecraft/resources/ResourceKey;)Lnet/minecraft/server/level/ServerLevel;",
      "javadoc": [
        "Gets the worldServer by the given dimension."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "dimension"
        }
      ]
    },
    {
      "name": "getLocalIp",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "\"getHostname\" is already taken, but both return the hostname."
      ]
    },
    {
      "name": "getMaxPlayers",
      "descriptor": "()I",
      "javadoc": [
        "Returns the maximum number of players allowed on the server."
      ]
    },
    {
      "name": "getPlayerCount",
      "descriptor": "()I",
      "javadoc": [
        "Returns the number of players currently on the server."
      ]
    },
    {
      "name": "getPlayerNames",
      "descriptor": "()[Ljava/lang/String;",
      "javadoc": [
        "Returns an array of the usernames of all the connected players."
      ]
    },
    {
      "name": "getPort",
      "descriptor": "()I",
      "javadoc": [
        "Gets serverPort."
      ]
    },
    {
      "name": "getProfilePermissions",
      "descriptor": "(Lcom/mojang/authlib/GameProfile;)I",
      "parameters": [
        {
          "index": 1,
          "name": "profile"
        }
      ]
    },
    {
      "name": "getServerVersion",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns the server's Minecraft version as string."
      ]
    },
    {
      "name": "getSingleplayerName",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns the username of the server owner (for integrated servers)"
      ]
    },
    {
      "name": "getSpawnProtectionRadius",
      "descriptor": "()I",
      "javadoc": [
        "Return the spawn protection area's size."
      ]
    },
    {
      "name": "getSpawnRadius",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;)I",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        }
      ]
    },
    {
      "name": "halt",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets the serverRunning variable to false, in order to get the server to shut down."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "waitForServer"
        }
      ]
    },
    {
      "name": "initServer",
      "descriptor": "()Z",
      "javadoc": [
        "Initialises the server and starts it."
      ]
    },
    {
      "name": "isCommandBlockEnabled",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether command blocks are enabled."
      ]
    },
    {
      "name": "isDemo",
      "descriptor": "()Z",
      "javadoc": [
        "Gets whether this is a demo or not."
      ]
    },
    {
      "name": "isEpollEnabled",
      "descriptor": "()Z",
      "javadoc": [
        "Get if native transport should be used. Native transport means linux server performance improvements and optimized packet sending/receiving on linux"
      ]
    },
    {
      "name": "isHardcore",
      "descriptor": "()Z",
      "javadoc": [
        "Defaults to false."
      ]
    },
    {
      "name": "isPublished",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this integrated server is open to LAN"
      ]
    },
    {
      "name": "isSingleplayerOwner",
      "descriptor": "(Lcom/mojang/authlib/GameProfile;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "profile"
        }
      ]
    },
    {
      "name": "isUnderSpawnProtection",
      "descriptor": "(Lnet/minecraft/server/level/ServerLevel;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/entity/player/Player;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "player"
        }
      ]
    },
    {
      "name": "kickUnlistedPlayers",
      "descriptor": "(Lnet/minecraft/commands/CommandSourceStack;)V",
      "parameters": [
        {
          "index": 1,
          "name": "commandSource"
        }
      ]
    },
    {
      "name": "onServerCrash",
      "descriptor": "(Lnet/minecraft/CrashReport;)V",
      "javadoc": [
        "Called on exit from the main run() loop."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "report"
        }
      ]
    },
    {
      "name": "onServerExit",
      "descriptor": "()V",
      "javadoc": [
        "Directly calls System.exit(0), instantly killing the program."
      ]
    },
    {
      "name": "populateSnooper",
      "descriptor": "(Lnet/minecraft/world/Snooper;)V",
      "parameters": [
        {
          "index": 1,
          "name": "snooper"
        }
      ]
    },
    {
      "name": "prepareLevels",
      "descriptor": "(Lnet/minecraft/server/level/progress/ChunkProgressListener;)V",
      "javadoc": [
        "Loads the spawn chunks and any forced chunks"
      ]
    },
    {
      "name": "publishServer",
      "descriptor": "(Lnet/minecraft/world/level/GameType;ZI)Z",
      "parameters": [
        {
          "index": 1,
          "name": "gameMode"
        },
        {
          "index": 2,
          "name": "cheats"
        },
        {
          "index": 3,
          "name": "port"
        }
      ]
    },
    {
      "name": "saveAllChunks",
      "descriptor": "(ZZZ)Z",
      "parameters": [
        {
          "index": 1,
          "name": "suppressLog"
        },
        {
          "index": 2,
          "name": "flush"
        },
        {
          "index": 3,
          "name": "forced"
        }
      ]
    },
    {
      "name": "sendDifficultyUpdate",
      "descriptor": "(Lnet/minecraft/server/level/ServerPlayer;)V",
      "parameters": [
        {
          "index": 1,
          "name": "player"
        }
      ]
    },
    {
      "name": "sendMessage",
      "descriptor": "(Lnet/minecraft/network/chat/Component;Ljava/util/UUID;)V",
      "javadoc": [
        "Send a chat message to the CommandSender"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "component"
        },
        {
          "index": 2,
          "name": "senderUUID"
        }
      ]
    },
    {
      "name": "setDefaultGameType",
      "descriptor": "(Lnet/minecraft/world/level/GameType;)V",
      "javadoc": [
        "Sets the game type for all worlds."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "gameMode"
        }
      ]
    },
    {
      "name": "setDemo",
      "descriptor": "(Z)V",
      "javadoc": [
        "Sets whether this is a demo or not."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "demo"
        }
      ]
    },
    {
      "name": "setDifficulty",
      "descriptor": "(Lnet/minecraft/world/Difficulty;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "difficulty"
        }
      ]
    },
    {
      "name": "setDifficultyLocked",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "locked"
        }
      ]
    },
    {
      "name": "setEnforceWhitelist",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "whitelistEnabled"
        }
      ]
    },
    {
      "name": "setFlightAllowed",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "allow"
        }
      ]
    },
    {
      "name": "setId",
      "descriptor": "(Ljava/lang/String;)V",
      "parameters": [
        {
          "index": 1,
          "name": "serverId"
        }
      ]
    },
    {
      "name": "setLocalIp",
      "descriptor": "(Ljava/lang/String;)V",
      "parameters": [
        {
          "index": 1,
          "name": "host"
        }
      ]
    },
    {
      "name": "setMotd",
      "descriptor": "(Ljava/lang/String;)V",
      "parameters": [
        {
          "index": 1,
          "name": "motd"
        }
      ]
    },
    {
      "name": "setPlayerIdleTimeout",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "idleTimeout"
        }
      ]
    },
    {
      "name": "setPlayerList",
      "descriptor": "(Lnet/minecraft/server/players/PlayerList;)V",
      "parameters": [
        {
          "index": 1,
          "name": "list"
        }
      ]
    },
    {
      "name": "setPort",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "port"
        }
      ]
    },
    {
      "name": "setPvpAllowed",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "allowPvp"
        }
      ]
    },
    {
      "name": "setResourcePack",
      "descriptor": "(Ljava/lang/String;Ljava/lang/String;)V",
      "parameters": [
        {
          "index": 1,
          "name": "url"
        },
        {
          "index": 2,
          "name": "hash"
        }
      ]
    },
    {
      "name": "setSingleplayerName",
      "descriptor": "(Ljava/lang/String;)V",
      "javadoc": [
        "Sets the username of the owner of this server (in the case of an integrated server)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "owner"
        }
      ]
    },
    {
      "name": "setUsesAuthentication",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "online"
        }
      ]
    },
    {
      "name": "shouldRun",
      "descriptor": "(Lnet/minecraft/server/TickTask;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "runnable"
        }
      ]
    },
    {
      "name": "spin",
      "descriptor": "(Ljava/util/function/Function;)Lnet/minecraft/server/MinecraftServer;",
      "parameters": [
        {
          "index": 0,
          "name": "threadFunction"
        }
      ]
    },
    {
      "name": "stopServer",
      "descriptor": "()V",
      "javadoc": [
        "Saves all necessary data as preparation for stopping the server."
      ]
    },
    {
      "name": "tickChildren",
      "descriptor": "(Ljava/util/function/BooleanSupplier;)V",
      "parameters": [
        {
          "index": 1,
          "name": "hasTimeLeft"
        }
      ]
    },
    {
      "name": "tickServer",
      "descriptor": "(Ljava/util/function/BooleanSupplier;)V",
      "javadoc": [
        "Main function called by run() every loop."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "hasTimeLeft"
        }
      ]
    },
    {
      "name": "updateStatusIcon",
      "descriptor": "(Lnet/minecraft/network/protocol/status/ServerStatus;)V",
      "parameters": [
        {
          "index": 1,
          "name": "response"
        }
      ]
    },
    {
      "name": "waitUntilNextTick",
      "descriptor": "()V",
      "javadoc": [
        "Runs all pending tasks and waits for more tasks until serverTime is reached."
      ]
    },
    {
      "name": "wrapRunnable",
      "descriptor": "(Ljava/lang/Runnable;)Lnet/minecraft/server/TickTask;",
      "parameters": [
        {
          "index": 1,
          "name": "runnable"
        }
      ]
    }
  ]
}