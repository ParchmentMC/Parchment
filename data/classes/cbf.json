{
  "name": "cbf",
  "fields": [
    {
      "name": "d",
      "descriptor": "Lclq;"
    },
    {
      "name": "e",
      "descriptor": "Lclj;"
    },
    {
      "name": "f",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Latf;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Ljava/lang/Class;Ljava/util/function/Predicate;)Ljava/util/List;",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pCartType"
        },
        {
          "index": 4,
          "name": "pFilter"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pRand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getWeakPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pBlockState"
        },
        {
          "index": 2,
          "name": "pBlockAccess"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pSide"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getComparatorInputOverride(World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pBlockState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Latf;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pMirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pRot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBuilder"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;)Ldmv;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Latf;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pState"
        },
        {
          "index": 4,
          "name": "pPowered"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getStrongPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pBlockState"
        },
        {
          "index": 2,
          "name": "pBlockAccess"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pSide"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pOldState"
        },
        {
          "index": 5,
          "name": "pIsMoving"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "()Lclv;"
    },
    {
      "name": "d_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "@deprecated call via {@link IBlockState#hasComparatorInputOverride()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "f_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "Can this block provide power. Only wire currently seems to have this change based on its state.",
        "@deprecated call via {@link IBlockState#canProvidePower()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    }
  ]
}