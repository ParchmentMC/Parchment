{
  "name": "aha",
  "fields": [
    {
      "name": "a",
      "descriptor": "F"
    },
    {
      "name": "b",
      "descriptor": "F"
    },
    {
      "name": "c",
      "descriptor": "F"
    },
    {
      "name": "d",
      "descriptor": "F"
    },
    {
      "name": "e",
      "descriptor": "F"
    },
    {
      "name": "f",
      "descriptor": "F"
    },
    {
      "name": "g",
      "descriptor": "F"
    },
    {
      "name": "h",
      "descriptor": "I"
    },
    {
      "name": "i",
      "descriptor": "F"
    },
    {
      "name": "j",
      "descriptor": "J"
    },
    {
      "name": "k",
      "descriptor": "J"
    },
    {
      "name": "l",
      "descriptor": "J"
    },
    {
      "name": "m",
      "descriptor": "J"
    },
    {
      "name": "n",
      "descriptor": "F"
    },
    {
      "name": "o",
      "descriptor": "[F"
    },
    {
      "name": "p",
      "descriptor": "Ljava/util/Random;"
    },
    {
      "name": "q",
      "descriptor": "[I",
      "javadoc": [
        "Though it looks like an array, this is really more like a mapping. Key (index of this array) is the upper 5 bits of the result of multiplying a 32-bit unsigned integer by the B(2, 5) De Bruijn sequence 0x077CB531. Value (value stored in the array) is the unique index (from the right) of the leftmo"
      ]
    },
    {
      "name": "r",
      "descriptor": "D"
    },
    {
      "name": "s",
      "descriptor": "I"
    },
    {
      "name": "t",
      "descriptor": "I"
    },
    {
      "name": "u",
      "descriptor": "D"
    },
    {
      "name": "v",
      "descriptor": "[D"
    },
    {
      "name": "w",
      "descriptor": "[D"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "()V"
    },
    {
      "name": "a",
      "descriptor": "()Ljava/util/UUID;",
      "javadoc": [
        "Generates a random UUID using the shared random"
      ]
    },
    {
      "name": "a",
      "descriptor": "(BBB)B"
    },
    {
      "name": "a",
      "descriptor": "(D)I",
      "javadoc": [
        "returns par0 cast as an int, and no greater than Integer.MAX_VALUE-1024"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DD)D",
      "javadoc": [
        "Maximum of the absolute value of two numbers."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 2,
          "name": "y"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDD)D",
      "parameters": [
        {
          "index": 0,
          "name": "num"
        },
        {
          "index": 2,
          "name": "min"
        },
        {
          "index": 4,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDDD)D"
    },
    {
      "name": "a",
      "descriptor": "(DDDDDD)D"
    },
    {
      "name": "a",
      "descriptor": "(DDDDDDDDDDD)D"
    },
    {
      "name": "a",
      "descriptor": "(DDDDDDII)[D"
    },
    {
      "name": "a",
      "descriptor": "(DDDII)[D"
    },
    {
      "name": "a",
      "descriptor": "(DDII)[D"
    },
    {
      "name": "a",
      "descriptor": "(F)F",
      "javadoc": [
        "sin looked up in a table"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(FF)Z",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 1,
          "name": "y"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(FFF)F",
      "javadoc": [
        "Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and third parameters"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "num"
        },
        {
          "index": 1,
          "name": "min"
        },
        {
          "index": 2,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(I)I",
      "javadoc": [
        "Returns the unsigned value of an int."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IDI)D"
    },
    {
      "name": "a",
      "descriptor": "(IFFF)I"
    },
    {
      "name": "a",
      "descriptor": "(II)I",
      "javadoc": [
        "Buckets an integer with specifed bucket sizes."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 1,
          "name": "y"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(III)I",
      "javadoc": [
        "Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and third parameters."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "num"
        },
        {
          "index": 1,
          "name": "min"
        },
        {
          "index": 2,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IILjava/util/function/IntPredicate;)I",
      "parameters": [
        {
          "index": 0,
          "name": "min"
        },
        {
          "index": 1,
          "name": "max"
        },
        {
          "index": 2,
          "name": "isTargetBeforeOrAt"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(J)J"
    },
    {
      "name": "a",
      "descriptor": "(JJJ)J",
      "parameters": [
        {
          "index": 0,
          "name": "num"
        },
        {
          "index": 2,
          "name": "min"
        },
        {
          "index": 4,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldna;Ldna;Ldmv;)Z"
    },
    {
      "name": "a",
      "descriptor": "(Ldna;Ldna;Ldna;Ldna;D)Ldna;"
    },
    {
      "name": "a",
      "descriptor": "(Lhb;)J",
      "parameters": [
        {
          "index": 0,
          "name": "pos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;D)D",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        },
        {
          "index": 1,
          "name": "defaultValue"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;DD)D",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        },
        {
          "index": 1,
          "name": "defaultValue"
        },
        {
          "index": 3,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;I)I",
      "javadoc": [
        "parses the string as integer or returns the second parameter if it fails"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        },
        {
          "index": 1,
          "name": "defaultValue"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;II)I",
      "javadoc": [
        "parses the string as integer or returns the second parameter if it fails. this value is capped to par2"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        },
        {
          "index": 1,
          "name": "defaultValue"
        },
        {
          "index": 2,
          "name": "max"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;)Ljava/util/UUID;",
      "parameters": [
        {
          "index": 0,
          "name": "rand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;DD)D",
      "parameters": [
        {
          "index": 0,
          "name": "random"
        },
        {
          "index": 1,
          "name": "minimum"
        },
        {
          "index": 3,
          "name": "maximum"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;FF)F",
      "parameters": [
        {
          "index": 0,
          "name": "random"
        },
        {
          "index": 1,
          "name": "minimum"
        },
        {
          "index": 2,
          "name": "maximum"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;II)I",
      "parameters": [
        {
          "index": 0,
          "name": "random"
        },
        {
          "index": 1,
          "name": "minimum"
        },
        {
          "index": 2,
          "name": "maximum"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;[D)I"
    },
    {
      "name": "a",
      "descriptor": "([D)[D"
    },
    {
      "name": "a",
      "descriptor": "([F)V"
    },
    {
      "name": "a",
      "descriptor": "([J)D",
      "parameters": [
        {
          "index": 0,
          "name": "values"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(D)I",
      "javadoc": [
        "Returns the greatest integer less than or equal to the double argument"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(DD)Z",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 2,
          "name": "y"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(DDD)D",
      "parameters": [
        {
          "index": 0,
          "name": "lowerBnd"
        },
        {
          "index": 2,
          "name": "upperBnd"
        },
        {
          "index": 4,
          "name": "slide"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(DDDDD)D"
    },
    {
      "name": "b",
      "descriptor": "(F)F",
      "javadoc": [
        "cos looked up in the sin table with the appropriate offset"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(FF)F",
      "parameters": [
        {
          "index": 0,
          "name": "numerator"
        },
        {
          "index": 1,
          "name": "denominator"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(FFF)F"
    },
    {
      "name": "b",
      "descriptor": "(I)I",
      "javadoc": [
        "Adjust the angle so that his value is in range [-180180["
      ],
      "parameters": [
        {
          "index": 0,
          "name": "angle"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(II)I",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 1,
          "name": "y"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(III)I",
      "javadoc": [
        "Makes a single int color with the given red, green, and blue values."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "r"
        },
        {
          "index": 1,
          "name": "g"
        },
        {
          "index": 2,
          "name": "b"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Ljava/util/Random;FF)F"
    },
    {
      "name": "b",
      "descriptor": "(Ljava/util/Random;II)I"
    },
    {
      "name": "c",
      "descriptor": "(D)J",
      "javadoc": [
        "Long version of floor()"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(DD)D",
      "parameters": [
        {
          "index": 0,
          "name": "numerator"
        },
        {
          "index": 2,
          "name": "denominator"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(DDD)D"
    },
    {
      "name": "c",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(FF)F"
    },
    {
      "name": "c",
      "descriptor": "(FFF)F"
    },
    {
      "name": "c",
      "descriptor": "(I)I",
      "javadoc": [
        "Returns the input value rounded up to the next highest power of two."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(II)I"
    },
    {
      "name": "c",
      "descriptor": "(III)J",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        },
        {
          "index": 1,
          "name": "y"
        },
        {
          "index": 2,
          "name": "z"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Ljava/util/Random;FF)F"
    },
    {
      "name": "d",
      "descriptor": "(D)I"
    },
    {
      "name": "d",
      "descriptor": "(DD)D"
    },
    {
      "name": "d",
      "descriptor": "(DDD)D",
      "parameters": [
        {
          "index": 0,
          "name": "pct"
        },
        {
          "index": 2,
          "name": "start"
        },
        {
          "index": 4,
          "name": "end"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(F)I",
      "javadoc": [
        "Returns the greatest integer less than or equal to the float argument"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(FF)F"
    },
    {
      "name": "d",
      "descriptor": "(FFF)F"
    },
    {
      "name": "d",
      "descriptor": "(I)Z",
      "javadoc": [
        "Is the given value a power of two?  (1, 2, 4, 8, 16, ...)"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(II)I"
    },
    {
      "name": "e",
      "descriptor": "(D)I",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(FF)F"
    },
    {
      "name": "e",
      "descriptor": "(FFF)F"
    },
    {
      "name": "e",
      "descriptor": "(I)I",
      "javadoc": [
        "Uses a B(2, 5) De Bruijn sequence and a lookup table to efficiently calculate the log-base-two of the given value. Optimized for cases where the input value is a power-of-two. If the input value is not a power-of-two, then subtract 1 from the return value."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(D)D",
      "javadoc": [
        "the angle is reduced to an angle between -180 and +180 by mod, and a 360 check"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(F)I",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(FFF)I",
      "javadoc": [
        "Makes an integer color from the given red, green, and blue float values"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "r"
        },
        {
          "index": 1,
          "name": "g"
        },
        {
          "index": 2,
          "name": "b"
        }
      ]
    },
    {
      "name": "f",
      "descriptor": "(I)I",
      "javadoc": [
        "Efficiently calculates the floor of the base-2 log of an integer value.  This is effectively the index of the highest bit that is set.  For example, if the number in binary is 0...100101, this will return 5."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(D)D",
      "javadoc": [
        "Gets the decimal portion of the given double. For instance, {@code frac(5.5)} returns {@code .5}."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "number"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(F)F",
      "javadoc": [
        "the angle is reduced to an angle between -180 and +180 by mod, and a 360 check"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(FFF)I",
      "parameters": [
        {
          "index": 0,
          "name": "hue"
        },
        {
          "index": 1,
          "name": "saturation"
        },
        {
          "index": 2,
          "name": "value"
        }
      ]
    },
    {
      "name": "g",
      "descriptor": "(I)I"
    },
    {
      "name": "h",
      "descriptor": "(D)D",
      "javadoc": [
        "Computes 1/sqrt(n) using <a href=\"https://en.wikipedia.org/wiki/Fast_inverse_square_root\">the fast inverse square root</a> with a constant of 0x5FE6EB50C7B537AA."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "number"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "number"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(FFF)F",
      "parameters": [
        {
          "index": 0,
          "name": "pct"
        },
        {
          "index": 1,
          "name": "start"
        },
        {
          "index": 2,
          "name": "end"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(I)I"
    },
    {
      "name": "i",
      "descriptor": "(D)D"
    },
    {
      "name": "i",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "number"
        }
      ]
    },
    {
      "name": "i",
      "descriptor": "(FFF)F"
    },
    {
      "name": "j",
      "descriptor": "(D)D"
    },
    {
      "name": "j",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "number"
        }
      ]
    },
    {
      "name": "j",
      "descriptor": "(FFF)F"
    },
    {
      "name": "k",
      "descriptor": "(D)I",
      "parameters": [
        {
          "index": 0,
          "name": "x"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 0,
          "name": "value"
        }
      ]
    },
    {
      "name": "k",
      "descriptor": "(FFF)F"
    },
    {
      "name": "l",
      "descriptor": "(D)F"
    },
    {
      "name": "m",
      "descriptor": "(D)D"
    },
    {
      "name": "n",
      "descriptor": "(D)D"
    }
  ]
}