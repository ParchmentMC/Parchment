{
  "name": "cez",
  "fields": [
    {
      "name": "F",
      "descriptor": "Ljava/util/Map;"
    },
    {
      "name": "G",
      "descriptor": "[Ldna;"
    },
    {
      "name": "H",
      "descriptor": "F"
    },
    {
      "name": "I",
      "descriptor": "Lcks;"
    },
    {
      "name": "J",
      "descriptor": "Z"
    },
    {
      "name": "a",
      "descriptor": "Lclq;"
    },
    {
      "name": "b",
      "descriptor": "Lclq;"
    },
    {
      "name": "c",
      "descriptor": "Lclq;"
    },
    {
      "name": "d",
      "descriptor": "Lclq;"
    },
    {
      "name": "e",
      "descriptor": "Lcls;"
    },
    {
      "name": "f",
      "descriptor": "Ljava/util/Map;"
    },
    {
      "name": "g",
      "descriptor": "I"
    },
    {
      "name": "h",
      "descriptor": "I"
    },
    {
      "name": "i",
      "descriptor": "I"
    },
    {
      "name": "j",
      "descriptor": "I"
    },
    {
      "name": "k",
      "descriptor": "I"
    },
    {
      "name": "l",
      "descriptor": "Ldnt;"
    },
    {
      "name": "m",
      "descriptor": "Ljava/util/Map;"
    },
    {
      "name": "n",
      "descriptor": "Ljava/util/Map;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbsp;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "context"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lcks;Lgg;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "reader"
        },
        {
          "index": 2,
          "name": "state"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lgl;)Lclx;",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "face"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lgl;Z)Lclx;",
      "parameters": [
        {
          "index": 1,
          "name": "reader"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "direction"
        },
        {
          "index": 4,
          "name": "nonNormalCubeAbove"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;)I",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "state"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;Lcks;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "prevState"
        },
        {
          "index": 4,
          "name": "newState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Ljava/util/Random;Lgg;Ldna;Lgl;Lgl;FF)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "context"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getWeakPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "blockState"
        },
        {
          "index": 2,
          "name": "blockAccess"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "side"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;Larz;Ldmw;)Lasa;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "player"
        },
        {
          "index": 5,
          "name": "hand"
        },
        {
          "index": 6,
          "name": "hit"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbzo;Lgg;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "block"
        },
        {
          "index": 5,
          "name": "fromPos"
        },
        {
          "index": 6,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "newState"
        },
        {
          "index": 5,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Ljava/util/Random;)V",
      "javadoc": [
        "Called periodically clientside on blocks near the player to show effects (like furnace fire particles). Note that this method is unrelated to {@link randomTick} and {@link #needsRandomTick}, and will always be called regardless of whether the block can receive random update ticks"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "rand"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwq;Lgg;II)V",
      "javadoc": [
        "performs updates on diagonal neighbors of the target position and passes in the flags. The flags can be referenced from the docs for {@link IWorldWriter#setBlockState(IBlockState, BlockPos, int)}."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "flags"
        },
        {
          "index": 5,
          "name": "recursionLeft"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbws;Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "mirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "rot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgl;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "blockState"
        },
        {
          "index": 1,
          "name": "side"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgl;Lcks;Lbwq;Lgg;Lgg;)Lcks;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "facing"
        },
        {
          "index": 3,
          "name": "facingState"
        },
        {
          "index": 4,
          "name": "level"
        },
        {
          "index": 5,
          "name": "currentPos"
        },
        {
          "index": 6,
          "name": "facingPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "builder"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "([Ldna;)V"
    },
    {
      "name": "b",
      "descriptor": "(I)I",
      "parameters": [
        {
          "index": 0,
          "name": "power"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbvt;Lcks;Lgg;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "reader"
        },
        {
          "index": 2,
          "name": "state"
        },
        {
          "index": 3,
          "name": "pos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbvt;Lgg;Lcks;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "reader"
        },
        {
          "index": 2,
          "name": "pos"
        },
        {
          "index": 3,
          "name": "state"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lbwp;Lgg;)V",
      "javadoc": [
        "Calls World.notifyNeighborsOfStateChange() for all neighboring blocks, but only if the given block is a redstone wire."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbvt;Lgg;Lgl;)I",
      "javadoc": [
        "@deprecated call via {@link IBlockState#getStrongPower(IBlockAccess,BlockPos,EnumFacing)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "blockState"
        },
        {
          "index": 2,
          "name": "blockAccess"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "side"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;Lcks;Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        },
        {
          "index": 2,
          "name": "level"
        },
        {
          "index": 3,
          "name": "pos"
        },
        {
          "index": 4,
          "name": "oldState"
        },
        {
          "index": 5,
          "name": "isMoving"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lbwp;Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "level"
        },
        {
          "index": 2,
          "name": "pos"
        }
      ]
    },
    {
      "name": "f_",
      "descriptor": "(Lcks;)Z",
      "javadoc": [
        "Can this block provide power. Only wire currently seems to have this change based on its state.",
        "@deprecated call via {@link IBlockState#canProvidePower()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "h",
      "descriptor": "(Lcks;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "state"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "(Lcks;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    },
    {
      "name": "o",
      "descriptor": "(Lcks;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "state"
        }
      ]
    },
    {
      "name": "p",
      "descriptor": "(Lcks;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "state"
        }
      ]
    },
    {
      "name": "q",
      "descriptor": "(Lcks;)I",
      "parameters": [
        {
          "index": 1,
          "name": "state"
        }
      ]
    }
  ]
}