{
  "name": "bwp",
  "fields": [
    {
      "name": "A",
      "descriptor": "Z"
    },
    {
      "name": "B",
      "descriptor": "I"
    },
    {
      "name": "C",
      "descriptor": "Lcnu;"
    },
    {
      "name": "D",
      "descriptor": "Ljava/util/function/Supplier;"
    },
    {
      "name": "E",
      "descriptor": "Lcmi;"
    },
    {
      "name": "F",
      "descriptor": "Lbxq;"
    },
    {
      "name": "G",
      "descriptor": "Lwv;"
    },
    {
      "name": "a",
      "descriptor": "[Lgl;"
    },
    {
      "name": "b",
      "descriptor": "Ljava/util/List;"
    },
    {
      "name": "c",
      "descriptor": "Z"
    },
    {
      "name": "d",
      "descriptor": "Lorg/apache/logging/log4j/Logger;"
    },
    {
      "name": "e",
      "descriptor": "Lcom/mojang/serialization/Codec;"
    },
    {
      "name": "f",
      "descriptor": "Lwv;"
    },
    {
      "name": "g",
      "descriptor": "Lwv;"
    },
    {
      "name": "h",
      "descriptor": "Lwv;"
    },
    {
      "name": "i",
      "descriptor": "I"
    },
    {
      "name": "j",
      "descriptor": "I"
    },
    {
      "name": "k",
      "descriptor": "I"
    },
    {
      "name": "l",
      "descriptor": "I"
    },
    {
      "name": "m",
      "descriptor": "I"
    },
    {
      "name": "n",
      "descriptor": "I"
    },
    {
      "name": "o",
      "descriptor": "I"
    },
    {
      "name": "p",
      "descriptor": "Ljava/util/List;"
    },
    {
      "name": "q",
      "descriptor": "I",
      "javadoc": [
        "Contains the current Linear Congruential Generator seed for block updates. Used with an A value of 3 and a C value of 0x3c6ef35f, producing a highly planar series of values ill-suited for choosing random blocks in a 16x128x16 field."
      ]
    },
    {
      "name": "r",
      "descriptor": "I"
    },
    {
      "name": "s",
      "descriptor": "F"
    },
    {
      "name": "t",
      "descriptor": "F"
    },
    {
      "name": "u",
      "descriptor": "F"
    },
    {
      "name": "v",
      "descriptor": "F"
    },
    {
      "name": "w",
      "descriptor": "Ljava/util/Random;"
    },
    {
      "name": "x",
      "descriptor": "Ldij;"
    },
    {
      "name": "y",
      "descriptor": "Z"
    },
    {
      "name": "z",
      "descriptor": "Ljava/lang/Thread;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Ldij;Lwv;Lcnu;Ljava/util/function/Supplier;ZZJ)V"
    },
    {
      "name": "E",
      "descriptor": "(Lgg;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "I",
      "descriptor": "()Lcol;"
    },
    {
      "name": "J",
      "descriptor": "()Ljava/lang/String;",
      "javadoc": [
        "Returns the name of the current chunk provider, by calling chunkprovider.makeString()"
      ]
    },
    {
      "name": "K",
      "descriptor": "()Ldny;"
    },
    {
      "name": "P",
      "descriptor": "()Z",
      "javadoc": [
        "Checks whether its daytime by seeing if the light subtracted from the skylight is less than 4. Always returns true on the client because vanilla has no need for it on the client, therefore it is not synced to the client"
      ]
    },
    {
      "name": "Q",
      "descriptor": "()Z"
    },
    {
      "name": "R",
      "descriptor": "()V"
    },
    {
      "name": "S",
      "descriptor": "()V",
      "javadoc": [
        "Called on construction of the World class to setup the initial skylight values"
      ]
    },
    {
      "name": "T",
      "descriptor": "()V",
      "javadoc": [
        "Called from World constructor to set rainingStrength and thunderingStrength"
      ]
    },
    {
      "name": "U",
      "descriptor": "()V",
      "javadoc": [
        "If on MP, sends a quitting packet."
      ]
    },
    {
      "name": "V",
      "descriptor": "()J"
    },
    {
      "name": "W",
      "descriptor": "()J"
    },
    {
      "name": "X",
      "descriptor": "()Lbwl;",
      "javadoc": [
        "Gets the GameRules instance."
      ]
    },
    {
      "name": "Y",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the current thunder strength (weighted with the rain strength) is greater than 0.9"
      ]
    },
    {
      "name": "Z",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if the current rain strength is greater than 0.2"
      ]
    },
    {
      "name": "a",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "a",
      "descriptor": "(DDDDDDLna;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pMotionX"
        },
        {
          "index": 9,
          "name": "pMotionY"
        },
        {
          "index": 11,
          "name": "pMotionZ"
        },
        {
          "index": 13,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(DDDLafd;Laff;FFZ)V",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pY"
        },
        {
          "index": 5,
          "name": "pZ"
        },
        {
          "index": 7,
          "name": "pSound"
        },
        {
          "index": 8,
          "name": "pCategory"
        },
        {
          "index": 9,
          "name": "pVolume"
        },
        {
          "index": 10,
          "name": "pPitch"
        },
        {
          "index": 11,
          "name": "pDistanceDelay"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(F)F",
      "javadoc": [
        "Return getCelestialAngle()*2*PI"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPartialTicks"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(I)Latf;",
      "javadoc": [
        "Returns the Entity with the given ID, or null if it doesn't exist in this World."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pId"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(II)Lcml;"
    },
    {
      "name": "a",
      "descriptor": "(IIII)Lgg;",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 2,
          "name": "pY"
        },
        {
          "index": 3,
          "name": "pZ"
        },
        {
          "index": 4,
          "name": "pYMask"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IILcmp;Z)Lcml;",
      "parameters": [
        {
          "index": 1,
          "name": "pX"
        },
        {
          "index": 2,
          "name": "pZ"
        },
        {
          "index": 3,
          "name": "pRequiredStatus"
        },
        {
          "index": 4,
          "name": "pNonnull"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(ILgg;I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBreakerId"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pProgress"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;B)V",
      "javadoc": [
        "sends a Packet 38 (Entity Status) to all tracked players of that entity"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;DDDFLbwh$a;)Lbwh;",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pY"
        },
        {
          "index": 6,
          "name": "pZ"
        },
        {
          "index": 8,
          "name": "pExplosionRadius"
        },
        {
          "index": 9,
          "name": "pMode"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;DDDFZLbwh$a;)Lbwh;",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pY"
        },
        {
          "index": 6,
          "name": "pZ"
        },
        {
          "index": 8,
          "name": "pExplosionRadius"
        },
        {
          "index": 9,
          "name": "pCausesFire"
        },
        {
          "index": 10,
          "name": "pMode"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;Lasp;Lbwi;DDDFZLbwh$a;)Lbwh;",
      "parameters": [
        {
          "index": 1,
          "name": "pExploder"
        },
        {
          "index": 2,
          "name": "pDamageSource"
        },
        {
          "index": 3,
          "name": "pContext"
        },
        {
          "index": 4,
          "name": "pX"
        },
        {
          "index": 6,
          "name": "pY"
        },
        {
          "index": 8,
          "name": "pZ"
        },
        {
          "index": 10,
          "name": "pSize"
        },
        {
          "index": 11,
          "name": "pCausesFire"
        },
        {
          "index": 12,
          "name": "pMode"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;Lcov;Lgg;I)V"
    },
    {
      "name": "a",
      "descriptor": "(Latf;Ldmv;Ljava/util/function/Predicate;)Ljava/util/List;",
      "javadoc": [
        "Gets all entities within the specified AABB excluding the one passed into it."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        },
        {
          "index": 2,
          "name": "pBoundingBox"
        },
        {
          "index": 3,
          "name": "pPredicate"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Latf;Ljava/util/function/Predicate;Ljava/util/List;Latf;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;DDDLafd;Laff;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pY"
        },
        {
          "index": 6,
          "name": "pZ"
        },
        {
          "index": 8,
          "name": "pSound"
        },
        {
          "index": 9,
          "name": "pCategory"
        },
        {
          "index": 10,
          "name": "pVolume"
        },
        {
          "index": 11,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;Latf;Lafd;Laff;FF)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pEntity"
        },
        {
          "index": 3,
          "name": "pEvent"
        },
        {
          "index": 4,
          "name": "pCategory"
        },
        {
          "index": 5,
          "name": "pVolume"
        },
        {
          "index": 6,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbkd;Lgg;Lafd;Laff;FF)V",
      "javadoc": [
        "Plays a sound. On the server, the sound is broadcast to all nearby <em>except</em> the given player. On the client, the sound only plays if the given player is the client player. Thus, this method is intended to be called from code running on both sides. The client plays it locally and the server plays it for everyone else."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPlayer"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pSound"
        },
        {
          "index": 4,
          "name": "pCategory"
        },
        {
          "index": 5,
          "name": "pVolume"
        },
        {
          "index": 6,
          "name": "pPitch"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbzo;)Ljava/lang/String;"
    },
    {
      "name": "a",
      "descriptor": "(Lcip;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcjw;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lcoj;Ldmv;Ljava/util/function/Predicate;)Ljava/util/List;"
    },
    {
      "name": "a",
      "descriptor": "(Lcps$a;II)I",
      "parameters": [
        {
          "index": 1,
          "name": "pHeightmapType"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 3,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Latf;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Latf;Lgl;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pEntity"
        },
        {
          "index": 3,
          "name": "pDirection"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lbzo;II)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlock"
        },
        {
          "index": 3,
          "name": "pEventID"
        },
        {
          "index": 4,
          "name": "pEventParam"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lbzo;Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlock"
        },
        {
          "index": 3,
          "name": "pFromPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lbzo;Lgl;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlockType"
        },
        {
          "index": 3,
          "name": "pSkipSide"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;I)Z",
      "javadoc": [
        "Sets a block state into this world.Flags are as follows:",
        "1 will cause a block update.",
        "2 will send the change to clients.",
        "4 will prevent the block from being re-rendered.",
        "8 will force any re-renders to run on the main thread instead",
        "16 will prevent neighbor reactions (e.g. fences connecting, observers pulsing).",
        "32 will prevent neighbor reactions from spawning drops.",
        "64 will signify the block is being moved.",
        "Flags can be OR-ed"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pNewState"
        },
        {
          "index": 3,
          "name": "pFlags"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;II)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pState"
        },
        {
          "index": 3,
          "name": "pFlags"
        },
        {
          "index": 4,
          "name": "pRecursionLeft"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlockState"
        },
        {
          "index": 3,
          "name": "pNewState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lcks;Lcks;I)V",
      "javadoc": [
        "Flags are as in setBlockState"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pOldState"
        },
        {
          "index": 3,
          "name": "pNewState"
        },
        {
          "index": 4,
          "name": "pFlags"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lgl;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pSide"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Ljava/util/function/Predicate;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Z)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pIsMoving"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;ZLatf;I)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pDropBlock"
        },
        {
          "index": 3,
          "name": "pEntity"
        },
        {
          "index": 4,
          "name": "pRecursionLeft"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lht;DDDDDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pParticleData"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pY"
        },
        {
          "index": 6,
          "name": "pZ"
        },
        {
          "index": 8,
          "name": "pXSpeed"
        },
        {
          "index": 10,
          "name": "pYSpeed"
        },
        {
          "index": 12,
          "name": "pZSpeed"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lht;ZDDDDDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pParticleData"
        },
        {
          "index": 2,
          "name": "pForceAlwaysRender"
        },
        {
          "index": 3,
          "name": "pX"
        },
        {
          "index": 5,
          "name": "pY"
        },
        {
          "index": 7,
          "name": "pZ"
        },
        {
          "index": 9,
          "name": "pXSpeed"
        },
        {
          "index": 11,
          "name": "pYSpeed"
        },
        {
          "index": 13,
          "name": "pZSpeed"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;)Ldhs;",
      "parameters": [
        {
          "index": 1,
          "name": "pMapName"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/lang/String;Ldhs;)V"
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/function/Consumer;Latf;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pConsumerEntity"
        },
        {
          "index": 2,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/function/Predicate;Ljava/util/List;Lcoj;Latf;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lpk;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPacket"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lq;)Lr;",
      "javadoc": [
        "Adds some basic stats of the world to the given crash report."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pReport"
        }
      ]
    },
    {
      "name": "a_",
      "descriptor": "(Lgg;)Lcks;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "aa",
      "descriptor": "()Lwv;"
    },
    {
      "name": "ab",
      "descriptor": "()Lapu;"
    },
    {
      "name": "ac",
      "descriptor": "()Ljava/util/function/Supplier;"
    },
    {
      "name": "ad",
      "descriptor": "()Z"
    },
    {
      "name": "b",
      "descriptor": "(F)F",
      "parameters": [
        {
          "index": 1,
          "name": "pDelta"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(I)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pY"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(ILgg;I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pId"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pData"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Lbzo;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlock"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Lcks;)Z",
      "javadoc": [
        "Convenience method to update the block on both the client and server"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pState"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Lcks;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBlockPos"
        },
        {
          "index": 2,
          "name": "pOldState"
        },
        {
          "index": 3,
          "name": "pNewState"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Lgl;)I",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pFacing"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Ljava/util/function/Predicate;)Z"
    },
    {
      "name": "b",
      "descriptor": "(Lht;DDDDDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pParticleData"
        },
        {
          "index": 2,
          "name": "pX"
        },
        {
          "index": 4,
          "name": "pY"
        },
        {
          "index": 6,
          "name": "pZ"
        },
        {
          "index": 8,
          "name": "pXSpeed"
        },
        {
          "index": 10,
          "name": "pYSpeed"
        },
        {
          "index": 12,
          "name": "pZSpeed"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lht;ZDDDDDD)V",
      "parameters": [
        {
          "index": 1,
          "name": "pParticleData"
        },
        {
          "index": 2,
          "name": "pIgnoreRange"
        },
        {
          "index": 3,
          "name": "pX"
        },
        {
          "index": 5,
          "name": "pY"
        },
        {
          "index": 7,
          "name": "pZ"
        },
        {
          "index": 9,
          "name": "pXSpeed"
        },
        {
          "index": 11,
          "name": "pYSpeed"
        },
        {
          "index": 13,
          "name": "pZSpeed"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(ZZ)V",
      "javadoc": [
        "first boolean for hostile mobs and second for peaceful mobs"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pHostile"
        },
        {
          "index": 2,
          "name": "pPeaceful"
        }
      ]
    },
    {
      "name": "b_",
      "descriptor": "(Lgg;)Ldes;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(F)V",
      "javadoc": [
        "Sets the strength of the thunder."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pStrength"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(I)V",
      "parameters": [
        {
          "index": 1,
          "name": "pTimeFlash"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(II)Lbvt;",
      "parameters": [
        {
          "index": 1,
          "name": "pChunkX"
        },
        {
          "index": 2,
          "name": "pChunkZ"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lgg;Lbzo;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pBlock"
        }
      ]
    },
    {
      "name": "c_",
      "descriptor": "(Lgg;)Lcip;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "close",
      "descriptor": "()V"
    },
    {
      "name": "d",
      "descriptor": "(F)F",
      "javadoc": [
        "Returns rain strength."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pDelta"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(II)Lcmw;",
      "parameters": [
        {
          "index": 1,
          "name": "pChunkX"
        },
        {
          "index": 2,
          "name": "pChunkZ"
        }
      ]
    },
    {
      "name": "d_",
      "descriptor": "(Lgg;)Lary;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(F)V",
      "javadoc": [
        "Sets the strength of the rain."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pStrength"
        }
      ]
    },
    {
      "name": "j_",
      "descriptor": "()Z"
    },
    {
      "name": "k",
      "descriptor": "(Lgg;)Z",
      "javadoc": [
        "Check if the given BlockPos has valid coordinates"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "k_",
      "descriptor": "()Ldej;"
    },
    {
      "name": "l",
      "descriptor": "(Lgg;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "l_",
      "descriptor": "()I"
    },
    {
      "name": "m",
      "descriptor": "(Lgg;)Lcmw;",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "m_",
      "descriptor": "()Ldhy;",
      "javadoc": [
        "Returns the world's WorldInfo object"
      ]
    },
    {
      "name": "n",
      "descriptor": "()Lnet/minecraft/server/MinecraftServer;"
    },
    {
      "name": "n",
      "descriptor": "(Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "n_",
      "descriptor": "()I"
    },
    {
      "name": "o",
      "descriptor": "()Ljava/lang/String;"
    },
    {
      "name": "o",
      "descriptor": "(Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "o_",
      "descriptor": "()Lcmi;"
    },
    {
      "name": "p",
      "descriptor": "(Lgg;)V"
    },
    {
      "name": "p_",
      "descriptor": "()Lcnu;"
    },
    {
      "name": "q",
      "descriptor": "()Lbti;"
    },
    {
      "name": "q",
      "descriptor": "(Lgg;)I",
      "javadoc": [
        "Returns the single highest strong power out of all directions using getStrongPower(BlockPos, EnumFacing)"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "q_",
      "descriptor": "()Ljava/util/Random;"
    },
    {
      "name": "r",
      "descriptor": "()Lagc;"
    },
    {
      "name": "r",
      "descriptor": "(Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "r_",
      "descriptor": "()Lbxq;"
    },
    {
      "name": "s",
      "descriptor": "()Z"
    },
    {
      "name": "s",
      "descriptor": "(Lgg;)I",
      "javadoc": [
        "Checks if the specified block or its neighbors are powered by a neighboring block. Used by blocks like TNT and Doors."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "t",
      "descriptor": "(Lgg;)Z",
      "javadoc": [
        "Check if precipitation is currently happening at a position"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pPosition"
        }
      ]
    },
    {
      "name": "u",
      "descriptor": "(Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "v",
      "descriptor": "()I"
    }
  ]
}