{
  "name": "ccp",
  "fields": [
    {
      "name": "F",
      "descriptor": "Ldnt;"
    },
    {
      "name": "G",
      "descriptor": "Ldnt;"
    },
    {
      "name": "H",
      "descriptor": "Ldnt;"
    },
    {
      "name": "I",
      "descriptor": "Ldnt;"
    },
    {
      "name": "J",
      "descriptor": "Ldnt;"
    },
    {
      "name": "L",
      "descriptor": "Ldnt;"
    },
    {
      "name": "M",
      "descriptor": "Ldnt;"
    },
    {
      "name": "N",
      "descriptor": "Ldnt;"
    },
    {
      "name": "O",
      "descriptor": "Ldnt;"
    },
    {
      "name": "P",
      "descriptor": "Ldnt;"
    },
    {
      "name": "Q",
      "descriptor": "Ldnt;"
    },
    {
      "name": "R",
      "descriptor": "Ldnt;"
    },
    {
      "name": "S",
      "descriptor": "Ldnt;"
    },
    {
      "name": "T",
      "descriptor": "Ldnt;"
    },
    {
      "name": "U",
      "descriptor": "Ldnt;"
    },
    {
      "name": "V",
      "descriptor": "Ldnt;"
    },
    {
      "name": "W",
      "descriptor": "Ldnt;"
    },
    {
      "name": "X",
      "descriptor": "Ldnt;"
    },
    {
      "name": "Y",
      "descriptor": "Ldnt;"
    },
    {
      "name": "Z",
      "descriptor": "Ldnt;"
    },
    {
      "name": "a",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aA",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aB",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aC",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aD",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aR",
      "descriptor": "Los;"
    },
    {
      "name": "aa",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ab",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ac",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ad",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ae",
      "descriptor": "Ldnt;"
    },
    {
      "name": "af",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ag",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ah",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ai",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aj",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ak",
      "descriptor": "Ldnt;"
    },
    {
      "name": "al",
      "descriptor": "Ldnt;"
    },
    {
      "name": "am",
      "descriptor": "Ldnt;"
    },
    {
      "name": "an",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ao",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ap",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aq",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ar",
      "descriptor": "Ldnt;"
    },
    {
      "name": "as",
      "descriptor": "Ldnt;"
    },
    {
      "name": "at",
      "descriptor": "Ldnt;"
    },
    {
      "name": "au",
      "descriptor": "Ldnt;"
    },
    {
      "name": "av",
      "descriptor": "Ldnt;"
    },
    {
      "name": "aw",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ax",
      "descriptor": "Ldnt;"
    },
    {
      "name": "ay",
      "descriptor": "Ldnt;"
    },
    {
      "name": "az",
      "descriptor": "Ldnt;"
    },
    {
      "name": "b",
      "descriptor": "Ldnt;"
    },
    {
      "name": "c",
      "descriptor": "Ldnt;"
    },
    {
      "name": "d",
      "descriptor": "Ldnt;"
    },
    {
      "name": "e",
      "descriptor": "Ldnt;"
    },
    {
      "name": "f",
      "descriptor": "Ldnt;"
    },
    {
      "name": "g",
      "descriptor": "Ldnt;"
    },
    {
      "name": "h",
      "descriptor": "Ldnt;"
    },
    {
      "name": "i",
      "descriptor": "Ldnt;"
    },
    {
      "name": "j",
      "descriptor": "Ldnt;"
    },
    {
      "name": "k",
      "descriptor": "Ldnt;"
    },
    {
      "name": "l",
      "descriptor": "Ldnt;"
    },
    {
      "name": "m",
      "descriptor": "Ldnt;"
    },
    {
      "name": "n",
      "descriptor": "Ldnt;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;ILbkc;Lbkd;)Lbmj;"
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldhb;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pType"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbwp;Lgg;Lbkd;Larz;Ldmw;)Lasa;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pPlayer"
        },
        {
          "index": 5,
          "name": "pHand"
        },
        {
          "index": 6,
          "name": "pHit"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbws;Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcdx;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given mirror of the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withMirror(Mirror)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pMirror"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lcfk;)Lcks;",
      "javadoc": [
        "Returns the blockstate with the given rotation from the passed blockstate. If inapplicable, returns the passed blockstate.",
        "@deprecated call via {@link IBlockState#withRotation(Rotation)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pRot"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lckt$a;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pBuilder"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Lbwp;Lgg;)Lasd;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "b_",
      "descriptor": "(Lcks;)Lcfd;",
      "javadoc": [
        "The type of render function called. MODEL for mixed tesr and static model, MODELBLOCK_ANIMATED for TESR-only, LIQUID for vanilla liquids, INVISIBLE to skip all rendering",
        "@deprecated call via {@link IBlockState#getRenderType()} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "n",
      "descriptor": "(Lcks;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        }
      ]
    }
  ]
}