{
  "name": "azu",
  "fields": [
    {
      "name": "b",
      "descriptor": "Lus;"
    },
    {
      "name": "c",
      "descriptor": "Lazg;"
    },
    {
      "name": "d",
      "descriptor": "Lfx;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Laqe;Lbrx;)V"
    },
    {
      "name": "C",
      "descriptor": "(Laqa;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pEntity"
        }
      ]
    },
    {
      "name": "I",
      "descriptor": "()Ladp;"
    },
    {
      "name": "N",
      "descriptor": "()V"
    },
    {
      "name": "a",
      "descriptor": "(DZLceh;Lfx;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pY"
        },
        {
          "index": 3,
          "name": "pOnGround"
        },
        {
          "index": 4,
          "name": "pState"
        },
        {
          "index": 5,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lapk;F)Z",
      "javadoc": [
        "Called when the entity is attacked."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pSource"
        },
        {
          "index": 2,
          "name": "pAmount"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "aC",
      "descriptor": "()Z"
    },
    {
      "name": "aU",
      "descriptor": "()Z",
      "javadoc": [
        "Returns true if this entity should push and be pushed by other entities when colliding."
      ]
    },
    {
      "name": "b",
      "descriptor": "(FF)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pDistance"
        },
        {
          "index": 2,
          "name": "pDamageMultiplier"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laqe;Lbry;Laqp;Lfx;Ljava/util/Random;)Z",
      "parameters": [
        {
          "index": 0,
          "name": "pBat"
        },
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pReason"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pRandom"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Laqx;Laqb;)F",
      "parameters": [
        {
          "index": 1,
          "name": "pPose"
        },
        {
          "index": 2,
          "name": "pSize"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lmd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "bQ",
      "descriptor": "()Z",
      "javadoc": [
        "Return whether this entity should NOT trigger a pressure plate or a tripwire."
      ]
    },
    {
      "name": "dG",
      "descriptor": "()F",
      "javadoc": [
        "Returns the volume for the sounds this mob makes."
      ]
    },
    {
      "name": "dH",
      "descriptor": "()F",
      "javadoc": [
        "Gets the pitch of living sounds in living entities."
      ]
    },
    {
      "name": "dQ",
      "descriptor": "()V"
    },
    {
      "name": "dq",
      "descriptor": "()Ladp;"
    },
    {
      "name": "e",
      "descriptor": "()V"
    },
    {
      "name": "e",
      "descriptor": "(Lapk;)Ladp;",
      "parameters": [
        {
          "index": 1,
          "name": "pDamageSource"
        }
      ]
    },
    {
      "name": "eI",
      "descriptor": "()Z"
    },
    {
      "name": "eJ",
      "descriptor": "()Z"
    },
    {
      "name": "j",
      "descriptor": "()V",
      "javadoc": [
        "Called to update the entity's position/logic."
      ]
    },
    {
      "name": "m",
      "descriptor": "()Lark$a;"
    },
    {
      "name": "t",
      "descriptor": "(Z)V",
      "parameters": [
        {
          "index": 1,
          "name": "pIsHanging"
        }
      ]
    }
  ]
}