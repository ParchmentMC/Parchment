{
  "name": "apy",
  "fields": [
    {
      "name": "b",
      "descriptor": "I"
    },
    {
      "name": "bo",
      "descriptor": "Lus;"
    },
    {
      "name": "c",
      "descriptor": "I"
    },
    {
      "name": "d",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Laqe;Lbrx;)V"
    },
    {
      "name": "a",
      "descriptor": "(I)V",
      "javadoc": [
        "Increases this entity's age. If the entity is an adult (if the entity's age is greater than or equal to 0) then the entity's age will be set to {@link #forcedAge}. This method does not update {@link #forcedAge}."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pGrowth"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IZ)V",
      "javadoc": [
        "Increases this entity's age, optionally updating {@link #forcedAge}. If the entity is an adult (if the entity's age is greater than or equal to 0) then the entity's age will be set to {@link #forcedAge}."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pGrowthSeconds"
        },
        {
          "index": 2,
          "name": "pUpdateForcedAge"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Laag;Lapy;)Lapy;",
      "parameters": [
        {
          "index": 1,
          "name": "pWorld"
        },
        {
          "index": 2,
          "name": "pMate"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbsk;Laos;Laqp;Larc;Lmd;)Larc;",
      "parameters": [
        {
          "index": 1,
          "name": "pWorldIn"
        },
        {
          "index": 2,
          "name": "pDifficultyIn"
        },
        {
          "index": 3,
          "name": "pReason"
        },
        {
          "index": 4,
          "name": "pSpawnDataIn"
        },
        {
          "index": 5,
          "name": "pDataTag"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lmd;)V",
      "javadoc": [
        "(abstract) Protected helper method to read subclass entity data from NBT."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lus;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pKey"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Z)V",
      "javadoc": [
        "Set whether this zombie is a child."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pChildZombie"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lmd;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pCompound"
        }
      ]
    },
    {
      "name": "c_",
      "descriptor": "(I)V",
      "javadoc": [
        "The age value may be negative or positive or zero. If it's negative, it get's incremented on each tick, if it's positive, it get's decremented each tick. With a negative value the Entity is considered a child."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pAge"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "()V"
    },
    {
      "name": "f",
      "descriptor": "()Z"
    },
    {
      "name": "i",
      "descriptor": "()I",
      "javadoc": [
        "The age value may be negative or positive or zero. If it's negative, it get's incremented on each tick, if it's positive, it get's decremented each tick. Don't confuse this with EntityLiving.getAge. With a negative value the Entity is considered a child."
      ]
    },
    {
      "name": "k",
      "descriptor": "()V",
      "javadoc": [
        "Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use this to react to sunlight and start to burn."
      ]
    },
    {
      "name": "m",
      "descriptor": "()V",
      "javadoc": [
        "This is called when Entity's growing age timer reaches 0 (negative values are considered as a child, positive as an adult)"
      ]
    },
    {
      "name": "w_",
      "descriptor": "()Z",
      "javadoc": [
        "If Animal, checks if the age timer is negative"
      ]
    }
  ]
}