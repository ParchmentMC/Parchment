{
  "name": "gg",
  "fields": [
    {
      "name": "a",
      "descriptor": "Lcom/mojang/serialization/Codec;"
    },
    {
      "name": "b",
      "descriptor": "Lgg;",
      "javadoc": [
        "An immutable block pos with zero as all coordinates."
      ]
    },
    {
      "name": "c",
      "descriptor": "I"
    },
    {
      "name": "d",
      "descriptor": "Lorg/apache/logging/log4j/Logger;"
    },
    {
      "name": "g",
      "descriptor": "I"
    },
    {
      "name": "h",
      "descriptor": "I"
    },
    {
      "name": "i",
      "descriptor": "J"
    },
    {
      "name": "j",
      "descriptor": "J"
    },
    {
      "name": "k",
      "descriptor": "J"
    },
    {
      "name": "l",
      "descriptor": "I"
    },
    {
      "name": "m",
      "descriptor": "I"
    },
    {
      "name": "n",
      "descriptor": "I"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(DDD)V"
    },
    {
      "name": "<init>",
      "descriptor": "(III)V",
      "javadoc": [
        "Constructs a {@code BlockPos} using the provided X, Y, and Z coordinates."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pX",
          "javadoc": "The X coordinate"
        },
        {
          "index": 2,
          "name": "pY",
          "javadoc": "The Y coordinate"
        },
        {
          "index": 3,
          "name": "pZ",
          "javadoc": "The Z coordinate"
        }
      ]
    },
    {
      "name": "<init>",
      "descriptor": "(Ldna;)V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lgt;)V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lhb;)V"
    },
    {
      "name": "a",
      "descriptor": "()J"
    },
    {
      "name": "a",
      "descriptor": "(DDD)Lgg;"
    },
    {
      "name": "a",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "a",
      "descriptor": "(III)J",
      "parameters": [
        {
          "index": 0,
          "name": "pX"
        },
        {
          "index": 1,
          "name": "pY"
        },
        {
          "index": 2,
          "name": "pZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IIIIII)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "pMinX"
        },
        {
          "index": 1,
          "name": "pMinY"
        },
        {
          "index": 2,
          "name": "pMinZ"
        },
        {
          "index": 3,
          "name": "pMaxX"
        },
        {
          "index": 4,
          "name": "pMaxY"
        },
        {
          "index": 5,
          "name": "pMaxZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(IIIIIII)Ljava/util/Iterator;"
    },
    {
      "name": "a",
      "descriptor": "(IILjava/util/Random;IIIII)Ljava/util/Iterator;"
    },
    {
      "name": "a",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "pPackedPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(JIII)J",
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pDx"
        },
        {
          "index": 3,
          "name": "pDy"
        },
        {
          "index": 4,
          "name": "pDz"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(JLgl;)J",
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        },
        {
          "index": 2,
          "name": "pDirection"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcfk;)Lgg;",
      "parameters": [
        {
          "index": 1,
          "name": "pRotation"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldaq;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "pBox"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ldmv;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "pAabb"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;)Ljava/util/stream/IntStream;"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;III)Ljava/lang/Iterable;",
      "javadoc": [
        "Returns BlockPos#getProximitySortedBoxPositions as an Iterator."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        },
        {
          "index": 1,
          "name": "pXWidth"
        },
        {
          "index": 2,
          "name": "pYHeight"
        },
        {
          "index": 3,
          "name": "pZWidth"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;IILjava/util/function/Predicate;)Ljava/util/Optional;",
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        },
        {
          "index": 1,
          "name": "pWidth"
        },
        {
          "index": 2,
          "name": "pHeight"
        },
        {
          "index": 3,
          "name": "pPosFilter"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgg;ILgl;Lgl;)Ljava/lang/Iterable;"
    },
    {
      "name": "a",
      "descriptor": "(Lgg;Lgg;)Ljava/lang/Iterable;",
      "parameters": [
        {
          "index": 0,
          "name": "pFirstPos"
        },
        {
          "index": 1,
          "name": "pSecondPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgl$a;I)Lgg;"
    },
    {
      "name": "a",
      "descriptor": "(Lgl;)Lgg;"
    },
    {
      "name": "a",
      "descriptor": "(Lgl;I)Lgg;",
      "javadoc": [
        "Offsets this BlockPos n blocks in the given direction"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pFacing"
        },
        {
          "index": 2,
          "name": "pN"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lgl;Lgl;Lgg;I)Ljava/util/Iterator;"
    },
    {
      "name": "a",
      "descriptor": "(Lhb;)Lgg;"
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;IIIIIII)Ljava/lang/Iterable;",
      "parameters": [
        {
          "index": 0,
          "name": "pRand"
        },
        {
          "index": 1,
          "name": "pAmount"
        },
        {
          "index": 2,
          "name": "pMinX"
        },
        {
          "index": 3,
          "name": "pMinY"
        },
        {
          "index": 4,
          "name": "pMinZ"
        },
        {
          "index": 5,
          "name": "pMaxX"
        },
        {
          "index": 6,
          "name": "pMaxY"
        },
        {
          "index": 7,
          "name": "pMaxZ"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/Random;ILgg;I)Ljava/lang/Iterable;"
    },
    {
      "name": "a",
      "descriptor": "(Ljava/util/stream/IntStream;)Lcom/mojang/serialization/DataResult;"
    },
    {
      "name": "a",
      "descriptor": "([I)Lgg;"
    },
    {
      "name": "b",
      "descriptor": "()Lgg;",
      "javadoc": [
        "Offset this BlockPos 1 block up"
      ]
    },
    {
      "name": "b",
      "descriptor": "(DDD)Lhb;"
    },
    {
      "name": "b",
      "descriptor": "(I)Lgg;",
      "javadoc": [
        "Offset this BlockPos n blocks up"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pN"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(III)Lgg;"
    },
    {
      "name": "b",
      "descriptor": "(IIIIII)Ljava/lang/Iterable;",
      "javadoc": [
        "Creates an Iterable that returns all positions in the box specified by the given corners. <strong>Coordinates must be in order</strong>\" e.g. x1 <= x2.",
        "",
        "This method uses {@link BlockPos.MutableBlockPos MutableBlockPos} instead of regular BlockPos, which grants better performance. However, the resulting BlockPos instances can only be used inside the iteration loop (as otherwise the value will change), unless {@link #toImmutable()} is called. This method is ideal for searching large areas and only storing a few locations.",
        "",
        "@see #getAllInBox(BlockPos, BlockPos)",
        "@see #getAllInBox(int, int, int, int, int, int)",
        "@see #getAllInBoxMutable(BlockPos, BlockPos)"
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pX1"
        },
        {
          "index": 1,
          "name": "pY1"
        },
        {
          "index": 2,
          "name": "pZ1"
        },
        {
          "index": 3,
          "name": "pX2"
        },
        {
          "index": 4,
          "name": "pY2"
        },
        {
          "index": 5,
          "name": "pZ2"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "pPackedPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;III)Ljava/util/stream/Stream;",
      "javadoc": [
        "Returns a stream of positions in a box shape, ordered by closest to furthest. Returns by definition the given position as first element in the stream."
      ],
      "parameters": [
        {
          "index": 0,
          "name": "pPos"
        },
        {
          "index": 1,
          "name": "pXWidth"
        },
        {
          "index": 2,
          "name": "pYHeight"
        },
        {
          "index": 3,
          "name": "pZWidth"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgg;Lgg;)Ljava/util/stream/Stream;",
      "parameters": [
        {
          "index": 0,
          "name": "pFirstPos"
        },
        {
          "index": 1,
          "name": "pSecondPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lgl$a;I)Lhb;"
    },
    {
      "name": "b",
      "descriptor": "(Lgl;)Lhb;"
    },
    {
      "name": "b",
      "descriptor": "(Lgl;I)Lhb;"
    },
    {
      "name": "b",
      "descriptor": "(Lhb;)Lgg;"
    },
    {
      "name": "c",
      "descriptor": "()Lgg;",
      "javadoc": [
        "Offset this BlockPos 1 block down"
      ]
    },
    {
      "name": "c",
      "descriptor": "(I)Lgg;",
      "javadoc": [
        "Offset this BlockPos n blocks down"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pN"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(III)Lhb;"
    },
    {
      "name": "c",
      "descriptor": "(IIIIII)Ljava/util/Iterator;"
    },
    {
      "name": "c",
      "descriptor": "(J)I",
      "parameters": [
        {
          "index": 0,
          "name": "pPackedPos"
        }
      ]
    },
    {
      "name": "c",
      "descriptor": "(Lhb;)Lgg;",
      "javadoc": [
        "Calculate the cross product of this and the given Vector"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pVec"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "()Lgg;"
    },
    {
      "name": "d",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "d",
      "descriptor": "(J)Lgg;",
      "parameters": [
        {
          "index": 0,
          "name": "pPackedPos"
        }
      ]
    },
    {
      "name": "d",
      "descriptor": "(Lhb;)Lhb;"
    },
    {
      "name": "e",
      "descriptor": "()Lgg;"
    },
    {
      "name": "e",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "e",
      "descriptor": "(J)J",
      "parameters": [
        {
          "index": 0,
          "name": "pPackedPos"
        }
      ]
    },
    {
      "name": "e",
      "descriptor": "(Lhb;)Lhb;"
    },
    {
      "name": "f",
      "descriptor": "()Lgg;"
    },
    {
      "name": "f",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "f",
      "descriptor": "(Lhb;)Lhb;"
    },
    {
      "name": "g",
      "descriptor": "()Lgg;"
    },
    {
      "name": "g",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "h",
      "descriptor": "()Lgg;",
      "javadoc": [
        "Returns a version of this BlockPos that is guaranteed to be immutable.",
        "",
        "<p>When storing a BlockPos given to you for an extended period of time, make sure you",
        "use this in case the value is changed internally.</p>"
      ]
    },
    {
      "name": "h",
      "descriptor": "(I)Lgg;"
    },
    {
      "name": "i",
      "descriptor": "()Lgg$a;"
    },
    {
      "name": "i",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "j",
      "descriptor": "()Lhb;"
    },
    {
      "name": "j",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "k",
      "descriptor": "()Lhb;"
    },
    {
      "name": "k",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "l",
      "descriptor": "()Lhb;"
    },
    {
      "name": "l",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "m",
      "descriptor": "()Lhb;"
    },
    {
      "name": "m",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "n",
      "descriptor": "()Lhb;"
    },
    {
      "name": "n",
      "descriptor": "(I)Lhb;"
    },
    {
      "name": "o",
      "descriptor": "()Lhb;"
    },
    {
      "name": "o",
      "descriptor": "(I)Lhb;"
    }
  ]
}