{
  "name": "byt",
  "fields": [
    {
      "name": "a",
      "descriptor": "F"
    },
    {
      "name": "b",
      "descriptor": "Ldnt;"
    }
  ],
  "methods": [
    {
      "name": "<clinit>",
      "descriptor": "()V"
    },
    {
      "name": "<init>",
      "descriptor": "(Lckr$c;)V"
    },
    {
      "name": "S_",
      "descriptor": "()Lckr$b;",
      "javadoc": [
        "Get the OffsetType for this Block. Determines if the model is rendered slightly offset."
      ]
    },
    {
      "name": "a",
      "descriptor": "(Labr;Ljava/util/Random;Lgg;Lcks;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pRand"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lcks;)Lbqp;",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbvt;Lgg;Lcks;Z)Z",
      "javadoc": [
        "Whether this IGrowable can grow"
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pPos"
        },
        {
          "index": 3,
          "name": "pState"
        },
        {
          "index": 4,
          "name": "pIsClient"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Lgg;)V",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lbwp;Ljava/util/Random;Lgg;Lcks;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pLevel"
        },
        {
          "index": 2,
          "name": "pRand"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pState"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbkd;Lbvt;Lgg;)F",
      "javadoc": [
        "Get the hardness of this Block relative to the ability of the given player",
        "@deprecated call via {@link IBlockState#getPlayerRelativeBlockHardness(EntityPlayer,World,BlockPos)} whenever possible. Implementing/overriding is fine."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pPlayer"
        },
        {
          "index": 3,
          "name": "pLevel"
        },
        {
          "index": 4,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbvt;Lgg;Ldnf;)Ldnt;",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pContext"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lbws;Lgg;)Z",
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        }
      ]
    },
    {
      "name": "a",
      "descriptor": "(Lcks;Lgl;Lcks;Lbwq;Lgg;Lgg;)Lcks;",
      "javadoc": [
        "Update the provided state given the provided neighbor facing and neighbor state, returning a new state.",
        "For example, fences make their connections to the passed in state if possible, and wet concrete powder immediately returns its solidified counterpart.",
        "Note that this method should ideally consider only the specific face passed in."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pFacing"
        },
        {
          "index": 3,
          "name": "pFacingState"
        },
        {
          "index": 4,
          "name": "pLevel"
        },
        {
          "index": 5,
          "name": "pCurrentPos"
        },
        {
          "index": 6,
          "name": "pFacingPos"
        }
      ]
    },
    {
      "name": "b",
      "descriptor": "(Lcks;Labr;Lgg;Ljava/util/Random;)V",
      "javadoc": [
        "Performs a random tick on a block."
      ],
      "parameters": [
        {
          "index": 1,
          "name": "pState"
        },
        {
          "index": 2,
          "name": "pLevel"
        },
        {
          "index": 3,
          "name": "pPos"
        },
        {
          "index": 4,
          "name": "pRandom"
        }
      ]
    }
  ]
}